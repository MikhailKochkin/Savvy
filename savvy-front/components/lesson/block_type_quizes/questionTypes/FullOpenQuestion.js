import { useState } from "react";
import styled from "styled-components";
import { useMutation, gql } from "@apollo/client";
import { BiMicrophone, BiMicrophoneOff } from "react-icons/bi";
import parse from "html-react-parser";
import { InfinitySpin, TailSpin } from "react-loader-spinner";
import { useTranslation } from "next-i18next";
import IconBlockElement from "../../styles/commonElements/IconBlockElement";

const SEND_MESSAGE_MUTATION = gql`
  mutation SEND_MESSAGE_MUTATION(
    $subject: String
    $name: String
    $email: String
    $firm: String
    $connection: String
    $type: String
  ) {
    sendBusinessEmail(
      subject: $subject
      name: $name
      email: $email
      firm: $firm
      connection: $connection
      type: $type
    ) {
      name
    }
  }
`;

import {
  guessAlphabet,
  autoResizeTextarea,
  removeSpecialChars,
  removeSpecialChars2,
} from "../../SimulatorDevelopmentFunctions";
import {
  IconBlock,
  Question,
  Answer_text,
  ResultCircle,
  Button1,
  Circle,
  Frame,
} from "../../styles/commonElements/QuestionStyles";

const Options = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  width: 100%;
  margin-bottom: 20px;
`;

const Group = styled.div`
  flex-direction: row;
  justify-content: center;
  width: 100%;
  pointer-events: ${(props) =>
    props.isAnswerBeingChecked === true ? "none" : "auto"};
  display: flex;
  padding: 0.5% 0;
  margin: 10px 0;
`;

const Group2 = styled.div`
  flex-direction: row;
  justify-content: flex-start;
  flex-wrap: wrap;
  width: 90%;
  pointer-events: auto;
  display: flex;
  padding: 0.5% 0;
  margin-bottom: 20px;
`;

const Progress = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  width: 100%;
  margin-bottom: 10px;
`;

const Progress2 = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  width: 100%;
  margin: 10px;
`;

const FullOpenQuestion = (props) => {
  const {
    id,
    lessonId,
    story,
    author,
    me,
    answer,
    question,
    inputColor,
    passAnswer,
    result,
    isAnswerBeingChecked,
    correct,
    goalType,
    correctnessLevel,
    hint,
    hints,
    challenge,
    explanations,
    getHint,
    getExplanation,
    improvements,
    getImprovements,
    previousAnswers,
    serverComment,
    isScoringShown,
    image,
    instructorName,
  } = props;

  const [hidden, setHidden] = useState(true); // is the answer to the question hidden?
  const [recognition, setRecognition] = useState(null); // used for voice recognition
  const [startSpeech, setStartSpeech] = useState(false); // used for voice recognition

  const [generatingHint, setGeneratingHint] = useState(false); // is the AI generating a hint?
  const [generatingExplanation, setGeneratingExplanation] = useState(false); // loading new explanation
  const [generatingImprovement, seGeneratingImprovement] = useState(false); // loading new improvement
  const [isAnswerChallenged, setIsAnswerChallenged] = useState(false); // is the answer challenged?
  const [isChallengeBeingProcessed, setIsChallengeBeingProcessed] =
    useState(false); // is the answer challenged?
  const [challengeResult, setChallengeResult] = useState(null);
  const [newWording, setNewWording] = useState(null);

  const { t } = useTranslation("lesson");

  const [sendBusinessEmail, { data: d1, loading: l1, error: er1 }] =
    useMutation(SEND_MESSAGE_MUTATION);

  // 8. slide to the last comment generated by AI

  const slideTo = (elementId, offset = 200) => {
    const my_element = document.getElementById(elementId);
    if (!my_element) return;

    const elementPosition = my_element.getBoundingClientRect().top;
    const offsetPosition = elementPosition + window.scrollY - offset;
    window.scrollTo({
      top: offsetPosition,
      behavior: "smooth",
    });
  };

  return (
    <Question story={story}>
      {/* 1. Question part */}
      <div className="question_box" id={"question_box_" + id}>
        <div className="question_text">{parse(question)}</div>
        <IconBlockElement
          image={image}
          instructorName={instructorName}
          author={author}
        />
      </div>
      {/* 2 AI hints */}
      {hints.length > 0 &&
        hints.map((hint, index) => {
          return (
            <div className="question_box">
              <div className="question_text">
                <p>{parse(hint)}</p>
              </div>
              <IconBlock>
                {author && author.image != null ? (
                  <img className="icon" src={author.image} />
                ) : (
                  <img className="icon" src="../../static/hipster.svg" />
                )}{" "}
                <div className="name">
                  {author && author.name ? author.name : "BeSavvy"}
                </div>
              </IconBlock>
            </div>
          );
        })}
      {generatingHint && (
        <Progress2>
          <TailSpin width="50" color="#2E80EC" />
        </Progress2>
      )}
      {/* 3. Student answer bubble part */}
      <>
        <div className="answer" id={"answer_form_" + id}>
          <IconBlock>
            <div className="icon2">
              {me && me.image ? (
                <img className="icon" src={me.image} />
              ) : me.surname ? (
                `${me.name[0]}${me.surname[0]}`
              ) : (
                `${me.name[0]}${me.name[1]}`
              )}
            </div>{" "}
            <div className="name">{me.name}</div>
          </IconBlock>{" "}
          <Frame inputColor={inputColor}>
            <Answer_text
              type="text"
              required
              maxLength={500}
              onChange={(e) => {
                if (e.target.value.length <= 500) {
                  passAnswer(e.target.value);
                  autoResizeTextarea(e);
                  setIsAnswerChallenged(false);
                }
              }}
              onInput={(e) => {
                autoResizeTextarea(e);
                if (e.target.value.length >= 500) {
                  e.target.setCustomValidity("Maximum 500 characters allowed");
                  e.target.reportValidity();
                } else {
                  e.target.setCustomValidity("");
                }
              }}
              placeholder="..."
            />
            {result && isScoringShown ? (
              <ResultCircle
                data-tooltip-id="my-tooltip"
                data-tooltip-content={t("answer_above_65")}
                data-tooltip-place="right"
                inputColor={inputColor}
              >
                {parseInt(result)}
              </ResultCircle>
            ) : null}
          </Frame>
        </div>
        {isAnswerBeingChecked && (
          <Progress>
            <InfinitySpin width="200" color="#2E80EC" />
          </Progress>
        )}

        <Group progress={isAnswerBeingChecked}>
          <Button1
            inputColor={inputColor}
            onClick={async (e) => {
              e.preventDefault();
              props.onAnswer();
            }}
            correct={correct}
          >
            {t("check")}
          </Button1>
          {goalType !== "ASSESS" && (
            <Button1
              inputColor={inputColor}
              onClick={async (e) => {
                e.preventDefault();
                setGeneratingHint(true);
                let res = await getHint(e);
                setGeneratingHint(false);
              }}
              correct={correct}
            >
              {hints.length > 0 ? t("i_need_another_hint") : t("i_need_a_hint")}
            </Button1>
          )}
          {/* <Circle onClick={startListening}>
            <BiMicrophone
              className="icon"
              value={{ className: "react-icons" }}
            />
          </Circle>
          <Circle onClick={stopListening} disabled={!recognition}>
            <BiMicrophoneOff
              className="icon"
              value={{ className: "react-icons" }}
            />
          </Circle> */}
        </Group>
      </>
      {/* 4. Reaction to answer immediately after it is checked */}
      {/* 4.1 If true / looks true */}
      {(correctnessLevel === "correct" || correctnessLevel === "looks_true") &&
        goalType !== "ASSESS" && (
          <>
            <div className="question_box">
              <div className="question_text">
                {correctnessLevel == "correct" && "üéâ " + t("correct") + "!"}
                {correctnessLevel == "looks_true" && "‚úèÔ∏è " + t("looks_true")}

                {correctnessLevel === "looks_true" && serverComment && (
                  <p>{t(serverComment)}</p>
                )}
              </div>
              <IconBlock>
                {author && author.image != null ? (
                  <img className="icon" src={author.image} />
                ) : (
                  <img className="icon" src="../../static/hipster.svg" />
                )}{" "}
                <div className="name">
                  {author && author.name ? author.name : "BeSavvy"}
                </div>
              </IconBlock>
            </div>
          </>
        )}
      {/* 4.2 If false / has flaws */}
      {(correctnessLevel === "wrong" ||
        correctnessLevel === "has_flaws" ||
        correctnessLevel === "slightly_wrong" ||
        correctnessLevel === "completely_wrong") && (
        <>
          <div className="question_box">
            <div className="question_text">
              {(correctnessLevel === "wrong" ||
                correctnessLevel === "slightly_wrong" ||
                correctnessLevel === "completely_wrong") &&
                goalType !== "ASSESS" &&
                "üîé  " + t("wrong") + "..."}
              {correctnessLevel === "has_flaws" &&
                goalType !== "ASSESS" &&
                "üîé  " +
                  "You are on the right track but can you be more specific? Have a go at rewriting that answer to see if you can get closer to the correct answer"}

              {serverComment && goalType !== "ASSESS" && (
                <p>{t(serverComment)}</p>
              )}
              {goalType == "ASSESS" && <p>{t("saved_answer")}</p>}
            </div>
            <IconBlock>
              {author && author.image != null ? (
                <img className="icon" src={author.image} />
              ) : (
                <img className="icon" src="../../static/hipster.svg" />
              )}{" "}
              <div className="name">
                {author && author.name ? author.name : "BeSavvy"}
              </div>
            </IconBlock>
          </div>
        </>
      )}
      {/* 5. Show explanation and improvement buttons and the text */}
      {!challenge && goalType !== "ASSESS" && (
        <>
          {previousAnswers.length > 0 && (
            <div className="answer">
              <IconBlock>
                <div className="icon2">
                  {me && me.image ? (
                    <img className="icon" src={me.image} />
                  ) : me.surname ? (
                    `${me.name[0]}${me.surname[0]}`
                  ) : (
                    `${me.name[0]}${me.name[1]}`
                  )}
                </div>{" "}
                <div className="name">{me.name}</div>
              </IconBlock>{" "}
              <Options>
                <Group2 progress={isAnswerBeingChecked}>
                  {(correctnessLevel === "wrong" ||
                    correctnessLevel === "slightly_wrong" ||
                    correctnessLevel === "completely_wrong") && (
                    <Button1
                      onClick={async (e) => {
                        e.preventDefault();
                        setGeneratingExplanation(true);
                        slideTo(`last_explanation_${id}`);
                        const res = await getExplanation(e);
                        setGeneratingExplanation(false);
                      }}
                    >
                      {explanations.length == 0
                        ? t("explain_what_is_wrong_with_my_answer")
                        : t("more_explanations")}
                    </Button1>
                  )}

                  {(correctnessLevel === "looks_true" ||
                    correctnessLevel === "has_flaws") && (
                    <Button1
                      onClick={async (e) => {
                        e.preventDefault();
                        seGeneratingImprovement(true);
                        slideTo(`last_improvement_${id}`);
                        const res = await getImprovements(e);
                        seGeneratingImprovement(false);
                      }}
                    >
                      {improvements.length == 0
                        ? t("what_can_i_improve")
                        : t("more_improvements")}
                    </Button1>
                  )}
                  {true && (
                    <Button1
                      onClick={async (e) => {
                        e.preventDefault();
                        setHidden(false);
                        slideTo(`ideal_answer_${id}`);
                        props.revealCorrectAnswer();
                      }}
                    >
                      {t("show_an_ideal_answer")}
                    </Button1>
                  )}
                  {(correctnessLevel === "slightly_wrong" ||
                    ((correctnessLevel === "wrong" ||
                      correctnessLevel === "completely_wrong") &&
                      props.answer?.length / props.sampleAnswer?.length >=
                        0.2)) && (
                    <Button1
                      onClick={async (e) => {
                        e.preventDefault();
                        setIsChallengeBeingProcessed(true);
                        setIsAnswerChallenged(true);
                        setChallengeResult(null);
                        const newChallengeResult =
                          await props.challengeAnswer();
                        setChallengeResult(newChallengeResult.result);
                        setNewWording(newChallengeResult.new_wording);
                        slideTo(`answer_challenge_${id}`);
                        setIsChallengeBeingProcessed(false);
                      }}
                    >
                      {t("i_believe_my_answer_is_correct")}
                    </Button1>
                  )}
                </Group2>
              </Options>
            </div>
          )}
          {explanations.length > 0 &&
            explanations.map((explanation, index) => {
              return (
                <>
                  <div className="question_box">
                    <div className="question_text">
                      {parse(removeSpecialChars2(explanation))}
                    </div>
                    <IconBlock>
                      {author && author.image != null ? (
                        <img className="icon" src={author.image} />
                      ) : (
                        <img className="icon" src="../../static/hipster.svg" />
                      )}{" "}
                      <div className="name">
                        {author && author.name ? author.name : "BeSavvy"}
                      </div>
                    </IconBlock>
                  </div>
                  {explanations.length - 1 == index ? (
                    <div className="answer">
                      <IconBlock>
                        <div className="icon2">
                          {me && me.image ? (
                            <img className="icon" src={me.image} />
                          ) : me.surname ? (
                            `${me.name[0]}${me.surname[0]}`
                          ) : (
                            `${me.name[0]}${me.name[1]}`
                          )}
                        </div>{" "}
                        <div className="name">{me.name}</div>
                      </IconBlock>{" "}
                      <Options>
                        <Button1
                          onClick={async (e) => {
                            e.preventDefault();
                            slideTo(`answer_form_${id}`);
                          }}
                        >
                          {t("go_to_answer_form")}
                        </Button1>
                      </Options>
                    </div>
                  ) : null}
                </>
              );
            })}
          <div id={`last_explanation_${id}`}></div>
          {generatingExplanation && (
            <Progress2>
              <TailSpin width="50" color="#2E80EC" />
            </Progress2>
          )}
          {improvements.length > 0 &&
            improvements.map((improvement, index) => {
              return (
                <div className="question_box">
                  <div className="question_text">{parse(improvement)}</div>
                  <IconBlock>
                    {author && author.image != null ? (
                      <img className="icon" src={author.image} />
                    ) : (
                      <img className="icon" src="../../static/hipster.svg" />
                    )}{" "}
                    <div className="name">
                      {author && author.name ? author.name : "BeSavvy"}
                    </div>
                  </IconBlock>
                </div>
              );
            })}
          <div id={`answer_challenge_${id}`}>
            {isAnswerChallenged && (
              <>
                {!challengeResult ? (
                  <div id={`answer_challenge_${id}`} className="question_box">
                    <div className="question_text">
                      {/* <p>{t("i_will_review_your_asnwer")}</p> */}
                      <p>Hm .. Let me think about your answer ..</p>
                    </div>
                    <IconBlock>
                      {author && author.image != null ? (
                        <img className="icon" src={author.image} />
                      ) : (
                        <img className="icon" src="../../static/hipster.svg" />
                      )}{" "}
                      <div className="name">
                        {author && author.name ? author.name : "BeSavvy"}
                      </div>
                    </IconBlock>
                  </div>
                ) : null}
                {challengeResult ? (
                  <div className="question_box">
                    <div className="question_text">
                      {/* <p>{t("i_will_review_your_asnwer")}</p> */}
                      {challengeResult < 58 ? (
                        <>
                          <p>{t("still_not_expected_answer")}</p>
                          <p>{t("try_challenging_again")}</p>
                        </>
                      ) : null}
                      {challengeResult >= 58 && challengeResult < 65 ? (
                        <>
                          <p>{t("rephrased_answer")}</p>
                          <p>
                            <i>{newWording}</i>
                          </p>
                          <p>{t("going_in_right_direction")}</p>
                        </>
                      ) : null}
                      {challengeResult > 65 ? (
                        <>
                          <p>{t("rephrased_answer")}</p>
                          <p>
                            <i>{newWording}</i>
                          </p>
                          <p>{t("answer_is_correct")}</p>
                        </>
                      ) : null}
                    </div>
                    <IconBlock>
                      {author && author.image != null ? (
                        <img className="icon" src={author.image} />
                      ) : (
                        <img className="icon" src="../../static/hipster.svg" />
                      )}{" "}
                      <div className="name">
                        {author && author.name ? author.name : "BeSavvy"}
                      </div>
                    </IconBlock>
                  </div>
                ) : null}
              </>
            )}
            {isChallengeBeingProcessed && (
              <Progress2>
                <TailSpin width="50" color="#2E80EC" />
              </Progress2>
            )}
          </div>
          <div id={`last_improvement_${id}`}></div>
          {generatingImprovement && (
            <Progress2>
              <TailSpin width="50" color="#2E80EC" />
            </Progress2>
          )}
        </>
      )}
      {/* 6. Show correct answer bubble */}
      <div id={`ideal_answer_${id}`}></div>
      {!hidden && (
        <div className="question_box">
          <div className="question_text">
            <b>{t("correct_answer")}:</b>{" "}
            {parse(removeSpecialChars(props.correctAnswer))}
          </div>
          <IconBlock>
            {author && author.image != null ? (
              <img className="icon" src={author.image} />
            ) : (
              <img className="icon" src="../../static/hipster.svg" />
            )}{" "}
            <div className="name">
              {author && author.name ? author.name : "BeSavvy"}
            </div>
          </IconBlock>{" "}
        </div>
      )}
    </Question>
  );
};

export default FullOpenQuestion;
