import { useState } from "react";
import styled from "styled-components";
import { BiMicrophone, BiMicrophoneOff } from "react-icons/bi";
import parse from "html-react-parser";
import { InfinitySpin, TailSpin } from "react-loader-spinner";
import { useTranslation } from "next-i18next";

import {
  guessAlphabet,
  autoResizeTextarea,
  removeSpecialChars,
} from "../SimulatorDevelopmentFunctions";
import {
  IconBlock,
  Question,
  Answer_text,
  ResultCircle,
  Button1,
  Circle,
  Frame,
} from "./QuestionStyles";

const Options = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  width: 100%;
  margin-bottom: 20px;
`;

const Group = styled.div`
  flex-direction: row;
  justify-content: center;
  background: ${(props) => props.inputColor};
  width: 100%;
  pointer-events: ${(props) => (props.progress === "true" ? "none" : "auto")};
  display: ${(props) => (props.correct === "true" ? "none" : "flex")};
  padding: 0.5% 0;
  margin: 10px 0;
`;

const Group2 = styled.div`
  flex-direction: row;
  justify-content: flex-start;
  flex-wrap: wrap;
  background: ${(props) => props.inputColor};
  width: 90%;
  pointer-events: auto;
  display: flex;
  padding: 0.5% 0;
  margin-bottom: 20px;
`;

const Progress = styled.div`
  display: ${(props) => (props.display === "true" ? "flex" : "none")};
  flex-direction: row;
  justify-content: center;
  width: 100%;
  margin-bottom: 10px;
`;

const Progress2 = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  width: 100%;
  margin: 10px;
`;

const FullOpenQuestion = (props) => {
  const {
    id,
    story,
    author,
    me,
    answer,
    question,
    generating,
    inputColor,
    passAnswer,
    result,
    progress,
    correct,
    AIhint,
    goalType,
    hint,
    hints,
    challenge,
    explanations,
    getExplanation,
    improvements,
    getImprovements,
    generatingExplanation,
    generatingImprovement,
  } = props;

  const [hidden, setHidden] = useState(true); // is the answer to the question hidden?
  const [recognition, setRecognition] = useState(null); // used for voice recognition
  const [startSpeech, setStartSpeech] = useState(false); // used for voice recognition

  const { t } = useTranslation("lesson");

  // 7. Listening functionaluty

  const startListening = () => {
    const newRecognition = new (window.SpeechRecognition ||
      window.webkitSpeechRecognition ||
      window.mozSpeechRecognition ||
      window.msSpeechRecognition)();
    newRecognition.lang =
      guessAlphabet(question) == "Cyrillic" ? "ru-RU" : "en-US";
    newRecognition.interimResults = false;
    newRecognition.maxAlternatives = 1;

    newRecognition.start();
    setStartSpeech(true);

    newRecognition.onresult = function (event) {
      setAnswer(answer + " " + event.results[0][0].transcript);
    };

    newRecognition.onspeechend = function () {
      newRecognition.stop();
    };

    newRecognition.onerror = function (event) {
      console.error("Error occurred in recognition: " + event.error);
    };

    setRecognition(newRecognition);
  };

  const stopListening = () => {
    setStartSpeech(false);

    if (recognition) {
      recognition.stop();
    }
  };

  // 8. slide to the last comment generated by AI

  const slideToIdealAnswer = () => {
    var my_element = document.getElementById(`ideal_answer_${id}`);
    my_element.scrollIntoView({
      behavior: "smooth",
      block: "start",
      inline: "nearest",
    });
  };

  const slideToExplanations = () => {
    var my_element = document.getElementById(`last_explanation_${id}`);
    my_element.scrollIntoView({
      behavior: "smooth",
      block: "start",
      inline: "nearest",
    });
  };

  const slideToImprovements = () => {
    var my_element = document.getElementById(`last_improvement_${id}`);
    my_element.scrollIntoView({
      behavior: "smooth",
      block: "start",
      inline: "nearest",
    });
  };
  return (
    <Question story={story}>
      {/* 1. Question part */}
      <div className="question_box">
        <div className="question_text">{parse(question)}</div>
        <IconBlock>
          {author && author.image != null ? (
            <img className="icon" src={author.image} />
          ) : (
            <img className="icon" src="../../static/hipster.svg" />
          )}{" "}
          <div className="name">
            {author && author.name ? author.name : "BeSavvy"}
          </div>
        </IconBlock>{" "}
      </div>
      {/* 2 AI hints */}
      {hints.length > 0 &&
        hints.map((hint, index) => {
          return (
            <div className="question_box">
              <div className="question_text">
                <p>{hint}</p>
              </div>
              <IconBlock>
                {author && author.image != null ? (
                  <img className="icon" src={author.image} />
                ) : (
                  <img className="icon" src="../../static/hipster.svg" />
                )}{" "}
                <div className="name">
                  {author && author.name ? author.name : "BeSavvy"}
                </div>
              </IconBlock>
            </div>
          );
        })}
      {generating && (
        <Progress2>
          <TailSpin width="50" color="#2E80EC" />
        </Progress2>
      )}
      {/* 3. Student answer bubble part */}
      <>
        <div className="answer">
          <IconBlock>
            <div className="icon2">
              {me && me.image ? (
                <img className="icon" src={me.image} />
              ) : me.surname ? (
                `${me.name[0]}${me.surname[0]}`
              ) : (
                `${me.name[0]}${me.name[1]}`
              )}
            </div>{" "}
            <div className="name">{me.name}</div>
          </IconBlock>{" "}
          <Frame inputColor={inputColor}>
            <Answer_text
              type="text"
              required
              //   value={answer}
              onChange={(e) => {
                passAnswer(e.target.value);
                autoResizeTextarea(e);
              }}
              onInput={autoResizeTextarea}
              placeholder="..."
            />
            {result ? (
              <ResultCircle
                data-tooltip-id="my-tooltip"
                data-tooltip-content={t("answer_above_65")}
                data-tooltip-place="right"
                inputColor={inputColor}
              >
                {parseInt(result)}
              </ResultCircle>
            ) : null}
          </Frame>
        </div>
        {/* {startSpeech && <Group>{<p>ðŸ“£ {t("start_speaking")}..</p>}</Group>} */}
        <Progress display={progress}>
          <InfinitySpin width="200" color="#2E80EC" />
        </Progress>
        <Group progress={progress} correct={correct}>
          <Button1
            inputColor={inputColor}
            onClick={async (e) => {
              e.preventDefault();
              props.onAnswer();
            }}
            correct={correct}
          >
            {t("check")}
          </Button1>
          {goalType !== "ASSESS" && (
            <Button1
              inputColor={inputColor}
              onClick={async (e) => {
                e.preventDefault();
                props.getHint(e);
              }}
              correct={correct}
            >
              {AIhint && hints.length > 0
                ? t("i_need_another_hint")
                : t("i_need_a_hint")}
            </Button1>
          )}
          {/* <Circle onClick={startListening}>
            <BiMicrophone
              className="icon"
              value={{ className: "react-icons" }}
            />
          </Circle>
          <Circle onClick={stopListening} disabled={!recognition}>
            <BiMicrophoneOff
              className="icon"
              value={{ className: "react-icons" }}
            />
          </Circle> */}
        </Group>
      </>
      {/* 4. Reaction to answer immediately after it is checked */}
      {/* 4.1 If true / looks true */}
      {(correct === "true" || correct === "looks_true") &&
        goalType !== "ASSESS" && (
          <>
            <div className="question_box">
              <div className="question_text">
                {correct === "true" && "ðŸŽ‰ " + t("correct") + "!"}
                {correct === "looks_true" && hint !== null && hint !== 0 && (
                  <p>{hint}</p>
                )}
                {correct === "looks_true" && "ðŸ‘‹ " + t("looks_true")}
              </div>
              <IconBlock>
                {author && author.image != null ? (
                  <img className="icon" src={author.image} />
                ) : (
                  <img className="icon" src="../../static/hipster.svg" />
                )}{" "}
                <div className="name">
                  {author && author.name ? author.name : "BeSavvy"}
                </div>
              </IconBlock>
            </div>
          </>
        )}
      {/* 4.2 If false / has flaws */}
      {(correct === "false" || correct === "has_flaws") && (
        <>
          <div className="question_box">
            <div className="question_text">
              {correct === "false" &&
                goalType !== "ASSESS" &&
                "ðŸ”Ž  " + t("wrong") + "..."}
              {correct === "has_flaws" &&
                goalType !== "ASSESS" &&
                "ðŸ”Ž  " +
                  "You may be on right track but your answer has some flaws. Remove these flaws to find the correct answer."}

              {hint !== null && hint !== 0 && goalType !== "ASSESS" && (
                <p>{hint}</p>
              )}
              {goalType == "ASSESS" && <p>{t("saved_answer")}</p>}
            </div>
            <IconBlock>
              {author && author.image != null ? (
                <img className="icon" src={author.image} />
              ) : (
                <img className="icon" src="../../static/hipster.svg" />
              )}{" "}
              <div className="name">
                {author && author.name ? author.name : "BeSavvy"}
              </div>
            </IconBlock>
          </div>
        </>
      )}

      {/* 5. Show explanation and improvement buttons and the text */}

      {!challenge && correct !== "" && goalType !== "ASSESS" && (
        <>
          <div className="answer">
            <IconBlock>
              <div className="icon2">
                {me && me.image ? (
                  <img className="icon" src={me.image} />
                ) : me.surname ? (
                  `${me.name[0]}${me.surname[0]}`
                ) : (
                  `${me.name[0]}${me.name[1]}`
                )}
              </div>{" "}
              <div className="name">{me.name}</div>
            </IconBlock>{" "}
            <Options>
              <Group2 progress={progress} correct={correct}>
                {(correct == "false" || correct == "has_flaws") && (
                  <Button1
                    onClick={async (e) => {
                      e.preventDefault();
                      slideToExplanations();
                      getExplanation(e);
                    }}
                  >
                    {explanations.length == 0
                      ? t("explain_what_is_wrong_with_my_answer")
                      : t("more_explanations")}
                  </Button1>
                )}
                {correct == "looks_true" && (
                  <Button1
                    onClick={async (e) => {
                      e.preventDefault();
                      slideToImprovements();
                      getImprovements(e);
                    }}
                  >
                    {improvements.length == 0
                      ? t("what_can_i_improve")
                      : t("more_improvements")}
                  </Button1>
                )}
                <Button1
                  onClick={async (e) => {
                    e.preventDefault();
                    setHidden(false);
                    slideToIdealAnswer();
                    props.revealCorrectAnswer();
                  }}
                >
                  {t("show_an_ideal_answer")}
                </Button1>
              </Group2>
            </Options>
          </div>
          {explanations.length > 0 &&
            // correct !== "true" &&
            explanations.map((explanation, index) => {
              return (
                <div className="question_box">
                  <div className="question_text">{parse(explanation)}</div>
                  <IconBlock>
                    {author && author.image != null ? (
                      <img className="icon" src={author.image} />
                    ) : (
                      <img className="icon" src="../../static/hipster.svg" />
                    )}{" "}
                    <div className="name">
                      {author && author.name ? author.name : "BeSavvy"}
                    </div>
                  </IconBlock>
                </div>
              );
            })}
          <div id={`last_explanation_${id}`}></div>
          {generatingExplanation && (
            <Progress2>
              <TailSpin width="50" color="#2E80EC" />
            </Progress2>
          )}
          {improvements.length > 0 &&
            // (correct == "true" || correct == "looks_true") &&
            improvements.map((improvement, index) => {
              return (
                <div className="question_box">
                  <div className="question_text">{parse(improvement)}</div>
                  <IconBlock>
                    {author && author.image != null ? (
                      <img className="icon" src={author.image} />
                    ) : (
                      <img className="icon" src="../../static/hipster.svg" />
                    )}{" "}
                    <div className="name">
                      {author && author.name ? author.name : "BeSavvy"}
                    </div>
                  </IconBlock>
                </div>
              );
            })}
          <div id={`last_improvement_${id}`}></div>

          {generatingImprovement && (
            <Progress2>
              <TailSpin width="50" color="#2E80EC" />
            </Progress2>
          )}
        </>
      )}

      {/* 6. Show correct answer bubble */}
      <div id={`ideal_answer_${id}`}></div>
      {!hidden && (
        <div className="question_box">
          <div className="question_text">
            <b>{t("correct_answer")}:</b>{" "}
            {parse(removeSpecialChars(props.correctAnswer))}
          </div>
          <IconBlock>
            {author && author.image != null ? (
              <img className="icon" src={author.image} />
            ) : (
              <img className="icon" src="../../static/hipster.svg" />
            )}{" "}
            <div className="name">
              {author && author.name ? author.name : "BeSavvy"}
            </div>
          </IconBlock>{" "}
        </div>
      )}
    </Question>
  );
};

export default FullOpenQuestion;
