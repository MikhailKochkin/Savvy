"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./utils"));
var path_1 = require("path");
var fs_1 = require("fs");
var _ = require("lodash");
var ora = require("ora");
var inquirer = require("inquirer");
var npmPaths = require("npm-paths");
var chalk_1 = require("chalk");
var graphql_config_1 = require("graphql-config");
var dotenv = require("dotenv");
function listPluggings(dir) {
    return fs_1.readdirSync(dir)
        .filter(function (moduleName) { return moduleName.startsWith('graphql-cli-'); })
        .map(function (moduleName) { return path_1.join(dir, moduleName); });
}
function installCommands() {
    var plugins = _(npmPaths())
        .filter(fs_1.existsSync)
        .map(listPluggings)
        .flatten()
        .uniq()
        .value();
    var yargs = require('yargs');
    for (var _i = 0, _a = ['./cmds'].concat(plugins); _i < _a.length; _i++) {
        var moduleName = _a[_i];
        try {
            var cmdModule = require(moduleName);
            var cmdModules = Array.isArray(cmdModule) ? cmdModule : [cmdModule];
            for (var _b = 0, cmdModules_1 = cmdModules; _b < cmdModules_1.length; _b++) {
                var cmd = cmdModules_1[_b];
                yargs = yargs.command(wrapCommand(cmd));
            }
        }
        catch (e) {
            console.log("Can't load " + moduleName + " plugin:" + e.stack);
        }
    }
    return yargs;
}
exports.installCommands = installCommands;
function wrapCommand(commandObject) {
    var originalHandler = commandObject.handler;
    commandObject.handler = function (argv) {
        var envPath = argv['dotenv'] || '.env';
        dotenv.config({ path: envPath });
        var context = {
            prompt: inquirer.createPromptModule(),
            spinner: ora(),
            getProjectConfig: function () {
                if (argv['project']) {
                    return graphql_config_1.getGraphQLProjectConfig(process.cwd(), argv['project']);
                }
                else {
                    return graphql_config_1.getGraphQLProjectConfig();
                }
            },
            getConfig: function () {
                return graphql_config_1.getGraphQLConfig();
            },
        };
        var result = new Promise(function (resolve, reject) {
            try {
                resolve(originalHandler(context, argv));
            }
            catch (e) {
                reject(e);
            }
        });
        result.catch(function (e) {
            if (context.spinner['enabled']) {
                context.spinner.stopAndPersist();
            }
            // TODO: add debug flag for calltrace
            console.log(chalk_1.default.red(e.message));
            if (e instanceof graphql_config_1.ConfigNotFoundError) {
                console.log(chalk_1.default.yellow("\nRun " + chalk_1.default.green('graphql init') + " to create new .graphqlconfig"));
            }
            // FIXME: set non-zero exit code
        });
    };
    return commandObject;
}
// Mutation calls "graphql mutation addUser --id 1 --name Test"
// Execute static .graphql files
//# sourceMappingURL=index.js.map