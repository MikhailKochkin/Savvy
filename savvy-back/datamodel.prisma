enum Permission {
  ADMIN
  USER
}

enum CourseType {
  PUBLIC
  PRIVATE
  FORMONEY
  UNI
  CHALLENGE
}

enum Status {
  STUDENT
  LAWYER
  AUTHOR
  SAVVY_AUTHOR
  HR
}

enum Type {
  STORY
  REGULAR
}

enum TaskType {
  TEST
  FORM
}

type User {
  id: ID! @id
  name: String!
  surname: String
  email: String! @unique
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status @default(value: STUDENT)
  legalPortfolio: LegalPortfolio @relation(link: TABLE, name: "UserPortfolio", onDelete: CASCADE)
  uni: Uni @relation(link: TABLE, name: "UniToUser")
  company: Company @relation(link: TABLE, name: "CompanyToUser")
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrack @relation(link: TABLE, name: "CareerForUser")
  careerTrackID: ID
  sandboxes: [ID] @scalarList(strategy: RELATION)
  new_sandboxes: [Sandbox] @relation(link: TABLE, name: "SandboxToUser", onDelete: CASCADE)
  favourites: [ID] @scalarList(strategy: RELATION)
  subjects: [ID] @scalarList(strategy: RELATION)
  new_subjects: [CoursePage] @relation(link: TABLE, name: "UserSubjects")
  permissions: [Permission] @scalarList(strategy: RELATION)
  coursePages: [CoursePage] @relation(link: TABLE, name: "UserCoursePage")
  sandboxPages: [SandboxPage] @relation(link: TABLE, name: "UserSandboxPage", onDelete: CASCADE)
  sandboxPageGoals: [SandboxPageGoal] @relation(link: TABLE, name: "UserSandboxPageGoals")
  lessons: [Lesson]! @relation(link: TABLE, name: "LessonToUser")
  tests: [Test]! @relation(link: TABLE, name: "TestToUser")
  newTests: [NewTest]! @relation(link: TABLE, name: "NewTestToUser")
  quizes: [Quiz]! @relation(link: TABLE, name: "QuizToUser")
  lessonResults: [LessonResult] @relation(link: TABLE, name: "UserLessonResults")
  testResults: [TestResult] @relation(link: TABLE, name: "UserTestResults" onDelete: CASCADE)
  quizResults: [QuizResult] @relation(link: TABLE, name: "UserQuizResults" onDelete: CASCADE)
  problemResults: [ProblemResult] @relation(link: TABLE, name: "UserProblemResults" onDelete: CASCADE)
  textEditorResults: [TextEditorResult] @relation(link: TABLE, name: "UserTextEditorResults" onDelete: CASCADE)
  constructionResults: [ConstructionResult] @relation(link: TABLE, name: "UserConstructionResults", onDelete: CASCADE)
  pointsA: [PointA]! @relation(link: TABLE, name: "PointAToUser", onDelete: CASCADE)
  pointATests: [PointATest] @relation(link: TABLE, name: "PointATestToUser" onDelete: CASCADE)
  problems: [Problem]! @relation(link: TABLE, name: "ProblemToUser")
  construction: [Construction]!@relation(link: TABLE, name: "ConstructionToUser")
  orders: [Order]! @relation(link: TABLE, name: "OrderToUser")
  textEditor: [TextEditor]! @relation(link: TABLE, name: "TextEditorToUser")
  isFamiliar: Boolean! @default(value: false)
  articles: [Article] @relation(link: TABLE, name: "UserArticles")
  examAnswers: [ExamAnswer] @relation(link: TABLE, name: "UserExamAnswer")
  shots: [Shot] @relation(link: TABLE, name: "ShotToUser")
  shotResults: [ShotResult] @relation(link: TABLE, name: "ShotResultToUser", onDelete: CASCADE)
  notes: [Note] @relation(link: TABLE, name: "NoteToUser", onDelete: CASCADE)
  teacherFeedback: [Feedback] @relation(link: TABLE, name: "TeacherFeedback")
  studentFeedback: [Feedback] @relation(link: TABLE, name: "StudentFeedback")
  topics: [Topic] @relation(link: TABLE, name: "UserTopics", onDelete: CASCADE)
  statements: [Statement] @relation(link: TABLE, name: "UserStatements", onDelete: CASCADE)
  courseVisits: [CourseVisit] @relation(link: TABLE, name: "UserCourseVisits")
  examResults: [ExamResult] @relation(link: TABLE, name: "ExamResultToUser")
  exams: [Exam] @relation(link: TABLE, name: "ExamToUser")
  documents: [Document] @relation(link: TABLE, name: "DocumentToUser")
  documentResults: [DocumentResult] @relation(link: TABLE, name: "DocumentResultToUser", onDelete: CASCADE)
  clauses: [Clause] @relation(link: TABLE, name: "ClauseToUser")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Uni {
  id: ID! @id
  title: String!
  teachers: [User!] @relation(name: "UniToUser")
  capacity: Int @default(value: 2)
  paidMonths: Int @default(value: 0)
  uniCoursePages: [CoursePage] @relation(name: "UniCoursePage")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CoursePage {
  id: ID! @id
  title: String!
  description: String!
  image: String!
  banner: String
  news: String @default(value: "Добро пожаловать на курс! Проходите уроки, выполняйте задания и выполняйте финальное задание!")
  user: User! @relation(name: "UserCoursePage")
  lessons: [Lesson]! @relation(name: "LessonsOnCoursePage" onDelete: CASCADE)
  pointsA: [PointA]! @relation(link: TABLE, name: "CoursePagePointA" onDelete: CASCADE)
  applications: [Application]! @relation(link: TABLE, name: "ApplicationOnCoursePage" onDelete: CASCADE)
  pointATests: [PointATest] @relation(link: TABLE, name: "CoursePageTests" onDelete: CASCADE)
  careerTrack: [ CareerTrack ] @relation(name: "CoursePageForCareer")
  numInCareerTrack: Int
  examQuestion: ExamQuestion @relation(link: TABLE, name: "CoursePageExamQuestion", onDelete: CASCADE)
  published: Boolean @default(value: false)
  uni: Uni @relation(link: TABLE, name: "UniCoursePage")
  uniID: ID
  articles: [Article] @relation(link: TABLE, name: "ArticleCoursePages")
  tags: [String] @scalarList(strategy: RELATION)
  courseType: CourseType
  students: [ID] @scalarList(strategy: RELATION)
  new_students: [ User ] @relation(name: "UserSubjects")
  price: Int
  discountPrice: Int
  orders: [Order] @relation(link: TABLE, name: "CoursePageOrders" onDelete: CASCADE)
  company: Company @relation(name: "CompanyCoursePage")
  promocode: [Json] @scalarList(strategy: RELATION)
  visits: [CourseVisit] @relation(link: TABLE, name: "CourseVisits" onDelete: CASCADE)
  topics: [Topic] @relation(link: TABLE, name: "CoursePageTopics")
  audience: String
  result: String
  tariffs: String
  methods: String
  reviews: [String] @scalarList(strategy: RELATION)
  openLesson: ID
  video: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type SandboxPage {
  id: ID! @id
  title: String!
  description: String!
  image: String!
  user: User! @relation(name: "UserSandboxPage")
  sandboxes: [Sandbox]! @relation(link: TABLE, name: "SandboxesOnSandboxPage" onDelete: CASCADE)
  sandboxPageGoals: [SandboxPageGoal] @relation(link: TABLE, name: "GoalsOnSandboxPage" onDelete: CASCADE)
  students: [ID] @scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type SandboxPageGoal {
  id: ID! @id
  goal: String!
  user: User! @relation(name: "UserSandboxPageGoals")
  completed: Boolean! @default(value: false)
  sandboxPage: SandboxPage @relation(name: "GoalsOnSandboxPage")
  sandboxPageID: ID!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Lesson {
  id: ID! @id
  name: String!
  number: Int
  text: String!
  user: User! @relation(name: "LessonToUser")
  type: Type @default(value: REGULAR)
  map: [Json] @scalarList(strategy: RELATION)
  notes: [Note] @relation(link: TABLE, name: "LessonNotes", onDelete: CASCADE)
  shots: [Shot] @relation(link: TABLE, name: "LessonShots", onDelete: CASCADE)
  shotResults: [ShotResult] @relation(link: TABLE, name: "ShotLessonResults" onDelete: CASCADE)
  coursePage: CoursePage! @relation(link: TABLE, name: "LessonsOnCoursePage")
  tests: [Test] @relation(link: TABLE, name: "LessonTests" onDelete: CASCADE)
  newTests: [NewTest] @relation(link: TABLE, name: "LessonNewTests" onDelete: CASCADE)
  quizes: [Quiz] @relation(link: TABLE, name: "LessonQuizes" onDelete: CASCADE)
  problems: [Problem] @relation(link: TABLE, name: "LessonProblems" onDelete: CASCADE)
  constructions: [Construction] @relation(link: TABLE, name: "LessonConstructions" onDelete: CASCADE)
  texteditors: [TextEditor] @relation(link: TABLE, name: "LessonTextEditors" onDelete: CASCADE)
  lessonResults: [LessonResult] @relation(link: TABLE, name: "LessonResults" onDelete: CASCADE)
  testResults: [TestResult] @relation(link: TABLE, name: "TestResults" onDelete: CASCADE)
  quizResults: [QuizResult] @relation(link: TABLE, name: "QuizResults" onDelete: CASCADE)
  textEditorResults: [TextEditorResult] @relation(link: TABLE, name: "TextEditorResults" onDelete: CASCADE)
  problemResults: [ProblemResult] @relation(link: TABLE, name: "ProblemResults" onDelete: CASCADE)
  constructionResults: [ConstructionResult] @relation(link: TABLE, name: "ConstructionResults" onDelete: CASCADE)
  lessonFeedback: [Feedback] @relation(link: TABLE, name: "LessonFeedback" onDelete: CASCADE)
  open: Boolean @default(value: false)
  coursePageID: ID!
  published: Boolean @default(value: false)
  description: String
  exams: [Exam] @relation(link: TABLE, name: "LessonExams" onDelete: CASCADE)
  examResults: [ExamResult] @relation(link: TABLE, name: "LessonExamResults" onDelete: CASCADE)
  documents: [Document] @relation(link: TABLE, name: "LessonDocuments" onDelete: CASCADE)
  documentResults: [DocumentResult] @relation(link: TABLE, name: "LessonDocumentResults" onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

 type Construction {
  id: ID! @id
  name: String!
  variants: [String!] @scalarList(strategy: RELATION)
  answer: [String!] @scalarList(strategy: RELATION)
  hint: String
  type: String!
  constructionResults: [ConstructionResult] @relation(link: TABLE, name: "SingleConstructionResults" onDelete: CASCADE)
  user: User! @relation(name: "ConstructionToUser")
  lesson: Lesson! @relation(name: "LessonConstructions")
  lessonID: ID!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
 }

type Sandbox {
  id: ID! @id
  text: String!
  video: String
  sandboxPage: SandboxPage! @relation(name: "SandboxesOnSandboxPage")
  sandboxPageID: ID!
  link: String
  likes: Int @default(value: 0)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Test {
  id: ID! @id
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String 
  answer4: String
  answer4Correct: String
  user: User! @relation(name: "TestToUser")
  lesson: Lesson @relation(name: "LessonTests")
  lessonID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type NewTest {
  id: ID! @id
  question: [String!] @scalarList(strategy: RELATION)
  answers: [String!] @scalarList(strategy: RELATION)
  correct: [Boolean!] @scalarList(strategy: RELATION)
  type: TaskType @default(value: TEST)
  testResults: [TestResult] @relation(link: TABLE, name: "NewTestResults" onDelete: CASCADE)
  user: User! @relation(name: "NewTestToUser")
  lesson: Lesson @relation(name: "LessonNewTests")
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Quiz {
  id: ID! @id
  question: String!
  answer: String!
  user: User! @relation(name: "QuizToUser")
  type: TaskType @default(value: TEST)
  lessonID: ID
  lesson: Lesson @relation(name: "LessonQuizes")
  quizResults: [QuizResult] @relation(link: TABLE, name: "NewQuizResults" onDelete: CASCADE)
  next: Json
  ifRight: String
  ifWrong: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PointATest {
  id: ID! @id
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String 
  answer4: String
  answer4Correct: String
  user: User! @relation(name: "PointATestToUser")
  coursePage: CoursePage @relation(name: "CoursePageTests")
  coursePageID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Problem {
  id: ID! @id
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: [String!] @scalarList(strategy: RELATION)
  solutionList: [String!] @scalarList(strategy: RELATION)
  user: User! @relation(name: "ProblemToUser")
  lesson: Lesson! @relation(name: "LessonProblems")
  problemResults: [ProblemResult] @relation(link: TABLE, name: "SingleProblemResults" onDelete: CASCADE)
  lessonID: ID!
  nodeType: String
  nodeID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type TextEditor {
  id: ID! @id
  name: String!
  text: String!
  totalMistakes: Int
  user: User! @relation(name: "TextEditorToUser")
  lesson: Lesson! @relation(name: "LessonTextEditors")
  lessonID: ID!
  textEditorResults: [TextEditorResult] @relation(link: TABLE, name: "SingleTextEditorResults" onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Application {
  id: ID! @id
  applicantId: ID!
  applicantName: String!
  message: String
  coursePage: CoursePage! @relation(name: "ApplicationOnCoursePage")
  coursePageID: ID!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

  type Order {
    id: ID! @id
    user: User! @relation(name: "OrderToUser")
    paymentID: String
    coursePage: CoursePage! @relation(name: "CoursePageOrders")
    price: Int
    promocode: String
    isPaid: Boolean
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
  }

type PointA {
  id: ID! @id
  description: String
  coursePage: CoursePage! @relation(name: "CoursePagePointA")
  coursePageID: ID
  user: User! @relation(name: "PointAToUser")
  pointATests: [PointATest] @relation(link: TABLE, name: "PointATests" onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CareerTrack {
  id: ID! @id
  name: String!
  img: String
  members: User @relation(name: "CareerForUser")
  coursePages: [CoursePage] @relation(name: "CoursePageForCareer")
  careerTrackUnits: [CareerTrackUnit] @relation(link: TABLE, name: "CareerTrackUnits" onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CareerTrackUnit {
  id: ID! @id
  title: String!
  number: Int
  img: String
  topics: [String!] @scalarList(strategy: RELATION)
  articles: [String!] @scalarList(strategy: RELATION)
  coursePages: [CoursePage]
  careerTrack: CareerTrack! @relation(name: "CareerTrackUnits")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type TestResult {
  id: ID! @id
  student: User! @relation(name: "UserTestResults")
  answer: String
  attempts: Int
  lesson: Lesson @relation( name: "TestResults")
  lessonID: ID
  test: NewTest @relation(name: "NewTestResults")
  testID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type QuizResult {
  id: ID! @id
  student: User! @relation(name: "UserQuizResults")
  answer: String
  attempts: Int
  quiz: Quiz @relation(name: "NewQuizResults")
  lesson: Lesson @relation(name: "QuizResults")
  lessonID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProblemResult {
  id: ID! @id
  student: User! @relation(name: "UserProblemResults")
  answer: String
  revealed: [String!] @scalarList(strategy: RELATION)
  lesson: Lesson @relation(name: "ProblemResults")
  lessonID: ID
  problem: Problem @relation(name: "SingleProblemResults")
  problemID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type TextEditorResult {
  id: ID! @id
  student: User! @relation( name: "UserTextEditorResults")
  attempts: Int
  wrong: String!
  correct: String!
  guess: String!
  lesson: Lesson @relation( name: "TextEditorResults")
  textEditor: TextEditor @relation(name: "SingleTextEditorResults")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type LessonResult {
  id: ID! @id
  student: User! @relation(name: "UserLessonResults")
  visitsNumber: Int @default(value: 0)
  lesson: Lesson! @relation(name: "LessonResults")
  lessonID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ConstructionResult {
  id: ID! @id
  student: User! @relation( name: "UserConstructionResults")
  answer: String
  attempts: Int
  inputs: [String] @scalarList(strategy: RELATION)
  construction: Construction @relation(name: "SingleConstructionResults")
  constructionID: ID
  lesson: Lesson @relation(name: "ConstructionResults")
  lessonID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ExamQuestion {
  id: ID! @id
  coursePage: CoursePage! @relation(name: "CoursePageExamQuestion")
  coursePageID: ID!
  question: String!
  answers: [ExamAnswer!] @relation(link: TABLE, name: "ExamQuestionAnswer")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ExamAnswer {
  id: ID! @id
  student: User! @relation(name: "UserExamAnswer")
  answer: String!
  examQuestion: ExamQuestion! @relation(name: "ExamQuestionAnswer")
  examQuestionID: ID!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type LegalPortfolio {
  id: ID! @id
  user: User!@relation(name: "UserPortfolio")
  cv: String
  portfolio: [ExamAnswer]
  portfolioIDs: [ID] @scalarList(strategy: RELATION)
  resume: String
  open: Boolean! @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Article {
  id: ID! @id
  user: User!@relation(name: "UserArticles")
  tag: String
  img: String
  title: String
  text: String
  coursePages: [CoursePage]@relation(name: "ArticleCoursePages")
  coursePageIDs: [ID]@scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Shot {
  id: ID! @id
  user: User! @relation(name: "ShotToUser")
  title: String!
  parts: [String!] @scalarList(strategy: RELATION)
  comments: [String!] @scalarList(strategy: RELATION)
  shotResults: [ShotResult] @relation(link: TABLE, name: "ShotResults", onDelete: CASCADE)
  lessonID: ID
  lesson: Lesson @relation( name: "LessonShots")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ShotResult {
  id: ID! @id
  student: User! @relation(name: "ShotResultToUser")
  answer: String!
  lessonID: ID
  lesson: Lesson @relation( name: "ShotLessonResults")
  shot: Shot @relation( name: "ShotResults")
  shotID: ID
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Note {
  id: ID! @id
  text: String!
  user: User @relation( name: "NoteToUser")
  next: Json
  lessonID: ID
  lesson: Lesson @relation( name: "LessonNotes")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Company {
  id: ID! @id
  name: String!
  hrs: [User!] @relation( name: "CompanyToUser")
  paidMonths: Int @default(value: 0)
  coursePages: [CoursePage] @relation(name: "CompanyCoursePage")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Feedback {
  id: ID! @id
  text: String!
  lesson: Lesson @relation( name: "LessonFeedback")
  teacher: User! @relation( name: "TeacherFeedback")
  student: User! @relation( name: "StudentFeedback")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CourseVisit {
  id: ID! @id
  student: User! @relation( name: "UserCourseVisits")
  visitsNumber: Int @default(value: 0)
  coursePage: CoursePage! @relation( name: "CourseVisits")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Exam {
  id: ID! @id
  user: User! @relation( name: "ExamToUser")
  name: String
  lesson: Lesson! @relation( name: "LessonExams")
  examResults: [ExamResult] @relation(link: TABLE, name: "ExamResults" onDelete: CASCADE)
  nodeType: String
  nodeID: ID
  question: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ExamResult {
  id: ID! @id
  user: User @relation( name: "ExamResultToUser")
  answers: [String] @scalarList(strategy: RELATION)
  lesson: Lesson @relation( name: "LessonExamResults")
  exam: Exam @relation( name: "ExamResults")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Document  {
  id: ID! @id
  title: String!
  user: User! @relation( name: "DocumentToUser")
  lesson: Lesson! @relation( name: "LessonDocuments")
  documentResults: [DocumentResult] @relation(link: TABLE, name: "DocumentResults" onDelete: CASCADE)
  clauses: [Clause] @relation(link: TABLE, name: "DocumentClauses" onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Clause  {
  id: ID! @id
  user: User! @relation(name: "ClauseToUser")
  number: Int!
  commentary: String!
  keywords: [String] @scalarList(strategy: RELATION)
  sample: String
  document: Document! @relation(name: "DocumentClauses")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type DocumentResult {
  id: ID! @id
  user: User @relation( name: "DocumentResultToUser")
  answers: [String] @scalarList(strategy: RELATION)
  drafts: [String] @scalarList(strategy: RELATION)
  lesson: Lesson @relation( name: "LessonDocumentResults")
  document: Document @relation( name: "DocumentResults")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Topic {
  id: ID! @id
  name: String
  coursePage: CoursePage @relation( name: "CoursePageTopics")
  user: User @relation( name: "UserTopics")
  statements: [Statement] @relation(link: TABLE, name: "TopicStatements" onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Statement {
  id: ID! @id
  text: String
  topic: Topic @relation( name: "TopicStatements")
  user: User @relation( name: "UserStatements")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}