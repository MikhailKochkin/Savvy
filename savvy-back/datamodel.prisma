enum Permission {
  ADMIN
  USER
}

enum CourseType {
  PUBLIC
  PRIVATE
  FORMONEY
}

type User {
  id: ID! @unique
  name: String!
  email: String! @unique
  password: String!
  resetToken: String
  resetTokenExpiry: Float
   careerTrack: CareerTrack @relation(name: "CareerForUser" onDelete: CASCADE)
   careerTrackID: ID
  favourites: [ID]
  subjects: [ID]
  sandboxes: [ID]
  permissions: [Permission]
  coursePages: [CoursePage] @relation(name: "UserCoursePage" onDelete: CASCADE)
  sandboxPages: [SandboxPage] @relation(name: "UserSandboxPage" onDelete: CASCADE)
  sandboxPageGoals: [SandboxPageGoal] @relation(name: "UserSandboxPageGoals")
  lessons: [Lesson]!
  tests: [Test]!
    newTests: [NewTest]!
    quizes: [Quiz]!
  pointsA: [PointA]!
  problems: [Problem]!
  construction: [Construction]!
  orders: [Order]!
  textEditor: [TextEditor]!
  isFamiliar: Boolean! @default(value: "false")
  createdAt: DateTime!
}

type CoursePage {
  id: ID! @unique
  title: String!
  description: String!
  image: String!
  user: User! @relation(name: "UserCoursePage")
  lessons: [Lesson]! @relation(name: "LessonsOnCoursePage" onDelete: CASCADE)
  pointsA: [PointA]! @relation(name: "CoursePagePointA" onDelete: CASCADE)
  applications: [Application]! @relation(name: "ApplicationOnCoursePage" onDelete: CASCADE)
  pointATests: [PointATest] @relation(name: "CoursePageTests" onDelete: CASCADE)
   careerTrack: [ CareerTrack ] @relation(name: "CoursePageForCareer" onDelete: CASCADE)
   numInCareerTrack: Int
  tags: [String]
  courseType: CourseType
  students: [ID]
  price: Int
  discountPrice: Int
  orders: [Order] @relation(name: "CoursePageOrders" onDelete: CASCADE)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SandboxPage {
  id: ID! @unique
  title: String!
  description: String!
  image: String!
  user: User! @relation(name: "UserSandboxPage")
  sandboxes: [Sandbox]! @relation(name: "SandboxesOnSandboxPage" onDelete: CASCADE)
  sandboxPageGoals: [SandboxPageGoal] @relation(name: "GoalsOnSandboxPage" onDelete: CASCADE)
  students: [ID]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SandboxPageGoal {
  id: ID! @unique
  goal: String!
  user: User! @relation(name: "UserSandboxPageGoals")
  completed: Boolean! @default(value: "false")
  sandboxPage: SandboxPage @relation(name: "GoalsOnSandboxPage")
  sandboxPageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Lesson {
  id: ID! @unique
  name: String!
  number: Int
  text: String!
  user: User!
  coursePage: CoursePage! @relation(name: "LessonsOnCoursePage")
  tests: [Test] @relation(name: "LessonTests" onDelete: CASCADE)
  newTests: [NewTest] @relation(name: "LessonNewTests" onDelete: CASCADE)
  quizes: [Quiz] @relation(name: "LessonQuizes" onDelete: CASCADE)
  problems: [Problem] @relation(name: "LessonProblems" onDelete: CASCADE)
  constructions: [Construction] @relation(name: "LessonConstructions" onDelete: CASCADE)
  texteditors: [TextEditor] @relation(name: "LessonTextEditors")
  testResults: [TestResult] @relation(name: "TestResults" onDelete: CASCADE)
  quizResults: [QuizResult] @relation(name: "QuizResults" onDelete: CASCADE)
  problemResults: [ProblemResult] @relation(name: "ProblemResults" onDelete: CASCADE) 
  open: Boolean @default(value: "false")
  coursePageID: ID!
  published: Boolean @default(value: "false")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Construction {
  id: ID! @unique
  name: String!
  dbPart1: Json!
  dbPart2: Json!
  dbPart3: Json!
  dbPart4: Json!
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  user: User!
  lesson: Lesson! @relation(name: "LessonConstructions")
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Sandbox {
  id: ID! @unique
  text: String!
  video: String
  user: User!
  sandboxPage: SandboxPage! @relation(name: "SandboxesOnSandboxPage")
  sandboxPageID: ID!
  link: String
  createdAt: DateTime!
  updatedAt: DateTime!
  likes: Int @default(value: "0")
}

type Test {
  id: ID! @unique
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String 
  answer4: String
  answer4Correct: String
  user: User!
  lesson: Lesson @relation(name: "LessonTests")
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NewTest {
  id: ID! @unique
  question: [String!]
  answers: [String!]
  correct: [Boolean!] 
  user: User!
  lesson: Lesson @relation(name: "LessonNewTests")
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Quiz {
  id: ID! @unique
  question: String!
  answer: String!
  lang: String!
  user: User!
  lessonID: ID
  lesson: Lesson @relation(name: "LessonQuizes")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PointATest {
  id: ID! @unique
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String 
  answer4: String
  answer4Correct: String
  user: User!
  coursePage: CoursePage @relation(name: "CoursePageTests")
  coursePageID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Problem {
  id: ID! @unique
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: [String!]
  solutionList: [String!]
  user: User!
  lesson: Lesson! @relation(name: "LessonProblems")
  problemResults: [ProblemResult] @relation(name: "SingleProblemResults" onDelete: CASCADE)
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextEditor {
  id: ID! @unique
  name: String!
  text: String!
  totalMistakes: Int
  user: User!
  lesson: Lesson! @relation(name: "LessonTextEditors")
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Application {
  id: ID! @unique
  applicantId: ID!
  applicantName: String!
  message: String
  coursePage: CoursePage! @relation(name: "ApplicationOnCoursePage")
  coursePageID: ID!
}

type Order {
  id: ID! @unique
  paymentId: String
  coursePage: CoursePage! @relation(name: "CoursePageOrders")
  coursePageID: ID!
  price: Int!
  paid: Boolean @default(value: "false")
  user: User!
  userID: ID
  clientID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PointA {
  id: ID! @unique
  description: String
  coursePage: CoursePage! @relation(name: "CoursePagePointA")
  coursePageID: ID
  user: User!
  pointATests: [PointATest] @relation(name: "PointATests" onDelete: CASCADE)
}

type CareerTrack {
  id: ID! @unique
  name: String!
  members: User @relation(name: "CareerForUser")
  coursePages: [CoursePage] @relation(name: "CoursePageForCareer")
}

type TestResult {
  id: ID! @unique
  student: User!
  answer: String
  attempts: Int
  lesson: Lesson @relation(name: "TestResults")
  lessonID: ID
}

type QuizResult {
  id: ID! @unique
  student: User!
  answer: String
  attempts: Int
  lesson: Lesson @relation(name: "QuizResults")
  lessonID: ID
}

type ProblemResult {
  id: ID! @unique
  student: User!
  answer: String
  revealed: [String!]
  lesson: Lesson @relation(name: "ProblemResults")
  lessonID: ID
  problem: Problem @relation(name: "SingleProblemResults")
  problemID: ID
}
