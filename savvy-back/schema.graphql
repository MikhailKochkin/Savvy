### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Application {
  applicantId: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input ApplicationListRelationFilter {
  every: ApplicationWhereInput
  none: ApplicationWhereInput
  some: ApplicationWhereInput
}

input ApplicationOrderByRelationAggregateInput {
  _count: SortOrder
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  applicantId: StringFilter
  applicantName: StringFilter
  coursePage: CoursePageWhereInput
  coursePageID: StringFilter
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  message: StringNullableFilter
  promocode: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ApplicationWhereUniqueInput {
  AND: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  applicantId: StringFilter
  applicantName: StringFilter
  coursePage: CoursePageWhereInput
  coursePageID: StringFilter
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  id: String
  message: StringNullableFilter
  promocode: StringNullableFilter
  updatedAt: DateTimeFilter
}

type AuthMessage {
  message: String
}

type AuthPayload {
  token: String
  user: User
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input BoolNullableListFilter {
  equals: [Boolean!]
  has: Boolean
  hasEvery: [Boolean!]
  hasSome: [Boolean!]
  isEmpty: Boolean
}

input Borders {
  bottom: String
  left: String
  right: String
  top: String
}

type BotDialogue {
  createdAt: DateTime!
  id: String!
  journey: [String!]!
  rating: Int
  source: String
  updatedAt: DateTime!
}

input BotDialogueOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  journey: SortOrder
  rating: SortOrderInput
  source: SortOrderInput
  updatedAt: SortOrder
}

input BotDialogueWhereInput {
  AND: [BotDialogueWhereInput!]
  NOT: [BotDialogueWhereInput!]
  OR: [BotDialogueWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  journey: StringNullableListFilter
  rating: IntNullableFilter
  source: StringNullableFilter
  updatedAt: DateTimeFilter
}

input BotDialogueWhereUniqueInput {
  AND: [BotDialogueWhereInput!]
  NOT: [BotDialogueWhereInput!]
  OR: [BotDialogueWhereInput!]
  createdAt: DateTimeFilter
  id: String
  journey: StringNullableListFilter
  rating: IntNullableFilter
  source: StringNullableFilter
  updatedAt: DateTimeFilter
}

type BusinessClient {
  comment: String
  communication_history: Json
  communication_medium: String
  country: String
  coursePage: CoursePage
  coursePageId: String
  createdAt: DateTime!
  email: String!
  id: String!
  name: String
  number: String
  sales_cycle: Json
  source: String
  surname: String
  tags: [String!]!
  type: String
  updatedAt: DateTime!
}

input BusinessClientListRelationFilter {
  every: BusinessClientWhereInput
  none: BusinessClientWhereInput
  some: BusinessClientWhereInput
}

input BusinessClientOrderByRelationAggregateInput {
  _count: SortOrder
}

input BusinessClientOrderByWithRelationInput {
  comment: SortOrderInput
  communication_history: SortOrderInput
  communication_medium: SortOrderInput
  country: SortOrderInput
  coursePage: CoursePageOrderByWithRelationInput
  coursePageId: SortOrderInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrderInput
  number: SortOrderInput
  sales_cycle: SortOrderInput
  source: SortOrderInput
  surname: SortOrderInput
  tags: SortOrder
  type: SortOrderInput
  updatedAt: SortOrder
}

input BusinessClientWhereInput {
  AND: [BusinessClientWhereInput!]
  NOT: [BusinessClientWhereInput!]
  OR: [BusinessClientWhereInput!]
  comment: StringNullableFilter
  communication_history: JsonNullableFilter
  communication_medium: StringNullableFilter
  country: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringNullableFilter
  number: StringNullableFilter
  sales_cycle: JsonNullableFilter
  source: StringNullableFilter
  surname: StringNullableFilter
  tags: StringNullableListFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
}

input BusinessClientWhereUniqueInput {
  AND: [BusinessClientWhereInput!]
  NOT: [BusinessClientWhereInput!]
  OR: [BusinessClientWhereInput!]
  comment: StringNullableFilter
  communication_history: JsonNullableFilter
  communication_medium: StringNullableFilter
  country: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: String
  name: StringNullableFilter
  number: StringNullableFilter
  sales_cycle: JsonNullableFilter
  source: StringNullableFilter
  surname: StringNullableFilter
  tags: StringNullableListFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
}

input CareerTrackListRelationFilter {
  every: CareerTrackWhereInput
  none: CareerTrackWhereInput
  some: CareerTrackWhereInput
}

input CareerTrackOrderByRelationAggregateInput {
  _count: SortOrder
}

input CareerTrackOrderByWithRelationInput {
  careerTrackUnit: CareerTrackUnitOrderByRelationAggregateInput
  coursePage: CoursePageOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  img: SortOrderInput
  name: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input CareerTrackUnitListRelationFilter {
  every: CareerTrackUnitWhereInput
  none: CareerTrackUnitWhereInput
  some: CareerTrackUnitWhereInput
}

input CareerTrackUnitOrderByRelationAggregateInput {
  _count: SortOrder
}

input CareerTrackUnitWhereInput {
  AND: [CareerTrackUnitWhereInput!]
  NOT: [CareerTrackUnitWhereInput!]
  OR: [CareerTrackUnitWhereInput!]
  articles: StringNullableListFilter
  careerTrack: CareerTrackWhereInput
  careerTrackId: StringFilter
  coursePage: CoursePageListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  img: StringNullableFilter
  number: IntNullableFilter
  title: StringFilter
  topics: StringNullableListFilter
  updatedAt: DateTimeFilter
}

input CareerTrackWhereInput {
  AND: [CareerTrackWhereInput!]
  NOT: [CareerTrackWhereInput!]
  OR: [CareerTrackWhereInput!]
  careerTrackUnit: CareerTrackUnitListRelationFilter
  coursePage: CoursePageListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  img: StringNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

type Certificate {
  coursePage: CoursePage!
  coursePageId: String!
  createdAt: DateTime!
  id: String!
  student: User!
  studentId: String!
  updatedAt: DateTime!
}

input CertificateListRelationFilter {
  every: CertificateWhereInput
  none: CertificateWhereInput
  some: CertificateWhereInput
}

input CertificateOrderByRelationAggregateInput {
  _count: SortOrder
}

input CertificateOrderByWithRelationInput {
  coursePage: CoursePageOrderByWithRelationInput
  coursePageId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  updatedAt: SortOrder
}

input CertificateWhereInput {
  AND: [CertificateWhereInput!]
  NOT: [CertificateWhereInput!]
  OR: [CertificateWhereInput!]
  coursePage: CoursePageWhereInput
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input CertificateWhereUniqueInput {
  AND: [CertificateWhereInput!]
  NOT: [CertificateWhereInput!]
  OR: [CertificateWhereInput!]
  coursePage: CoursePageWhereInput
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  id: String
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

type ChallengeResult {
  correct: Int
  createdAt: DateTime!
  id: String!
  lesson: Lesson!
  lessonId: String!
  student: User!
  studentId: String!
  time: Int
  updatedAt: DateTime!
  wrong: Int
}

input ChallengeResultListRelationFilter {
  every: ChallengeResultWhereInput
  none: ChallengeResultWhereInput
  some: ChallengeResultWhereInput
}

input ChallengeResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChallengeResultOrderByWithRelationInput {
  correct: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonId: SortOrder
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  time: SortOrderInput
  updatedAt: SortOrder
  wrong: SortOrderInput
}

input ChallengeResultWhereInput {
  AND: [ChallengeResultWhereInput!]
  NOT: [ChallengeResultWhereInput!]
  OR: [ChallengeResultWhereInput!]
  correct: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringFilter
  student: UserWhereInput
  studentId: StringFilter
  time: IntNullableFilter
  updatedAt: DateTimeFilter
  wrong: IntNullableFilter
}

input ChallengeResultWhereUniqueInput {
  AND: [ChallengeResultWhereInput!]
  NOT: [ChallengeResultWhereInput!]
  OR: [ChallengeResultWhereInput!]
  correct: IntNullableFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonId: StringFilter
  student: UserWhereInput
  studentId: StringFilter
  time: IntNullableFilter
  updatedAt: DateTimeFilter
  wrong: IntNullableFilter
}

type Chat {
  complexity: Int
  createdAt: DateTime!
  id: String!
  isSecret: Boolean
  lesson: Lesson!
  lessonId: String!
  link_clicks: Int
  messages: Json
  name: String
  updatedAt: DateTime!
  user: User!
}

input ChatListRelationFilter {
  every: ChatWhereInput
  none: ChatWhereInput
  some: ChatWhereInput
}

input ChatOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatOrderByWithRelationInput {
  complexity: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  isSecret: SortOrderInput
  lesson: LessonOrderByWithRelationInput
  lessonId: SortOrder
  link_clicks: SortOrderInput
  messages: SortOrderInput
  name: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isSecret: BoolNullableFilter
  lesson: LessonWhereInput
  lessonId: StringFilter
  link_clicks: IntNullableFilter
  messages: JsonNullableFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ChatWhereUniqueInput {
  AND: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  id: String
  isSecret: BoolNullableFilter
  lesson: LessonWhereInput
  lessonId: StringFilter
  link_clicks: IntNullableFilter
  messages: JsonNullableFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type Clause {
  commentary: String!
  createdAt: DateTime!
  document: Document!
  documentId: String!
  id: String!
  keywords: [String!]!
  number: Int!
  sample: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input ClauseListRelationFilter {
  every: ClauseWhereInput
  none: ClauseWhereInput
  some: ClauseWhereInput
}

input ClauseOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClauseWhereInput {
  AND: [ClauseWhereInput!]
  NOT: [ClauseWhereInput!]
  OR: [ClauseWhereInput!]
  commentary: StringFilter
  createdAt: DateTimeFilter
  document: DocumentWhereInput
  documentId: StringFilter
  id: StringFilter
  keywords: StringNullableListFilter
  number: IntFilter
  sample: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ClauseWhereUniqueInput {
  AND: [ClauseWhereInput!]
  NOT: [ClauseWhereInput!]
  OR: [ClauseWhereInput!]
  commentary: StringFilter
  createdAt: DateTimeFilter
  document: DocumentWhereInput
  documentId: StringFilter
  id: String
  keywords: StringNullableListFilter
  number: IntFilter
  sample: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ClientMessage {
  date: String
  message: String
  subject: String
}

input ClientMessages {
  messages: [ClientMessage]
}

type CommunityMember {
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  number: String
  source: String
  subscription: String
  surname: String
  updatedAt: DateTime!
}

type Company {
  id: String!
  name: String!
}

input CompanyOrderByWithRelationInput {
  coursePage: CoursePageOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  paidMonths: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByRelationAggregateInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  coursePage: CoursePageListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  paidMonths: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserListRelationFilter
}

type ConfUser {
  conf_number: Int
  createdAt: DateTime!
  email: String!
  id: String!
  name: String
  surname: String
  updatedAt: DateTime!
}

type Construction {
  answer: [String!]!
  columnsNum: Int
  complexity: Int
  constructionResults(after: ConstructionResultWhereUniqueInput, before: ConstructionResultWhereUniqueInput, first: Int, last: Int): [ConstructionResult!]!
  createdAt: DateTime!
  elements: Json
  hasText: Boolean!
  hint: String
  id: String!
  lesson: Lesson!
  lessonID: String!
  lessonId: String!
  name: String!
  text: String
  type: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
  variants: [String!]!
}

input ConstructionListRelationFilter {
  every: ConstructionWhereInput
  none: ConstructionWhereInput
  some: ConstructionWhereInput
}

input ConstructionOrderByRelationAggregateInput {
  _count: SortOrder
}

type ConstructionResult {
  answer: String
  attempts: Int
  construction: Construction
  constructionID: String
  constructionId: String
  createdAt: DateTime!
  id: String!
  inputs: [String!]!
  lesson: Lesson
  lessonID: String
  lessonId: String
  student: User!
  studentId: String!
  updatedAt: DateTime!
}

input ConstructionResultListRelationFilter {
  every: ConstructionResultWhereInput
  none: ConstructionResultWhereInput
  some: ConstructionResultWhereInput
}

input ConstructionResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input ConstructionResultWhereInput {
  AND: [ConstructionResultWhereInput!]
  NOT: [ConstructionResultWhereInput!]
  OR: [ConstructionResultWhereInput!]
  answer: StringNullableFilter
  attempts: IntNullableFilter
  construction: ConstructionWhereInput
  constructionID: StringNullableFilter
  constructionId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  inputs: StringNullableListFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input ConstructionResultWhereUniqueInput {
  AND: [ConstructionResultWhereInput!]
  NOT: [ConstructionResultWhereInput!]
  OR: [ConstructionResultWhereInput!]
  answer: StringNullableFilter
  attempts: IntNullableFilter
  construction: ConstructionWhereInput
  constructionID: StringNullableFilter
  constructionId: StringNullableFilter
  createdAt: DateTimeFilter
  id: String
  inputs: StringNullableListFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input ConstructionWhereInput {
  AND: [ConstructionWhereInput!]
  NOT: [ConstructionWhereInput!]
  OR: [ConstructionWhereInput!]
  answer: StringNullableListFilter
  columnsNum: IntNullableFilter
  complexity: IntNullableFilter
  constructionResults: ConstructionResultListRelationFilter
  createdAt: DateTimeFilter
  elements: JsonNullableFilter
  hasText: BoolFilter
  hint: StringNullableFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringFilter
  lessonId: StringFilter
  name: StringFilter
  text: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
  variants: StringNullableListFilter
}

input ConstructionWhereUniqueInput {
  AND: [ConstructionWhereInput!]
  NOT: [ConstructionWhereInput!]
  OR: [ConstructionWhereInput!]
  answer: StringNullableListFilter
  columnsNum: IntNullableFilter
  complexity: IntNullableFilter
  constructionResults: ConstructionResultListRelationFilter
  createdAt: DateTimeFilter
  elements: JsonNullableFilter
  hasText: BoolFilter
  hint: StringNullableFilter
  id: String
  lesson: LessonWhereInput
  lessonID: StringFilter
  lessonId: StringFilter
  name: StringFilter
  text: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
  variants: StringNullableListFilter
}

input ConsumedContent {
  id: String
  tags: [String]
  type: String
}

input ConsumedContentList {
  consumedContentList: [ConsumedContent]
}

type CoursePage {
  applications(after: ApplicationWhereUniqueInput, before: ApplicationWhereUniqueInput, first: Int, last: Int): [Application!]!
  audience: String
  authors(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  banner: String
  batch: String
  company: Company
  countries: [String!]!
  courseType: CourseType
  createdAt: DateTime!
  currency: String
  description: String!
  discountPrice: Int
  goals: [String!]!
  header: [String!]!
  id: String!
  image: String!
  installments: Int
  lessons(after: LessonWhereUniqueInput, before: LessonWhereUniqueInput, first: Int, last: Int): [Lesson!]!
  methods: String
  modules: Json
  new_students(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
  news: String
  nextStart: DateTime
  numInCareerTrack: Int
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  price: Int
  prices: Json
  promocode: Json
  promotionId: String
  published: Boolean
  result: String
  reviews: Json
  students: [String!]!
  subheader: [String!]!
  subscription: Boolean
  subscriptionPrice: Int
  tags: [String!]!
  tariffs: String
  title: String!
  uni: Uni
  updatedAt: DateTime!
  uptodateAt: DateTime
  user: User!
  video: String
  view: PageView!
  weeks: Int
}

input CoursePageListRelationFilter {
  every: CoursePageWhereInput
  none: CoursePageWhereInput
  some: CoursePageWhereInput
}

input CoursePageOrderByRelationAggregateInput {
  _count: SortOrder
}

input CoursePageOrderByWithRelationInput {
  applications: ApplicationOrderByRelationAggregateInput
  audience: SortOrderInput
  authors: UserOrderByRelationAggregateInput
  banner: SortOrderInput
  batch: SortOrderInput
  businessClients: BusinessClientOrderByRelationAggregateInput
  careerTrack: CareerTrackOrderByRelationAggregateInput
  careerTrackUnit: CareerTrackUnitOrderByRelationAggregateInput
  certificates: CertificateOrderByRelationAggregateInput
  company: CompanyOrderByWithRelationInput
  companyId: SortOrderInput
  countries: SortOrder
  courseType: SortOrderInput
  courseVisits: CourseVisitOrderByRelationAggregateInput
  createdAt: SortOrder
  currency: SortOrderInput
  description: SortOrder
  discountPrice: SortOrderInput
  emailReminder: EmailReminderOrderByRelationAggregateInput
  examQuestion: ExamQuestionOrderByWithRelationInput
  examQuestionId: SortOrderInput
  goals: SortOrder
  header: SortOrder
  id: SortOrder
  image: SortOrder
  installments: SortOrderInput
  lawrdles: LawrdleOrderByRelationAggregateInput
  lessons: LessonOrderByRelationAggregateInput
  methods: SortOrderInput
  modules: SortOrderInput
  new_students: UserOrderByRelationAggregateInput
  news: SortOrderInput
  nextStart: SortOrderInput
  numInCareerTrack: SortOrderInput
  openLesson: SortOrderInput
  orders: OrderOrderByRelationAggregateInput
  pointA: PointAOrderByRelationAggregateInput
  pointATest: PointATestOrderByRelationAggregateInput
  posts: PostOrderByRelationAggregateInput
  price: SortOrderInput
  prices: SortOrderInput
  programs: ProgramOrderByRelationAggregateInput
  promocode: SortOrderInput
  promotionId: SortOrderInput
  published: SortOrderInput
  result: SortOrderInput
  reviews: SortOrderInput
  students: SortOrder
  subheader: SortOrder
  subscription: SortOrderInput
  subscriptionPrice: SortOrderInput
  tags: SortOrder
  tariffs: SortOrderInput
  title: SortOrder
  uni: UniOrderByWithRelationInput
  uniID: SortOrderInput
  uniId: SortOrderInput
  updatedAt: SortOrder
  uptodateAt: SortOrderInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
  video: SortOrderInput
  view: SortOrder
  weeks: SortOrderInput
}

input CoursePageWhereInput {
  AND: [CoursePageWhereInput!]
  NOT: [CoursePageWhereInput!]
  OR: [CoursePageWhereInput!]
  applications: ApplicationListRelationFilter
  audience: StringNullableFilter
  authors: UserListRelationFilter
  banner: StringNullableFilter
  batch: StringNullableFilter
  businessClients: BusinessClientListRelationFilter
  careerTrack: CareerTrackListRelationFilter
  careerTrackUnit: CareerTrackUnitListRelationFilter
  certificates: CertificateListRelationFilter
  company: CompanyWhereInput
  companyId: StringNullableFilter
  countries: StringNullableListFilter
  courseType: EnumCourseTypeNullableFilter
  courseVisits: CourseVisitListRelationFilter
  createdAt: DateTimeFilter
  currency: StringNullableFilter
  description: StringFilter
  discountPrice: IntNullableFilter
  emailReminder: EmailReminderListRelationFilter
  examQuestion: ExamQuestionWhereInput
  examQuestionId: StringNullableFilter
  goals: StringNullableListFilter
  header: StringNullableListFilter
  id: StringFilter
  image: StringFilter
  installments: IntNullableFilter
  lawrdles: LawrdleListRelationFilter
  lessons: LessonListRelationFilter
  methods: StringNullableFilter
  modules: JsonNullableFilter
  new_students: UserListRelationFilter
  news: StringNullableFilter
  nextStart: DateTimeNullableFilter
  numInCareerTrack: IntNullableFilter
  openLesson: StringNullableFilter
  orders: OrderListRelationFilter
  pointA: PointAListRelationFilter
  pointATest: PointATestListRelationFilter
  posts: PostListRelationFilter
  price: IntNullableFilter
  prices: JsonNullableFilter
  programs: ProgramListRelationFilter
  promocode: JsonNullableFilter
  promotionId: StringNullableFilter
  published: BoolNullableFilter
  result: StringNullableFilter
  reviews: JsonNullableFilter
  students: StringNullableListFilter
  subheader: StringNullableListFilter
  subscription: BoolNullableFilter
  subscriptionPrice: IntNullableFilter
  tags: StringNullableListFilter
  tariffs: StringNullableFilter
  title: StringFilter
  uni: UniWhereInput
  uniID: StringNullableFilter
  uniId: StringNullableFilter
  updatedAt: DateTimeFilter
  uptodateAt: DateTimeNullableFilter
  user: UserWhereInput
  userId: StringFilter
  video: StringNullableFilter
  view: EnumPageViewFilter
  weeks: IntNullableFilter
}

input CoursePageWhereUniqueInput {
  AND: [CoursePageWhereInput!]
  NOT: [CoursePageWhereInput!]
  OR: [CoursePageWhereInput!]
  applications: ApplicationListRelationFilter
  audience: StringNullableFilter
  authors: UserListRelationFilter
  banner: StringNullableFilter
  batch: StringNullableFilter
  businessClients: BusinessClientListRelationFilter
  careerTrack: CareerTrackListRelationFilter
  careerTrackUnit: CareerTrackUnitListRelationFilter
  certificates: CertificateListRelationFilter
  company: CompanyWhereInput
  companyId: StringNullableFilter
  countries: StringNullableListFilter
  courseType: EnumCourseTypeNullableFilter
  courseVisits: CourseVisitListRelationFilter
  createdAt: DateTimeFilter
  currency: StringNullableFilter
  description: StringFilter
  discountPrice: IntNullableFilter
  emailReminder: EmailReminderListRelationFilter
  examQuestion: ExamQuestionWhereInput
  examQuestionId: String
  goals: StringNullableListFilter
  header: StringNullableListFilter
  id: String
  image: StringFilter
  installments: IntNullableFilter
  lawrdles: LawrdleListRelationFilter
  lessons: LessonListRelationFilter
  methods: StringNullableFilter
  modules: JsonNullableFilter
  new_students: UserListRelationFilter
  news: StringNullableFilter
  nextStart: DateTimeNullableFilter
  numInCareerTrack: IntNullableFilter
  openLesson: StringNullableFilter
  orders: OrderListRelationFilter
  pointA: PointAListRelationFilter
  pointATest: PointATestListRelationFilter
  posts: PostListRelationFilter
  price: IntNullableFilter
  prices: JsonNullableFilter
  programs: ProgramListRelationFilter
  promocode: JsonNullableFilter
  promotionId: StringNullableFilter
  published: BoolNullableFilter
  result: StringNullableFilter
  reviews: JsonNullableFilter
  students: StringNullableListFilter
  subheader: StringNullableListFilter
  subscription: BoolNullableFilter
  subscriptionPrice: IntNullableFilter
  tags: StringNullableListFilter
  tariffs: StringNullableFilter
  title: StringFilter
  uni: UniWhereInput
  uniID: StringNullableFilter
  uniId: StringNullableFilter
  updatedAt: DateTimeFilter
  uptodateAt: DateTimeNullableFilter
  user: UserWhereInput
  userId: StringFilter
  video: StringNullableFilter
  view: EnumPageViewFilter
  weeks: IntNullableFilter
}

"""The first Star Wars episodes released"""
enum CourseType {
  CHALLENGE
  FORMONEY
  PRIVATE
  PUBLIC
  UNI
}

type CourseVisit {
  coursePage: CoursePage!
  coursePageId: String!
  createdAt: DateTime!
  id: String!
  reminders: [DateTime!]!
  student: User!
  studentId: String!
  updatedAt: DateTime!
  visitsNumber: Int
}

input CourseVisitListRelationFilter {
  every: CourseVisitWhereInput
  none: CourseVisitWhereInput
  some: CourseVisitWhereInput
}

input CourseVisitOrderByRelationAggregateInput {
  _count: SortOrder
}

input CourseVisitOrderByWithRelationInput {
  comment: SortOrderInput
  coursePage: CoursePageOrderByWithRelationInput
  coursePageId: SortOrder
  createdAt: SortOrder
  finish: SortOrderInput
  id: SortOrder
  info: SortOrderInput
  reminders: SortOrder
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  updatedAt: SortOrder
  visitsNumber: SortOrderInput
}

input CourseVisitWhereInput {
  AND: [CourseVisitWhereInput!]
  NOT: [CourseVisitWhereInput!]
  OR: [CourseVisitWhereInput!]
  comment: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  finish: DateTimeNullableFilter
  id: StringFilter
  info: JsonNullableFilter
  reminders: DateTimeNullableListFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
  visitsNumber: IntNullableFilter
}

input CourseVisitWhereUniqueInput {
  AND: [CourseVisitWhereInput!]
  NOT: [CourseVisitWhereInput!]
  OR: [CourseVisitWhereInput!]
  comment: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  finish: DateTimeNullableFilter
  id: String
  info: JsonNullableFilter
  reminders: DateTimeNullableListFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
  visitsNumber: IntNullableFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableListFilter {
  equals: [DateTime!]
  has: DateTime
  hasEvery: [DateTime!]
  hasSome: [DateTime!]
  isEmpty: Boolean
}

scalar Decimal

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

type Document {
  clauses(after: ClauseWhereUniqueInput, before: ClauseWhereUniqueInput, first: Int, last: Int): [Clause!]!
  complexity: Int
  createdAt: DateTime!
  documentResults(after: DocumentResultWhereUniqueInput, before: DocumentResultWhereUniqueInput, first: Int, last: Int): [DocumentResult!]!
  id: String!
  lesson: Lesson!
  lessonId: String!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input DocumentListRelationFilter {
  every: DocumentWhereInput
  none: DocumentWhereInput
  some: DocumentWhereInput
}

input DocumentOrderByRelationAggregateInput {
  _count: SortOrder
}

type DocumentResult {
  answers: [String!]!
  createdAt: DateTime!
  document: Document
  documentId: String
  drafts: [String!]!
  id: String!
  lesson: Lesson
  lessonId: String
  updatedAt: DateTime!
  user: User
  userId: String
}

input DocumentResultListRelationFilter {
  every: DocumentResultWhereInput
  none: DocumentResultWhereInput
  some: DocumentResultWhereInput
}

input DocumentResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input DocumentResultWhereInput {
  AND: [DocumentResultWhereInput!]
  NOT: [DocumentResultWhereInput!]
  OR: [DocumentResultWhereInput!]
  answers: StringNullableListFilter
  createdAt: DateTimeFilter
  document: DocumentWhereInput
  documentId: StringNullableFilter
  drafts: StringNullableListFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input DocumentResultWhereUniqueInput {
  AND: [DocumentResultWhereInput!]
  NOT: [DocumentResultWhereInput!]
  OR: [DocumentResultWhereInput!]
  answers: StringNullableListFilter
  createdAt: DateTimeFilter
  document: DocumentWhereInput
  documentId: StringNullableFilter
  drafts: StringNullableListFilter
  id: String
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  clauses: ClauseListRelationFilter
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  documentResults: DocumentResultListRelationFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input DocumentWhereUniqueInput {
  AND: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  clauses: ClauseListRelationFilter
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  documentResults: DocumentResultListRelationFilter
  id: String
  lesson: LessonWhereInput
  lessonId: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input Element {
  borders: Borders
  inDoc: Boolean
  isTest: Boolean
  place: Int
  rows: Int
  size: Int
  text: String
  type: String
  value: String
}

input ElementsList {
  elements: [Element]
}

input Email {
  header: String
  name: String
  number: Int
  text: String
}

type EmailCampaign {
  content: String!
  createdAt: DateTime!
  emailReminders(after: EmailReminderWhereUniqueInput, before: EmailReminderWhereUniqueInput, first: Int, last: Int): [EmailReminder!]!
  emails: Json
  id: String!
  name: String
  updatedAt: DateTime!
}

input EmailCampaignOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  emailReminders: EmailReminderOrderByRelationAggregateInput
  emails: SortOrderInput
  id: SortOrder
  lawrdle: LawrdleOrderByRelationAggregateInput
  name: SortOrderInput
  post: PostOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input EmailCampaignWhereInput {
  AND: [EmailCampaignWhereInput!]
  NOT: [EmailCampaignWhereInput!]
  OR: [EmailCampaignWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  emailReminders: EmailReminderListRelationFilter
  emails: JsonNullableFilter
  id: StringFilter
  lawrdle: LawrdleListRelationFilter
  name: StringNullableFilter
  post: PostListRelationFilter
  updatedAt: DateTimeFilter
}

input EmailCampaignWhereUniqueInput {
  AND: [EmailCampaignWhereInput!]
  NOT: [EmailCampaignWhereInput!]
  OR: [EmailCampaignWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  emailReminders: EmailReminderListRelationFilter
  emails: JsonNullableFilter
  id: String
  lawrdle: LawrdleListRelationFilter
  name: StringNullableFilter
  post: PostListRelationFilter
  updatedAt: DateTimeFilter
}

input EmailInfo {
  completed_lessons_number: Int
  course_name: String
  lesResultsList: LesResultsList
  lessons_number: Int
  student_name: String
}

type EmailReminder {
  coursePage: CoursePage
  coursePageId: String
  createdAt: DateTime!
  emailCampaign: EmailCampaign
  emailsSent: [String!]!
  gap: Int
  id: String!
  link: String
  sendAt: DateTime
  updatedAt: DateTime!
  user: User
  userId: String
}

input EmailReminderListRelationFilter {
  every: EmailReminderWhereInput
  none: EmailReminderWhereInput
  some: EmailReminderWhereInput
}

input EmailReminderOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmailReminderOrderByWithRelationInput {
  coursePage: CoursePageOrderByWithRelationInput
  coursePageId: SortOrderInput
  createdAt: SortOrder
  emailCampaign: EmailCampaignOrderByWithRelationInput
  emailCampaignId: SortOrderInput
  emailsSent: SortOrder
  gap: SortOrderInput
  id: SortOrder
  link: SortOrderInput
  sendAt: SortOrderInput
  status: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
}

input EmailReminderWhereInput {
  AND: [EmailReminderWhereInput!]
  NOT: [EmailReminderWhereInput!]
  OR: [EmailReminderWhereInput!]
  coursePage: CoursePageWhereInput
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  emailCampaign: EmailCampaignWhereInput
  emailCampaignId: StringNullableFilter
  emailsSent: StringNullableListFilter
  gap: IntNullableFilter
  id: StringFilter
  link: StringNullableFilter
  sendAt: DateTimeNullableFilter
  status: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input EmailReminderWhereUniqueInput {
  AND: [EmailReminderWhereInput!]
  NOT: [EmailReminderWhereInput!]
  OR: [EmailReminderWhereInput!]
  coursePage: CoursePageWhereInput
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  emailCampaign: EmailCampaignWhereInput
  emailCampaignId: StringNullableFilter
  emailsSent: StringNullableListFilter
  gap: IntNullableFilter
  id: String
  link: StringNullableFilter
  sendAt: DateTimeNullableFilter
  status: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input EmailsList {
  emails: [Email]
}

input EnumCourseTypeNullableFilter {
  equals: CourseType
  in: [CourseType!]
  not: NestedEnumCourseTypeNullableFilter
  notIn: [CourseType!]
}

input EnumLevelNullableFilter {
  equals: Level
  in: [Level!]
  not: NestedEnumLevelNullableFilter
  notIn: [Level!]
}

input EnumPageViewFilter {
  equals: PageView
  in: [PageView!]
  not: NestedEnumPageViewFilter
  notIn: [PageView!]
}

input EnumPermissionNullableListFilter {
  equals: [Permission!]
  has: Permission
  hasEvery: [Permission!]
  hasSome: [Permission!]
  isEmpty: Boolean
}

input ExamAnswerListRelationFilter {
  every: ExamAnswerWhereInput
  none: ExamAnswerWhereInput
  some: ExamAnswerWhereInput
}

input ExamAnswerOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExamAnswerWhereInput {
  AND: [ExamAnswerWhereInput!]
  NOT: [ExamAnswerWhereInput!]
  OR: [ExamAnswerWhereInput!]
  answer: StringFilter
  createdAt: DateTimeFilter
  examQuestion: ExamQuestionWhereInput
  examQuestionID: StringFilter
  examQuestionId: StringFilter
  id: StringFilter
  legalPortfolio: LegalPortfolioListRelationFilter
  studentId: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input ExamListRelationFilter {
  every: ExamWhereInput
  none: ExamWhereInput
  some: ExamWhereInput
}

input ExamOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExamQuestionOrderByWithRelationInput {
  coursePage: CoursePageOrderByWithRelationInput
  coursePageID: SortOrder
  createdAt: SortOrder
  examAnswer: ExamAnswerOrderByRelationAggregateInput
  id: SortOrder
  question: SortOrder
  updatedAt: SortOrder
}

input ExamQuestionWhereInput {
  AND: [ExamQuestionWhereInput!]
  NOT: [ExamQuestionWhereInput!]
  OR: [ExamQuestionWhereInput!]
  coursePage: CoursePageWhereInput
  coursePageID: StringFilter
  createdAt: DateTimeFilter
  examAnswer: ExamAnswerListRelationFilter
  id: StringFilter
  question: StringFilter
  updatedAt: DateTimeFilter
}

input ExamResultListRelationFilter {
  every: ExamResultWhereInput
  none: ExamResultWhereInput
  some: ExamResultWhereInput
}

input ExamResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExamResultWhereInput {
  AND: [ExamResultWhereInput!]
  NOT: [ExamResultWhereInput!]
  OR: [ExamResultWhereInput!]
  answers: StringNullableListFilter
  createdAt: DateTimeFilter
  exam: ExamWhereInput
  examId: StringNullableFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input ExamWhereInput {
  AND: [ExamWhereInput!]
  NOT: [ExamWhereInput!]
  OR: [ExamWhereInput!]
  createdAt: DateTimeFilter
  examResult: ExamResultListRelationFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringFilter
  name: StringNullableFilter
  nodeID: StringNullableFilter
  nodeType: StringNullableFilter
  question: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type Feedback {
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonId: String
  student: User!
  studentId: String!
  teacher: User!
  teacherId: String!
  text: String!
  updatedAt: DateTime!
}

input FeedbackListRelationFilter {
  every: FeedbackWhereInput
  none: FeedbackWhereInput
  some: FeedbackWhereInput
}

input FeedbackOrderByRelationAggregateInput {
  _count: SortOrder
}

input FeedbackOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonId: SortOrderInput
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  teacher: UserOrderByWithRelationInput
  teacherId: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input FeedbackWhereInput {
  AND: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  teacher: UserWhereInput
  teacherId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input FeedbackWhereUniqueInput {
  AND: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  teacher: UserWhereInput
  teacherId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

type Forum {
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  rating(after: RatingWhereUniqueInput, before: RatingWhereUniqueInput, first: Int, last: Int): [Rating!]!
  statements(after: StatementWhereUniqueInput, before: StatementWhereUniqueInput, first: Int, last: Int): [Statement!]!
  text: String
  updatedAt: DateTime!
  user: User
  userId: String
}

input ForumListRelationFilter {
  every: ForumWhereInput
  none: ForumWhereInput
  some: ForumWhereInput
}

input ForumOrderByRelationAggregateInput {
  _count: SortOrder
}

input ForumOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  rating: RatingOrderByRelationAggregateInput
  statements: StatementOrderByRelationAggregateInput
  text: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
}

input ForumWhereInput {
  AND: [ForumWhereInput!]
  NOT: [ForumWhereInput!]
  OR: [ForumWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  rating: RatingListRelationFilter
  statements: StatementListRelationFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

type GrowthArea {
  createdAt: DateTime!
  id: String!
  marks: Json
  maxProgress: Int
  name: String!
  updatedAt: DateTime!
  userLevels(after: UserLevelWhereUniqueInput, before: UserLevelWhereUniqueInput, first: Int, last: Int): [UserLevel!]!
}

input GrowthAreaListRelationFilter {
  every: GrowthAreaWhereInput
  none: GrowthAreaWhereInput
  some: GrowthAreaWhereInput
}

input GrowthAreaOrderByRelationAggregateInput {
  _count: SortOrder
}

input GrowthAreaOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  marks: SortOrderInput
  maxProgress: SortOrderInput
  name: SortOrder
  updatedAt: SortOrder
  userLevels: UserLevelOrderByRelationAggregateInput
}

input GrowthAreaWhereInput {
  AND: [GrowthAreaWhereInput!]
  NOT: [GrowthAreaWhereInput!]
  OR: [GrowthAreaWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  marks: JsonNullableFilter
  maxProgress: IntNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userLevels: UserLevelListRelationFilter
}

input GrowthAreaWhereUniqueInput {
  AND: [GrowthAreaWhereInput!]
  NOT: [GrowthAreaWhereInput!]
  OR: [GrowthAreaWhereInput!]
  createdAt: DateTimeFilter
  id: String
  marks: JsonNullableFilter
  maxProgress: IntNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userLevels: UserLevelListRelationFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar Json

input JsonNullableFilter {
  array_contains: Json
  array_ends_with: Json
  array_starts_with: Json
  equals: Json
  gt: Json
  gte: Json
  lt: Json
  lte: Json
  not: Json
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableListFilter {
  equals: [Json!]
  has: Json
  hasEvery: [Json!]
  hasSome: [Json!]
  isEmpty: Boolean
}

type Lawrdle {
  active: Boolean!
  author: User!
  authorId: String!
  buttonText: String
  coursePage: CoursePage
  coursePageId: String
  createdAt: DateTime!
  emailCampaign: EmailCampaign
  emailCampaignId: String
  id: String!
  leadin: String
  lessonId: String
  link: String
  story: String!
  updatedAt: DateTime!
  word: String!
}

input LawrdleListRelationFilter {
  every: LawrdleWhereInput
  none: LawrdleWhereInput
  some: LawrdleWhereInput
}

input LawrdleOrderByRelationAggregateInput {
  _count: SortOrder
}

input LawrdleOrderByWithRelationInput {
  active: SortOrder
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  buttonText: SortOrderInput
  coursePage: CoursePageOrderByWithRelationInput
  coursePageId: SortOrderInput
  createdAt: SortOrder
  emailCampaign: EmailCampaignOrderByWithRelationInput
  emailCampaignId: SortOrderInput
  id: SortOrder
  leadin: SortOrderInput
  lessonId: SortOrderInput
  link: SortOrderInput
  pros: SortOrder
  story: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
  word: SortOrder
}

input LawrdleWhereInput {
  AND: [LawrdleWhereInput!]
  NOT: [LawrdleWhereInput!]
  OR: [LawrdleWhereInput!]
  active: BoolFilter
  author: UserWhereInput
  authorId: StringFilter
  buttonText: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  emailCampaign: EmailCampaignWhereInput
  emailCampaignId: StringNullableFilter
  id: StringFilter
  leadin: StringNullableFilter
  lessonId: StringNullableFilter
  link: StringNullableFilter
  pros: StringNullableListFilter
  story: StringFilter
  tags: StringNullableListFilter
  updatedAt: DateTimeFilter
  word: StringFilter
}

input LawrdleWhereUniqueInput {
  AND: [LawrdleWhereInput!]
  NOT: [LawrdleWhereInput!]
  OR: [LawrdleWhereInput!]
  active: BoolFilter
  author: UserWhereInput
  authorId: StringFilter
  buttonText: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  emailCampaign: EmailCampaignWhereInput
  emailCampaignId: StringNullableFilter
  id: String
  leadin: StringNullableFilter
  lessonId: StringNullableFilter
  link: StringNullableFilter
  pros: StringNullableListFilter
  story: StringFilter
  tags: StringNullableListFilter
  updatedAt: DateTimeFilter
  word: StringFilter
}

input LegalPortfolioListRelationFilter {
  every: LegalPortfolioWhereInput
  none: LegalPortfolioWhereInput
  some: LegalPortfolioWhereInput
}

input LegalPortfolioOrderByWithRelationInput {
  createdAt: SortOrder
  cv: SortOrderInput
  examAnswer: ExamAnswerOrderByRelationAggregateInput
  id: SortOrder
  open: SortOrder
  portfolioIDs: SortOrder
  resume: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input LegalPortfolioWhereInput {
  AND: [LegalPortfolioWhereInput!]
  NOT: [LegalPortfolioWhereInput!]
  OR: [LegalPortfolioWhereInput!]
  createdAt: DateTimeFilter
  cv: StringNullableFilter
  examAnswer: ExamAnswerListRelationFilter
  id: StringFilter
  open: BoolFilter
  portfolioIDs: StringNullableListFilter
  resume: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input LesResult {
  lesson_name: String
  lesson_number: Int
  lesson_size: Int
  progress: Int
  visits: Int
}

input LesResultsList {
  lesResults: [LesResult]
}

type Lesson {
  assignment: Boolean
  challengeResults(after: ChallengeResultWhereUniqueInput, before: ChallengeResultWhereUniqueInput, first: Int, last: Int): [ChallengeResult!]!
  challenge_num: Int
  change: String
  chats(after: ChatWhereUniqueInput, before: ChatWhereUniqueInput, first: Int, last: Int): [Chat!]!
  constructionResults(after: ConstructionResultWhereUniqueInput, before: ConstructionResultWhereUniqueInput, first: Int, last: Int): [ConstructionResult!]!
  constructions(after: ConstructionWhereUniqueInput, before: ConstructionWhereUniqueInput, first: Int, last: Int): [Construction!]!
  coursePage: CoursePage!
  coursePageID: String!
  coursePageId: String!
  createdAt: DateTime!
  description: String
  documents(after: DocumentWhereUniqueInput, before: DocumentWhereUniqueInput, first: Int, last: Int): [Document!]!
  forum: Forum
  forumId: String
  hasSecret: Boolean
  id: String!
  lessonResults(after: LessonResultWhereUniqueInput, before: LessonResultWhereUniqueInput, first: Int, last: Int): [LessonResult!]!
  map: [Json!]!
  miniforums(after: MiniForumWhereUniqueInput, before: MiniForumWhereUniqueInput, first: Int, last: Int): [MiniForum!]!
  name: String!
  newTests(after: NewTestWhereUniqueInput, before: NewTestWhereUniqueInput, first: Int, last: Int): [NewTest!]!
  notes(after: NoteWhereUniqueInput, before: NoteWhereUniqueInput, first: Int, last: Int): [Note!]!
  number: Int
  offers(after: OfferWhereUniqueInput, before: OfferWhereUniqueInput, first: Int, last: Int): [Offer!]!
  open: Boolean
  problemResults(after: ProblemResultWhereUniqueInput, before: ProblemResultWhereUniqueInput, first: Int, last: Int): [ProblemResult!]!
  problems(after: ProblemWhereUniqueInput, before: ProblemWhereUniqueInput, first: Int, last: Int): [Problem!]!
  published: Boolean
  quizResults(after: QuizResultWhereUniqueInput, before: QuizResultWhereUniqueInput, first: Int, last: Int): [QuizResult!]!
  quizes(after: QuizWhereUniqueInput, before: QuizWhereUniqueInput, first: Int, last: Int): [Quiz!]!
  short_structure: Json
  shotResults(after: ShotResultWhereUniqueInput, before: ShotResultWhereUniqueInput, first: Int, last: Int): [ShotResult!]!
  shots(after: ShotWhereUniqueInput, before: ShotWhereUniqueInput, first: Int, last: Int): [Shot!]!
  structure: Json
  teamQuestResults(after: TeamQuestResultWhereUniqueInput, before: TeamQuestResultWhereUniqueInput, first: Int, last: Int): [TeamQuestResult!]!
  teamQuests(after: TeamQuestWhereUniqueInput, before: TeamQuestWhereUniqueInput, first: Int, last: Int): [TeamQuest!]!
  testPractices(after: TestPracticeWhereUniqueInput, before: TestPracticeWhereUniqueInput, first: Int, last: Int): [TestPractice!]!
  testResults(after: TestResultWhereUniqueInput, before: TestResultWhereUniqueInput, first: Int, last: Int): [TestResult!]!
  text: String!
  textEditorResults(after: TextEditorResultWhereUniqueInput, before: TextEditorResultWhereUniqueInput, first: Int, last: Int): [TextEditorResult!]!
  texteditors(after: TextEditorWhereUniqueInput, before: TextEditorWhereUniqueInput, first: Int, last: Int): [TextEditor!]!
  totalPoints: Int
  type: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input LessonInModule {
  id: String
}

input LessonItem {
  id: String
  type: String
}

input LessonListRelationFilter {
  every: LessonWhereInput
  none: LessonWhereInput
  some: LessonWhereInput
}

input LessonOrderByRelationAggregateInput {
  _count: SortOrder
}

input LessonOrderByWithRelationInput {
  assignment: SortOrderInput
  challengeResults: ChallengeResultOrderByRelationAggregateInput
  challenge_num: SortOrderInput
  change: SortOrderInput
  chats: ChatOrderByRelationAggregateInput
  constructionResults: ConstructionResultOrderByRelationAggregateInput
  constructions: ConstructionOrderByRelationAggregateInput
  coursePage: CoursePageOrderByWithRelationInput
  coursePageID: SortOrder
  coursePageId: SortOrder
  createdAt: SortOrder
  description: SortOrderInput
  documentResults: DocumentResultOrderByRelationAggregateInput
  documents: DocumentOrderByRelationAggregateInput
  examResults: ExamResultOrderByRelationAggregateInput
  exams: ExamOrderByRelationAggregateInput
  feedback: FeedbackOrderByRelationAggregateInput
  forum: ForumOrderByWithRelationInput
  forumId: SortOrderInput
  hasSecret: SortOrderInput
  id: SortOrder
  image: SortOrderInput
  lessonResults: LessonResultOrderByRelationAggregateInput
  map: SortOrder
  miniforums: MiniForumOrderByRelationAggregateInput
  name: SortOrder
  newTests: NewTestOrderByRelationAggregateInput
  notes: NoteOrderByRelationAggregateInput
  number: SortOrderInput
  offers: OfferOrderByRelationAggregateInput
  open: SortOrderInput
  problemResults: ProblemResultOrderByRelationAggregateInput
  problems: ProblemOrderByRelationAggregateInput
  published: SortOrderInput
  quizResults: QuizResultOrderByRelationAggregateInput
  quizes: QuizOrderByRelationAggregateInput
  short_structure: SortOrderInput
  shotResults: ShotResultOrderByRelationAggregateInput
  shots: ShotOrderByRelationAggregateInput
  structure: SortOrderInput
  teamQuestResults: TeamQuestResultOrderByRelationAggregateInput
  teamQuests: TeamQuestOrderByRelationAggregateInput
  test: TestOrderByRelationAggregateInput
  testPracticeResults: TestPracticeResultOrderByRelationAggregateInput
  testPractices: TestPracticeOrderByRelationAggregateInput
  testResults: TestResultOrderByRelationAggregateInput
  text: SortOrder
  textEditorResults: TextEditorResultOrderByRelationAggregateInput
  texteditors: TextEditorOrderByRelationAggregateInput
  totalPoints: SortOrderInput
  type: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

type LessonResult {
  checked: Boolean
  createdAt: DateTime!
  id: String!
  lesson: Lesson!
  lessonID: String
  progress: Int
  student: User!
  updatedAt: DateTime!
  visitsNumber: Int
}

input LessonResultListRelationFilter {
  every: LessonResultWhereInput
  none: LessonResultWhereInput
  some: LessonResultWhereInput
}

input LessonResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input LessonResultOrderByWithRelationInput {
  checked: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonID: SortOrderInput
  lessonId: SortOrder
  progress: SortOrderInput
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  updatedAt: SortOrder
  visitsNumber: SortOrderInput
}

input LessonResultWhereInput {
  AND: [LessonResultWhereInput!]
  NOT: [LessonResultWhereInput!]
  OR: [LessonResultWhereInput!]
  checked: BoolNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringFilter
  progress: IntNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
  visitsNumber: IntNullableFilter
}

input LessonResultWhereUniqueInput {
  AND: [LessonResultWhereInput!]
  NOT: [LessonResultWhereInput!]
  OR: [LessonResultWhereInput!]
  checked: BoolNullableFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringFilter
  progress: IntNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
  visitsNumber: IntNullableFilter
}

input LessonStructure {
  lessonItems: [LessonItem]
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  assignment: BoolNullableFilter
  challengeResults: ChallengeResultListRelationFilter
  challenge_num: IntNullableFilter
  change: StringNullableFilter
  chats: ChatListRelationFilter
  constructionResults: ConstructionResultListRelationFilter
  constructions: ConstructionListRelationFilter
  coursePage: CoursePageWhereInput
  coursePageID: StringFilter
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  documentResults: DocumentResultListRelationFilter
  documents: DocumentListRelationFilter
  examResults: ExamResultListRelationFilter
  exams: ExamListRelationFilter
  feedback: FeedbackListRelationFilter
  forum: ForumWhereInput
  forumId: StringNullableFilter
  hasSecret: BoolNullableFilter
  id: StringFilter
  image: StringNullableFilter
  lessonResults: LessonResultListRelationFilter
  map: JsonNullableListFilter
  miniforums: MiniForumListRelationFilter
  name: StringFilter
  newTests: NewTestListRelationFilter
  notes: NoteListRelationFilter
  number: IntNullableFilter
  offers: OfferListRelationFilter
  open: BoolNullableFilter
  problemResults: ProblemResultListRelationFilter
  problems: ProblemListRelationFilter
  published: BoolNullableFilter
  quizResults: QuizResultListRelationFilter
  quizes: QuizListRelationFilter
  short_structure: JsonNullableFilter
  shotResults: ShotResultListRelationFilter
  shots: ShotListRelationFilter
  structure: JsonNullableFilter
  teamQuestResults: TeamQuestResultListRelationFilter
  teamQuests: TeamQuestListRelationFilter
  test: TestListRelationFilter
  testPracticeResults: TestPracticeResultListRelationFilter
  testPractices: TestPracticeListRelationFilter
  testResults: TestResultListRelationFilter
  text: StringFilter
  textEditorResults: TextEditorResultListRelationFilter
  texteditors: TextEditorListRelationFilter
  totalPoints: IntNullableFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input LessonWhereUniqueInput {
  AND: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  assignment: BoolNullableFilter
  challengeResults: ChallengeResultListRelationFilter
  challenge_num: IntNullableFilter
  change: StringNullableFilter
  chats: ChatListRelationFilter
  constructionResults: ConstructionResultListRelationFilter
  constructions: ConstructionListRelationFilter
  coursePage: CoursePageWhereInput
  coursePageID: StringFilter
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  documentResults: DocumentResultListRelationFilter
  documents: DocumentListRelationFilter
  examResults: ExamResultListRelationFilter
  exams: ExamListRelationFilter
  feedback: FeedbackListRelationFilter
  forum: ForumWhereInput
  forumId: String
  hasSecret: BoolNullableFilter
  id: String
  image: StringNullableFilter
  lessonResults: LessonResultListRelationFilter
  map: JsonNullableListFilter
  miniforums: MiniForumListRelationFilter
  name: StringFilter
  newTests: NewTestListRelationFilter
  notes: NoteListRelationFilter
  number: IntNullableFilter
  offers: OfferListRelationFilter
  open: BoolNullableFilter
  problemResults: ProblemResultListRelationFilter
  problems: ProblemListRelationFilter
  published: BoolNullableFilter
  quizResults: QuizResultListRelationFilter
  quizes: QuizListRelationFilter
  short_structure: JsonNullableFilter
  shotResults: ShotResultListRelationFilter
  shots: ShotListRelationFilter
  structure: JsonNullableFilter
  teamQuestResults: TeamQuestResultListRelationFilter
  teamQuests: TeamQuestListRelationFilter
  test: TestListRelationFilter
  testPracticeResults: TestPracticeResultListRelationFilter
  testPractices: TestPracticeListRelationFilter
  testResults: TestResultListRelationFilter
  text: StringFilter
  textEditorResults: TextEditorResultListRelationFilter
  texteditors: TextEditorListRelationFilter
  totalPoints: IntNullableFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

enum Level {
  ADVANCED
  STANDARD
}

input Mark {
  level: Int
  message: String
  name: String
}

input MarksList {
  marksList: [Mark]
}

type Message {
  comment: String
  coursePageId: String
  createdAt: DateTime!
  id: String!
  link: String
  subject: String
  text: String
  updatedAt: DateTime!
  user: User
  userId: String
}

input MessageElement {
  author: String
  image: String
  name: String
  number: Int
  reactions: [Reaction]
  text: String
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  comment: StringNullableFilter
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  link: StringNullableFilter
  subject: StringNullableFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input MessageWhereUniqueInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  comment: StringNullableFilter
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  id: String
  link: StringNullableFilter
  subject: StringNullableFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input Messages {
  messagesList: [MessageElement]
}

type MiniForum {
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonId: String
  statements(after: StatementWhereUniqueInput, before: StatementWhereUniqueInput, first: Int, last: Int): [Statement!]!
  type: String
  updatedAt: DateTime!
  user: User
  userId: String
  value: String
}

input MiniForumListRelationFilter {
  every: MiniForumWhereInput
  none: MiniForumWhereInput
  some: MiniForumWhereInput
}

input MiniForumOrderByRelationAggregateInput {
  _count: SortOrder
}

input MiniForumWhereInput {
  AND: [MiniForumWhereInput!]
  NOT: [MiniForumWhereInput!]
  OR: [MiniForumWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  statements: StatementListRelationFilter
  text: StringNullableFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
  value: StringNullableFilter
}

input MiniForumWhereUniqueInput {
  AND: [MiniForumWhereInput!]
  NOT: [MiniForumWhereInput!]
  OR: [MiniForumWhereInput!]
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  statements: StatementListRelationFilter
  text: StringNullableFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
  value: StringNullableFilter
}

input Module {
  lessonsInModule: [LessonInModule]
  name: String
  number: Int
}

input Modules {
  modules: [Module]
}

type Mutation {
  addToTeam(id: String): User
  addUserToCourse(coursePageId: String, email: String): User
  advancedSignup(careerTrackID: String, company: String, country: String, email: String, isFamiliar: Boolean, name: String, number: String, password: String, status: Status, surname: String, traffic_sources: Visits, uniID: String): AuthPayload
  botSignup(email: String, name: String, number: String, password: String): AuthPayload
  checkAssignment(checked: Boolean, id: String): LessonResult
  copyLesson(coursePageId: String!, id: String!): Lesson
  createBotDialogue(journey: [String], source: String): BotDialogue
  createBusinessClient(comment: String, country: String, coursePageId: String, email: String, name: String, number: String, sales_cycle: SalesCycle, source: String, surname: String, type: String): User
  createCertificate(coursePageId: String, studentId: String): Certificate
  createChallengeResult(correct: Int, lesson: String, time: Int, wrong: Int): ChallengeResult
  createChat(lessonId: String, messages: Messages, name: String): Chat
  createClause(commentary: String, documentId: String, keywords: [String], number: Int, sample: String, title: String): Clause
  createCommunityMember(email: String, name: String, number: String, subscription: String, surname: String): PaymentInfo2
  createConfUser(conf_number: Int, email: String): ConfUser
  createConstruction(answer: [String], columnsNum: Int, elements: ElementsList, hasText: Boolean, hint: String, lessonId: String, name: String, text: String, type: String, variants: [String]): Construction
  createConstructionResult(answer: String, attempts: Int, constructionId: String, inputs: [String], lessonId: String): ConstructionResult
  createCoursePage(audience: String, courseType: String, description: String, image: String, published: Boolean, result: String, title: String): CoursePage
  createCourseVisit(coursePageId: String, studentId: String, visitsNumber: Int): CourseVisit
  createDocument(lessonId: String, title: String): Document
  createDocumentResult(answers: [String], documentId: String, drafts: [String], lessonId: String): DocumentResult
  createEmailCampaign(content: String, emails: EmailsList, name: String): EmailCampaign
  createEmailReminder(coursePageId: String, emailCampaignId: String, gap: Int, link: String, userId: String): EmailReminder
  createFeedback(lessonId: String, studentId: String, text: String): Feedback
  createForum(lessonId: String, text: String): Forum
  createGrowthArea(marks: MarksList, maxProgress: Int, name: String!): GrowthArea
  createLawrdle(active: Boolean, authorId: String, buttonText: String, coursePageId: String, link: String, story: String, tags: [String], word: String): Lawrdle
  createLesson(coursePageID: String, description: String, name: String, number: Int, text: String): Lesson
  createLessonResult(lessonID: String, visitsNumber: Int): LessonResult
  createMiniForum(lessonId: String, type: String, value: String): MiniForum
  createMiniStatement(miniforumId: String, text: String): Statement
  createNewTest(answers: [String], comments: [String], correct: [Boolean], ifRight: String, ifWrong: String, lessonId: String, question: [String], type: String): NewTest
  createNote(lessonId: String, text: String): Note
  createOffer(courseId: String, discountPrice: Int, header: String, lessonId: String, price: Int, text: String, type: String): Offer
  createOrder(comment: String, coursePageId: String, price: Int, promocode: String, userId: String): PaymentInfo
  createPost(image: String, summary: String, text: String, title: String): Post
  createPrivateOrder(coursePageId: String, promocode: String, userId: String): PaymentInfo
  createProblem(lessonId: String, steps: ProblemStructure, text: String): Problem
  createProblemResult(answer: String, lessonId: String, problemID: String, revealed: [String]): ProblemResult
  createProgram(audience: String, description: String, goals: [String], header: [String], image: String, methods: String, nextStart: DateTime, price: Int, result: String, subheader: [String], title: String): Program
  createQuiz(answer: String, ifRight: String, ifWrong: String, lessonId: String, question: String, type: String): Quiz
  createQuizResult(answer: String, correct: Boolean, lessonId: String, quiz: String): QuizResult
  createRating(forumId: String, rating: Int): Rating
  createShot(comments: [String], lessonId: String, parts: [String], title: String): Shot
  createShotResult(answer: String, lessonId: String, shotId: String): ShotResult
  createStatement(forumId: String, miniforumId: String, text: String): Statement
  createTeam(name: String): Team
  createTeamQuest(introduction: String, lessonId: String, solution: String, tasks: QuestList): TeamQuest
  createTeamQuestResult(answer: String, lessonId: String, teamQuestId: String): TeamQuestResult
  createTestPractice(failureText: String, intro: String, lessonId: String, successText: String, tasks: [String], tasksNum: Int, text: String): TestPractice
  createTestPracticeResult(correct: Int, lessonId: String, tasks: [String], testPracticeId: String): TestPracticeResult
  createTestResult(answer: String, lessonID: String, testID: String): TestResult
  createTextEditor(lessonId: String, name: String, text: String, totalMistakes: Int): TextEditor
  createTextEditorResult(attempts: Int, correct: String, guess: String, lessonId: String, result: Boolean, textEditorId: String, type: String, wrong: String): TextEditorResult
  createUseful(buttonText: String, header: String, image: String, link: String, name: String, tags: [String]): Useful
  createUserLevel(consumedContent: ConsumedContentList, isProgressPublic: Boolean, level: Float, myProgress: MyProgressList): UserLevel
  deleteChat(id: String): Chat
  deleteClause(id: String): Clause
  deleteClient(id: String): BusinessClient
  deleteConstruction(id: String): Construction
  deleteDocument(id: String): Document
  deleteEmailCampaign(id: String): EmailCampaign
  deleteEmailReminder(id: String): EmailReminder
  deleteGrowthArea(id: String!): GrowthArea
  deleteLesson(id: String): Lesson
  deleteLessonResult(id: String): LessonResult
  deleteNewTest(id: String): NewTest
  deleteNote(id: String): Note
  deleteOrder(id: String): Order
  deletePost(id: String): Post
  deleteProblem(id: String): Problem
  deleteQuiz(id: String): Quiz
  deleteShot(id: String): Shot
  deleteStatement(id: String): Statement
  deleteTextEditor(id: String): TextEditor
  deleteUserLevel(id: String): UserLevel
  enrollOnCourse(coursePageId: String, id: String): User
  publishCourse(id: String, published: Boolean): CoursePage
  recordSession(id: String, traffic_sources: Visits): User
  remind(id: String, reminders: [DateTime]): CourseVisit
  requestReset(email: String): AuthMessage
  resetPassword(confirmPassword: String, password: String, resetToken: String): User
  sendBusinessClientEmail(communication_history: ClientMessages, id: String): BusinessClient
  sendEmailToStudent(comment: String, id: String, info: EmailInfo, reminders: [DateTime]): CourseVisit
  sendMessage(comment: String, coursePageId: String, link: String, subject: String, text: String, userId: String): Message
  signin(email: String, password: String, traffic_sources: Visits): AuthPayload
  signout: SignOut
  signup(careerTrackID: String, company: String, country: String, email: String, isFamiliar: Boolean, name: String, number: String, password: String, referal: String, status: Status, surname: String, traffic_sources: Visits, uniID: String): AuthPayload
  textBusinessClient(comment: String, id: String): BusinessClient
  textUser(comment: String, id: String): User
  updateActiveUser(active: Boolean, email: String): User
  updateBotDialogue(id: String, journey: [String], rating: Int): BotDialogue
  updateBusinessClient(comment: String, communication_history: ClientMessages, id: String, number: String, sales_cycle: SalesCycle, tags: [String]): BusinessClient
  updateChat(id: String, isSecret: Boolean, link_clicks: Int, messages: Messages, name: String): Chat
  updateClause(commentary: String, id: String, keywords: [String], number: Int, sample: String, text: String): Clause
  updateConfUser(id: String, name: String, surname: String): ConfUser
  updateConstruction(answer: [String], columnsNum: Int, complexity: Int, elements: ElementsList, hint: String, id: String, name: String, type: String, variants: [String]): Construction
  updateCoursePage(audience: String, authors: String, currency: String, description: String, discountPrice: Int, goals: [String], header: [String], id: String, image: String, methods: String, modules: Modules, news: String, nextStart: DateTime, price: Int, prices: Prices, promocode: PromocodeList, promotionId: String, result: String, reviews: ReviewsList, subheader: [String], tariffs: String, title: String, uptodateAt: DateTime, video: String): CoursePage
  updateCourseVisit(id: String, visitsNumber: Int): CourseVisit
  updateEmailCampaign(content: String, emails: EmailsList, id: String, name: String): EmailCampaign
  updateEmailReminder(emailsSent: [String], id: String): EmailReminder
  updateForum(id: String, text: String): Forum
  updateGrowthArea(id: String!, marks: MarksList, maxProgress: Int, name: String): GrowthArea
  updateLesson(assignment: Boolean, audience: String, challenge_num: Int, change: String, description: String, hasSecret: Boolean, id: String, name: String, number: Int, open: Boolean, short_structure: LessonStructure, structure: LessonStructure, tariffs: String, text: String, totalPoints: Int, type: String): Lesson
  updateLessonResult(id: String, progress: Int, visitsNumber: Int): LessonResult
  updateMiniStatement(comments: [String], id: String): Statement
  updateNewTest(answers: [String], comments: [String], complexity: Int, correct: [Boolean], id: String, ifRight: String, ifWrong: String, next: NextType, question: [String], type: String): NewTest
  updateNote(complexity: Int, id: String, isSecret: Boolean, link_clicks: Int, next: NextType, text: String, type: String): Note
  updateOffer(courseId: String, discountPrice: Int, header: String, id: String, price: Int, text: String, type: String): Offer
  updateOrder(id: String, isPaid: Boolean): Order
  updateOrderAuto(id: String, userId: String): Order
  updatePost(id: String, image: String, likes: Int, summary: String, tags: [String], text: String, title: String): Post
  updateProblem(complexity: Int, id: String, isSecret: Boolean, steps: ProblemStructure, text: String): Problem
  updateProgram(audience: String, authors: String, currency: String, description: String, goals: [String], header: [String], id: String, image: String, methods: String, months: Int, news: String, nextStart: DateTime, price: Int, promotionId: String, result: String, reviews: ReviewsList, subheader: [String], syllabus: Syllabus, title: String, video: String): Program
  updatePublished(id: String, published: Boolean): Lesson
  updateQuiz(answer: String, check: String, complexity: Int, id: String, ifRight: String, ifWrong: String, lessonId: String, next: NextType, question: String): Quiz
  updateRating(id: String, rating: Int): Rating
  updateScore(id: String, score: Int): User
  updateShot(comments: [String], id: String, parts: [String], title: String): Shot
  updateStatement(comments: [String], id: String): Statement
  updateStatementChecked(answered: Boolean, id: String): Statement
  updateTextEditor(complexity: Int, id: String, name: String, text: String, totalMistakes: Int): TextEditor
  updateUser(active: Boolean, comment: String, description: String, email: String, id: String, image: String, isFamiliar: Boolean, name: String, number: String, status: Status, surname: String, tags: [String], work: String): User
  updateUserLevel(consumedContent: ConsumedContentList, id: String, isProgressPublic: Boolean, learningStreak: [DateTime], level: Float, myProgress: MyProgressList): UserLevel
}

input MyProgress {
  name: String
  progress: Int
}

input MyProgressList {
  progressList: [MyProgress]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input NestedEnumCourseTypeNullableFilter {
  equals: CourseType
  in: [CourseType!]
  not: NestedEnumCourseTypeNullableFilter
  notIn: [CourseType!]
}

input NestedEnumLevelNullableFilter {
  equals: Level
  in: [Level!]
  not: NestedEnumLevelNullableFilter
  notIn: [Level!]
}

input NestedEnumPageViewFilter {
  equals: PageView
  in: [PageView!]
  not: NestedEnumPageViewFilter
  notIn: [PageView!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type NewTest {
  answers: [String!]!
  comments: [String!]!
  complexity: Int
  correct: [Boolean!]!
  createdAt: DateTime!
  id: String!
  ifRight: String
  ifWrong: String
  lesson: Lesson
  lessonID: String
  lessonId: String
  next: Json
  question: [String!]!
  testResults(after: TestResultWhereUniqueInput, before: TestResultWhereUniqueInput, first: Int, last: Int): [TestResult!]!
  type: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input NewTestListRelationFilter {
  every: NewTestWhereInput
  none: NewTestWhereInput
  some: NewTestWhereInput
}

input NewTestOrderByRelationAggregateInput {
  _count: SortOrder
}

input NewTestOrderByWithRelationInput {
  answers: SortOrder
  comments: SortOrder
  complexity: SortOrderInput
  correct: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ifRight: SortOrderInput
  ifWrong: SortOrderInput
  lesson: LessonOrderByWithRelationInput
  lessonID: SortOrderInput
  lessonId: SortOrderInput
  next: SortOrderInput
  question: SortOrder
  testResults: TestResultOrderByRelationAggregateInput
  type: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input NewTestWhereInput {
  AND: [NewTestWhereInput!]
  NOT: [NewTestWhereInput!]
  OR: [NewTestWhereInput!]
  answers: StringNullableListFilter
  comments: StringNullableListFilter
  complexity: IntNullableFilter
  correct: BoolNullableListFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ifRight: StringNullableFilter
  ifWrong: StringNullableFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  next: JsonNullableFilter
  question: StringNullableListFilter
  testResults: TestResultListRelationFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input NewTestWhereUniqueInput {
  AND: [NewTestWhereInput!]
  NOT: [NewTestWhereInput!]
  OR: [NewTestWhereInput!]
  answers: StringNullableListFilter
  comments: StringNullableListFilter
  complexity: IntNullableFilter
  correct: BoolNullableListFilter
  createdAt: DateTimeFilter
  id: String
  ifRight: StringNullableFilter
  ifWrong: StringNullableFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  next: JsonNullableFilter
  question: StringNullableListFilter
  testResults: TestResultListRelationFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input NextFalseType {
  type: String
  value: String
}

input NextTrueType {
  type: String
  value: String
}

input NextType {
  false: NextFalseType
  true: NextTrueType
}

type Note {
  complexity: Int
  createdAt: DateTime!
  id: String!
  isSecret: Boolean
  lesson: Lesson
  lessonID: String
  lessonId: String
  link_clicks: Int
  next: Json
  text: String!
  type: String
  updatedAt: DateTime!
  user: User
  userId: String
}

input NoteListRelationFilter {
  every: NoteWhereInput
  none: NoteWhereInput
  some: NoteWhereInput
}

input NoteOrderByRelationAggregateInput {
  _count: SortOrder
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  chat: BoolNullableFilter
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isSecret: BoolNullableFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  link_clicks: IntNullableFilter
  next: JsonNullableFilter
  text: StringFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input NoteWhereUniqueInput {
  AND: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  chat: BoolNullableFilter
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  id: String
  isSecret: BoolNullableFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  link_clicks: IntNullableFilter
  next: JsonNullableFilter
  text: StringFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

enum NullsOrder {
  first
  last
}

type Offer {
  courseId: String
  createdAt: DateTime!
  discountPrice: Int
  header: String!
  id: String!
  lesson: Lesson
  lessonId: String
  price: Int
  program: Program
  programId: String
  text: String!
  type: String
  updatedAt: DateTime!
  user: User
  userId: String
}

input OfferListRelationFilter {
  every: OfferWhereInput
  none: OfferWhereInput
  some: OfferWhereInput
}

input OfferOrderByRelationAggregateInput {
  _count: SortOrder
}

input OfferOrderByWithRelationInput {
  courseId: SortOrderInput
  createdAt: SortOrder
  discountPrice: SortOrderInput
  header: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonId: SortOrderInput
  price: SortOrderInput
  program: ProgramOrderByWithRelationInput
  programId: SortOrderInput
  text: SortOrder
  type: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
}

input OfferWhereInput {
  AND: [OfferWhereInput!]
  NOT: [OfferWhereInput!]
  OR: [OfferWhereInput!]
  courseId: StringNullableFilter
  createdAt: DateTimeFilter
  discountPrice: IntNullableFilter
  header: StringFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  price: IntNullableFilter
  program: ProgramWhereInput
  programId: StringNullableFilter
  text: StringFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input OfferWhereUniqueInput {
  AND: [OfferWhereInput!]
  NOT: [OfferWhereInput!]
  OR: [OfferWhereInput!]
  courseId: StringNullableFilter
  createdAt: DateTimeFilter
  discountPrice: IntNullableFilter
  header: StringFilter
  id: String
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  price: IntNullableFilter
  program: ProgramWhereInput
  programId: StringNullableFilter
  text: StringFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

type Order {
  comment: String
  coursePage: CoursePage!
  coursePageId: String!
  createdAt: DateTime!
  id: String!
  isPaid: Boolean
  level: Level
  paymentID: String
  price: Int
  promocode: String
  team: Team
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByWithRelationInput {
  comment: SortOrderInput
  coursePage: CoursePageOrderByWithRelationInput
  coursePageId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  isPaid: SortOrderInput
  level: SortOrderInput
  paymentID: SortOrderInput
  price: SortOrderInput
  program: ProgramOrderByWithRelationInput
  programId: SortOrderInput
  promocode: SortOrderInput
  team: TeamOrderByWithRelationInput
  teamId: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  comment: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isPaid: BoolNullableFilter
  level: EnumLevelNullableFilter
  paymentID: StringNullableFilter
  price: IntNullableFilter
  program: ProgramWhereInput
  programId: StringNullableFilter
  promocode: StringNullableFilter
  team: TeamWhereInput
  teamId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input OrderWhereUniqueInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  comment: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  id: String
  isPaid: BoolNullableFilter
  level: EnumLevelNullableFilter
  paymentID: StringNullableFilter
  price: IntNullableFilter
  program: ProgramWhereInput
  programId: StringNullableFilter
  promocode: StringNullableFilter
  team: TeamWhereInput
  teamId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

enum PageView {
  CONF
  COURSE
}

type PaymentInfo {
  order: Order
  url: String
}

type PaymentInfo2 {
  communityMember: CommunityMember
  url: String
}

"""The first Star Wars episodes released"""
enum Permission {
  ADMIN
  USER
}

input PointAListRelationFilter {
  every: PointAWhereInput
  none: PointAWhereInput
  some: PointAWhereInput
}

input PointAOrderByRelationAggregateInput {
  _count: SortOrder
}

input PointATestListRelationFilter {
  every: PointATestWhereInput
  none: PointATestWhereInput
  some: PointATestWhereInput
}

input PointATestOrderByRelationAggregateInput {
  _count: SortOrder
}

input PointATestWhereInput {
  AND: [PointATestWhereInput!]
  NOT: [PointATestWhereInput!]
  OR: [PointATestWhereInput!]
  answer1: StringFilter
  answer1Correct: StringFilter
  answer2: StringFilter
  answer2Correct: StringFilter
  answer3: StringNullableFilter
  answer3Correct: StringNullableFilter
  answer4: StringNullableFilter
  answer4Correct: StringNullableFilter
  coursePage: CoursePageWhereInput
  coursePageID: StringNullableFilter
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  pointA: PointAListRelationFilter
  question: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input PointAWhereInput {
  AND: [PointAWhereInput!]
  NOT: [PointAWhereInput!]
  OR: [PointAWhereInput!]
  coursePage: CoursePageWhereInput
  coursePageID: StringNullableFilter
  coursePageId: StringFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  pointATest: PointATestListRelationFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type Post {
  coursePage: CoursePage
  createdAt: DateTime!
  emailCampaign: EmailCampaign
  emailCampaignId: String
  id: String!
  image: String
  language: String
  leadin: String
  lessonId: String
  likes: Int
  summary: String
  tags: [String!]!
  text: String
  title: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  coursePage: CoursePageOrderByWithRelationInput
  coursePageId: SortOrderInput
  createdAt: SortOrder
  emailCampaign: EmailCampaignOrderByWithRelationInput
  emailCampaignId: SortOrderInput
  id: SortOrder
  image: SortOrderInput
  language: SortOrderInput
  leadin: SortOrderInput
  lessonId: SortOrderInput
  likes: SortOrderInput
  summary: SortOrderInput
  tags: SortOrder
  text: SortOrderInput
  title: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  coursePage: CoursePageWhereInput
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  emailCampaign: EmailCampaignWhereInput
  emailCampaignId: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  language: StringNullableFilter
  leadin: StringNullableFilter
  lessonId: StringNullableFilter
  likes: IntNullableFilter
  summary: StringNullableFilter
  tags: StringNullableListFilter
  text: StringNullableFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  coursePage: CoursePageWhereInput
  coursePageId: StringNullableFilter
  createdAt: DateTimeFilter
  emailCampaign: EmailCampaignWhereInput
  emailCampaignId: StringNullableFilter
  id: String
  image: StringNullableFilter
  language: StringNullableFilter
  leadin: StringNullableFilter
  lessonId: StringNullableFilter
  likes: IntNullableFilter
  summary: StringNullableFilter
  tags: StringNullableListFilter
  text: StringNullableFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input Price {
  buttonText: String
  currency: String
  description: String
  discount: Float
  name: String
  places: Int
  price: Int
  timer: String
}

input Prices {
  prices: [Price]
}

type Problem {
  complexity: Int
  createdAt: DateTime!
  id: String!
  isSecret: Boolean
  lesson: Lesson!
  lessonID: String!
  lessonId: String!
  nodeID: String
  nodeType: String
  problemResults(after: ProblemResultWhereUniqueInput, before: ProblemResultWhereUniqueInput, first: Int, last: Int): [ProblemResult!]!
  steps: Json
  text: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input ProblemItem {
  id: String
  index: Int
  next: NextType
  type: String
}

input ProblemListRelationFilter {
  every: ProblemWhereInput
  none: ProblemWhereInput
  some: ProblemWhereInput
}

input ProblemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProblemOrderByWithRelationInput {
  answer: SortOrderInput
  complexity: SortOrderInput
  createdAt: SortOrder
  hints: SortOrderInput
  hintsList: SortOrder
  id: SortOrder
  isSecret: SortOrderInput
  lesson: LessonOrderByWithRelationInput
  lessonID: SortOrder
  lessonId: SortOrder
  nodeID: SortOrderInput
  nodeType: SortOrderInput
  problemResults: ProblemResultOrderByRelationAggregateInput
  solution: SortOrderInput
  solutionList: SortOrder
  steps: SortOrderInput
  text: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

type ProblemResult {
  answer: String
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonID: String
  lessonId: String
  problem: Problem
  problemID: String
  problemId: String
  revealed: [String!]!
  student: User!
  studentId: String!
  updatedAt: DateTime!
}

input ProblemResultListRelationFilter {
  every: ProblemResultWhereInput
  none: ProblemResultWhereInput
  some: ProblemResultWhereInput
}

input ProblemResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProblemResultOrderByWithRelationInput {
  answer: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonID: SortOrderInput
  lessonId: SortOrderInput
  problem: ProblemOrderByWithRelationInput
  problemID: SortOrderInput
  problemId: SortOrderInput
  revealed: SortOrder
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  updatedAt: SortOrder
}

input ProblemResultWhereInput {
  AND: [ProblemResultWhereInput!]
  NOT: [ProblemResultWhereInput!]
  OR: [ProblemResultWhereInput!]
  answer: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  problem: ProblemWhereInput
  problemID: StringNullableFilter
  problemId: StringNullableFilter
  revealed: StringNullableListFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input ProblemResultWhereUniqueInput {
  AND: [ProblemResultWhereInput!]
  NOT: [ProblemResultWhereInput!]
  OR: [ProblemResultWhereInput!]
  answer: StringNullableFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  problem: ProblemWhereInput
  problemID: StringNullableFilter
  problemId: StringNullableFilter
  revealed: StringNullableListFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input ProblemStructure {
  problemItems: [ProblemItem]
}

input ProblemWhereInput {
  AND: [ProblemWhereInput!]
  NOT: [ProblemWhereInput!]
  OR: [ProblemWhereInput!]
  answer: StringNullableFilter
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  hints: StringNullableFilter
  hintsList: StringNullableListFilter
  id: StringFilter
  isSecret: BoolNullableFilter
  lesson: LessonWhereInput
  lessonID: StringFilter
  lessonId: StringFilter
  nodeID: StringNullableFilter
  nodeType: StringNullableFilter
  problemResults: ProblemResultListRelationFilter
  solution: StringNullableFilter
  solutionList: StringNullableListFilter
  steps: JsonNullableFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ProblemWhereUniqueInput {
  AND: [ProblemWhereInput!]
  NOT: [ProblemWhereInput!]
  OR: [ProblemWhereInput!]
  answer: StringNullableFilter
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  hints: StringNullableFilter
  hintsList: StringNullableListFilter
  id: String
  isSecret: BoolNullableFilter
  lesson: LessonWhereInput
  lessonID: StringFilter
  lessonId: StringFilter
  nodeID: StringNullableFilter
  nodeType: StringNullableFilter
  problemResults: ProblemResultListRelationFilter
  solution: StringNullableFilter
  solutionList: StringNullableListFilter
  steps: JsonNullableFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type Program {
  audience: String
  batch: String
  coursePages(after: CoursePageWhereUniqueInput, before: CoursePageWhereUniqueInput, first: Int, last: Int): [CoursePage!]!
  createdAt: DateTime!
  currency: String
  description: String!
  discountPrice: Int
  goals: [String!]!
  header: [String!]!
  id: String!
  image: String!
  installments: Int
  methods: String
  months: Int
  news: String
  nextStart: DateTime
  offers(after: OfferWhereUniqueInput, before: OfferWhereUniqueInput, first: Int, last: Int): [Offer!]!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  price: Int
  promocode: Json
  promotionId: String
  published: Boolean
  result: String
  reviews: Json
  subheader: [String!]!
  syllabus: Json
  tags: [String!]!
  tariffs: String
  title: String!
  updatedAt: DateTime!
  uptodateAt: DateTime
  video: String
}

input ProgramListRelationFilter {
  every: ProgramWhereInput
  none: ProgramWhereInput
  some: ProgramWhereInput
}

input ProgramModule {
  header: String
  topic: [String]
}

input ProgramOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramOrderByWithRelationInput {
  audience: SortOrderInput
  batch: SortOrderInput
  coursePages: CoursePageOrderByRelationAggregateInput
  createdAt: SortOrder
  currency: SortOrderInput
  description: SortOrder
  discountPrice: SortOrderInput
  goals: SortOrder
  header: SortOrder
  id: SortOrder
  image: SortOrder
  installments: SortOrderInput
  methods: SortOrderInput
  months: SortOrderInput
  news: SortOrderInput
  nextStart: SortOrderInput
  offers: OfferOrderByRelationAggregateInput
  orders: OrderOrderByRelationAggregateInput
  price: SortOrderInput
  promocode: SortOrderInput
  promotionId: SortOrderInput
  published: SortOrderInput
  result: SortOrderInput
  reviews: SortOrderInput
  subheader: SortOrder
  syllabus: SortOrderInput
  tags: SortOrder
  tariffs: SortOrderInput
  title: SortOrder
  updatedAt: SortOrder
  uptodateAt: SortOrderInput
  video: SortOrderInput
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  audience: StringNullableFilter
  batch: StringNullableFilter
  coursePages: CoursePageListRelationFilter
  createdAt: DateTimeFilter
  currency: StringNullableFilter
  description: StringFilter
  discountPrice: IntNullableFilter
  goals: StringNullableListFilter
  header: StringNullableListFilter
  id: StringFilter
  image: StringFilter
  installments: IntNullableFilter
  methods: StringNullableFilter
  months: IntNullableFilter
  news: StringNullableFilter
  nextStart: DateTimeNullableFilter
  offers: OfferListRelationFilter
  orders: OrderListRelationFilter
  price: IntNullableFilter
  promocode: JsonNullableFilter
  promotionId: StringNullableFilter
  published: BoolNullableFilter
  result: StringNullableFilter
  reviews: JsonNullableFilter
  subheader: StringNullableListFilter
  syllabus: JsonNullableFilter
  tags: StringNullableListFilter
  tariffs: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uptodateAt: DateTimeNullableFilter
  video: StringNullableFilter
}

input ProgramWhereUniqueInput {
  AND: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  audience: StringNullableFilter
  batch: StringNullableFilter
  coursePages: CoursePageListRelationFilter
  createdAt: DateTimeFilter
  currency: StringNullableFilter
  description: StringFilter
  discountPrice: IntNullableFilter
  goals: StringNullableListFilter
  header: StringNullableListFilter
  id: String
  image: StringFilter
  installments: IntNullableFilter
  methods: StringNullableFilter
  months: IntNullableFilter
  news: StringNullableFilter
  nextStart: DateTimeNullableFilter
  offers: OfferListRelationFilter
  orders: OrderListRelationFilter
  price: IntNullableFilter
  promocode: JsonNullableFilter
  promotionId: StringNullableFilter
  published: BoolNullableFilter
  result: StringNullableFilter
  reviews: JsonNullableFilter
  subheader: StringNullableListFilter
  syllabus: JsonNullableFilter
  tags: StringNullableListFilter
  tariffs: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uptodateAt: DateTimeNullableFilter
  video: StringNullableFilter
}

input Promocode {
  name: String
  value: Float
}

input PromocodeList {
  promocodes: [Promocode]
}

type Query {
  botDialogue(where: BotDialogueWhereUniqueInput!): BotDialogue
  botDialogues(after: BotDialogueWhereUniqueInput, before: BotDialogueWhereUniqueInput, first: Int, last: Int, orderBy: [BotDialogueOrderByWithRelationInput!], where: BotDialogueWhereInput): [BotDialogue!]!
  businessClients(after: BusinessClientWhereUniqueInput, before: BusinessClientWhereUniqueInput, first: Int, last: Int, orderBy: [BusinessClientOrderByWithRelationInput!], where: BusinessClientWhereInput): [BusinessClient!]!
  certificate(where: CertificateWhereUniqueInput!): Certificate
  certificates(after: CertificateWhereUniqueInput, before: CertificateWhereUniqueInput, first: Int, last: Int, orderBy: [CertificateOrderByWithRelationInput!], where: CertificateWhereInput): [Certificate!]!
  challengeResults(after: ChallengeResultWhereUniqueInput, before: ChallengeResultWhereUniqueInput, first: Int, last: Int, orderBy: [ChallengeResultOrderByWithRelationInput!], where: ChallengeResultWhereInput): [ChallengeResult!]!
  chat(where: ChatWhereUniqueInput!): Chat
  chats(after: ChatWhereUniqueInput, before: ChatWhereUniqueInput, first: Int, last: Int, orderBy: [ChatOrderByWithRelationInput!], where: ChatWhereInput): [Chat!]!
  coursePage(where: CoursePageWhereUniqueInput!): CoursePage
  coursePages(after: CoursePageWhereUniqueInput, before: CoursePageWhereUniqueInput, first: Int, last: Int, orderBy: [CoursePageOrderByWithRelationInput!], where: CoursePageWhereInput): [CoursePage!]!
  courseVisit(where: CourseVisitWhereUniqueInput!): CourseVisit
  courseVisits(after: CourseVisitWhereUniqueInput, before: CourseVisitWhereUniqueInput, first: Int, last: Int, orderBy: [CourseVisitOrderByWithRelationInput!], where: CourseVisitWhereInput): [CourseVisit!]!
  emailCampaign(where: EmailCampaignWhereUniqueInput!): EmailCampaign
  emailCampaigns(after: EmailCampaignWhereUniqueInput, before: EmailCampaignWhereUniqueInput, first: Int, last: Int, orderBy: [EmailCampaignOrderByWithRelationInput!], where: EmailCampaignWhereInput): [EmailCampaign!]!
  emailReminder(where: EmailReminderWhereUniqueInput!): EmailReminder
  emailReminders(after: EmailReminderWhereUniqueInput, before: EmailReminderWhereUniqueInput, first: Int, last: Int, orderBy: [EmailReminderOrderByWithRelationInput!], where: EmailReminderWhereInput): [EmailReminder!]!
  feedbacks(after: FeedbackWhereUniqueInput, before: FeedbackWhereUniqueInput, first: Int, last: Int, orderBy: [FeedbackOrderByWithRelationInput!], where: FeedbackWhereInput): [Feedback!]!
  growthArea(where: GrowthAreaWhereUniqueInput!): GrowthArea
  growthAreas(after: GrowthAreaWhereUniqueInput, before: GrowthAreaWhereUniqueInput, first: Int, last: Int, orderBy: [GrowthAreaOrderByWithRelationInput!], where: GrowthAreaWhereInput): [GrowthArea!]!
  lawrdle(where: LawrdleWhereUniqueInput!): Lawrdle
  lawrdles(after: LawrdleWhereUniqueInput, before: LawrdleWhereUniqueInput, first: Int, last: Int, orderBy: [LawrdleOrderByWithRelationInput!], where: LawrdleWhereInput): [Lawrdle!]!
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessonResults(after: LessonResultWhereUniqueInput, before: LessonResultWhereUniqueInput, first: Int, last: Int, orderBy: [LessonResultOrderByWithRelationInput!], where: LessonResultWhereInput): [LessonResult!]!
  lessons(after: LessonWhereUniqueInput, before: LessonWhereUniqueInput, first: Int, last: Int, where: LessonWhereInput): [Lesson!]!
  me: User
  miniForums(after: MiniForumWhereUniqueInput, before: MiniForumWhereUniqueInput, first: Int, last: Int, where: MiniForumWhereInput): [MiniForum!]!
  newTest(where: NewTestWhereUniqueInput!): NewTest
  offer(where: OfferWhereUniqueInput!): Offer
  offers(after: OfferWhereUniqueInput, before: OfferWhereUniqueInput, first: Int, last: Int, orderBy: [OfferOrderByWithRelationInput!], where: OfferWhereInput): [Offer!]!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int, orderBy: [OrderOrderByWithRelationInput!], where: OrderWhereInput): [Order!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByWithRelationInput!], where: PostWhereInput): [Post!]!
  problemResults(after: ProblemResultWhereUniqueInput, before: ProblemResultWhereUniqueInput, first: Int, last: Int, orderBy: [ProblemResultOrderByWithRelationInput!], where: ProblemResultWhereInput): [ProblemResult!]!
  program(where: ProgramWhereUniqueInput!): Program
  programs(after: ProgramWhereUniqueInput, before: ProgramWhereUniqueInput, first: Int, last: Int, orderBy: [ProgramOrderByWithRelationInput!], where: ProgramWhereInput): [Program!]!
  questResults(lessonId: String, list_of_ids: [String]): QuestResults
  quizResult(where: QuizResultWhereUniqueInput!): QuizResult
  quizResults(after: QuizResultWhereUniqueInput, before: QuizResultWhereUniqueInput, first: Int, last: Int, orderBy: [QuizResultOrderByWithRelationInput!], where: QuizResultWhereInput): [QuizResult!]!
  quizzes(after: QuizWhereUniqueInput, before: QuizWhereUniqueInput, first: Int, last: Int, orderBy: [QuizOrderByWithRelationInput!], where: QuizWhereInput): [Quiz!]!
  rating(where: RatingWhereUniqueInput!): Rating
  ratings(after: RatingWhereUniqueInput, before: RatingWhereUniqueInput, first: Int, last: Int, orderBy: [RatingOrderByWithRelationInput!], where: RatingWhereInput): [Rating!]!
  stats(lessonId: String, userId: String): Stats
  team(where: TeamWhereUniqueInput!): Team
  teams(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int, orderBy: [TeamOrderByWithRelationInput!], where: TeamWhereInput): [Team!]!
  testResult(where: TestResultWhereUniqueInput!): TestResult
  testResults(after: TestResultWhereUniqueInput, before: TestResultWhereUniqueInput, first: Int, last: Int, orderBy: [TestResultOrderByWithRelationInput!], where: TestResultWhereInput): [TestResult!]!
  textEditorResult(where: TextEditorResultWhereUniqueInput!): TextEditorResult
  textEditorResults(after: TextEditorResultWhereUniqueInput, before: TextEditorResultWhereUniqueInput, first: Int, last: Int, orderBy: [TextEditorResultOrderByWithRelationInput!], where: TextEditorResultWhereInput): [TextEditorResult!]!
  useful(where: UsefulWhereUniqueInput!): Useful
  usefuls(after: UsefulWhereUniqueInput, before: UsefulWhereUniqueInput, first: Int, last: Int, where: UsefulWhereInput): [Useful!]!
  user(where: UserWhereUniqueInput!): User
  userLevel(where: UserLevelWhereUniqueInput!): UserLevel
  userLevels(after: UserLevelWhereUniqueInput, before: UserLevelWhereUniqueInput, first: Int, last: Int, orderBy: [UserLevelOrderByWithRelationInput!], where: UserLevelWhereInput): [UserLevel!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByWithRelationInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input QuestElement {
  number: Int
  type: String
  value: String
}

input QuestList {
  questElements: [QuestElement]
}

type QuestResults {
  lessonResults: [LessonResult]
  quizResults: [QuizResult]
  testResults: [TestResult]
}

type Quiz {
  answer: String!
  check: String
  complexity: Int
  createdAt: DateTime!
  id: String!
  ifRight: String
  ifWrong: String
  lesson: Lesson
  lessonID: String
  lessonId: String
  next: Json
  question: String!
  quizResults(after: QuizResultWhereUniqueInput, before: QuizResultWhereUniqueInput, first: Int, last: Int): [QuizResult!]!
  type: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input QuizListRelationFilter {
  every: QuizWhereInput
  none: QuizWhereInput
  some: QuizWhereInput
}

input QuizOrderByRelationAggregateInput {
  _count: SortOrder
}

input QuizOrderByWithRelationInput {
  answer: SortOrder
  check: SortOrderInput
  complexity: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  ifRight: SortOrderInput
  ifWrong: SortOrderInput
  lesson: LessonOrderByWithRelationInput
  lessonID: SortOrderInput
  lessonId: SortOrderInput
  next: SortOrderInput
  question: SortOrder
  quizResults: QuizResultOrderByRelationAggregateInput
  type: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

type QuizResult {
  answer: String
  attempts: Int
  correct: Boolean
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonID: String
  lessonId: String
  quiz: Quiz
  quizId: String
  student: User!
  studentId: String!
  updatedAt: DateTime!
}

input QuizResultListRelationFilter {
  every: QuizResultWhereInput
  none: QuizResultWhereInput
  some: QuizResultWhereInput
}

input QuizResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input QuizResultOrderByWithRelationInput {
  answer: SortOrderInput
  attempts: SortOrderInput
  correct: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonID: SortOrderInput
  lessonId: SortOrderInput
  quiz: QuizOrderByWithRelationInput
  quizId: SortOrderInput
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  updatedAt: SortOrder
}

input QuizResultWhereInput {
  AND: [QuizResultWhereInput!]
  NOT: [QuizResultWhereInput!]
  OR: [QuizResultWhereInput!]
  answer: StringNullableFilter
  attempts: IntNullableFilter
  correct: BoolNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  quiz: QuizWhereInput
  quizId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input QuizResultWhereUniqueInput {
  AND: [QuizResultWhereInput!]
  NOT: [QuizResultWhereInput!]
  OR: [QuizResultWhereInput!]
  answer: StringNullableFilter
  attempts: IntNullableFilter
  correct: BoolNullableFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  quiz: QuizWhereInput
  quizId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input QuizWhereInput {
  AND: [QuizWhereInput!]
  NOT: [QuizWhereInput!]
  OR: [QuizWhereInput!]
  answer: StringFilter
  check: StringNullableFilter
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ifRight: StringNullableFilter
  ifWrong: StringNullableFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  next: JsonNullableFilter
  question: StringFilter
  quizResults: QuizResultListRelationFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input QuizWhereUniqueInput {
  AND: [QuizWhereInput!]
  NOT: [QuizWhereInput!]
  OR: [QuizWhereInput!]
  answer: StringFilter
  check: StringNullableFilter
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  id: String
  ifRight: StringNullableFilter
  ifWrong: StringNullableFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  next: JsonNullableFilter
  question: StringFilter
  quizResults: QuizResultListRelationFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type Rating {
  createdAt: DateTime!
  forum: Forum
  forumId: String
  id: String!
  rating: Int
  updatedAt: DateTime!
  user: User
  userId: String
}

input RatingListRelationFilter {
  every: RatingWhereInput
  none: RatingWhereInput
  some: RatingWhereInput
}

input RatingOrderByRelationAggregateInput {
  _count: SortOrder
}

input RatingOrderByWithRelationInput {
  createdAt: SortOrder
  forum: ForumOrderByWithRelationInput
  forumId: SortOrderInput
  id: SortOrder
  rating: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  createdAt: DateTimeFilter
  forum: ForumWhereInput
  forumId: StringNullableFilter
  id: StringFilter
  rating: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input RatingWhereUniqueInput {
  AND: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  createdAt: DateTimeFilter
  forum: ForumWhereInput
  forumId: StringNullableFilter
  id: String
  rating: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input Reaction {
  comment: String
  image: String
  name: String
  reaction: String
}

input Review {
  image: String
  name: String
  source: String
  text: String
}

input ReviewsList {
  reviews: [Review]
}

input SalesCycle {
  stages: [SalesStage]
}

input SalesStage {
  date: String
  name: String
}

input SandboxListRelationFilter {
  every: SandboxWhereInput
  none: SandboxWhereInput
  some: SandboxWhereInput
}

input SandboxPageGoalListRelationFilter {
  every: SandboxPageGoalWhereInput
  none: SandboxPageGoalWhereInput
  some: SandboxPageGoalWhereInput
}

input SandboxPageGoalOrderByRelationAggregateInput {
  _count: SortOrder
}

input SandboxPageGoalWhereInput {
  AND: [SandboxPageGoalWhereInput!]
  NOT: [SandboxPageGoalWhereInput!]
  OR: [SandboxPageGoalWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  goal: StringFilter
  id: StringFilter
  sandboxPage: SandboxPageWhereInput
  sandboxPageID: StringFilter
  sandboxPageId: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input SandboxPageListRelationFilter {
  every: SandboxPageWhereInput
  none: SandboxPageWhereInput
  some: SandboxPageWhereInput
}

input SandboxPageOrderByRelationAggregateInput {
  _count: SortOrder
}

input SandboxPageWhereInput {
  AND: [SandboxPageWhereInput!]
  NOT: [SandboxPageWhereInput!]
  OR: [SandboxPageWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  image: StringFilter
  sandbox: SandboxListRelationFilter
  sandboxPageGoal: SandboxPageGoalListRelationFilter
  students: StringNullableListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input SandboxWhereInput {
  AND: [SandboxWhereInput!]
  NOT: [SandboxWhereInput!]
  OR: [SandboxWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  likes: IntNullableFilter
  link: StringNullableFilter
  sandboxPage: SandboxPageWhereInput
  sandboxPageID: StringFilter
  sandboxPageId: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
  video: StringNullableFilter
}

type Shot {
  comments: [String!]!
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonID: String
  lessonId: String
  parts: [String!]!
  shotResults(after: ShotResultWhereUniqueInput, before: ShotResultWhereUniqueInput, first: Int, last: Int): [ShotResult!]!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input ShotListRelationFilter {
  every: ShotWhereInput
  none: ShotWhereInput
  some: ShotWhereInput
}

input ShotOrderByRelationAggregateInput {
  _count: SortOrder
}

type ShotResult {
  answer: String!
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonId: String
  shot: Shot
  shotId: String
  student: User!
  studentId: String!
  updatedAt: DateTime!
}

input ShotResultListRelationFilter {
  every: ShotResultWhereInput
  none: ShotResultWhereInput
  some: ShotResultWhereInput
}

input ShotResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShotResultWhereInput {
  AND: [ShotResultWhereInput!]
  NOT: [ShotResultWhereInput!]
  OR: [ShotResultWhereInput!]
  answer: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  shot: ShotWhereInput
  shotID: StringNullableFilter
  shotId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input ShotResultWhereUniqueInput {
  AND: [ShotResultWhereInput!]
  NOT: [ShotResultWhereInput!]
  OR: [ShotResultWhereInput!]
  answer: StringFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  shot: ShotWhereInput
  shotID: StringNullableFilter
  shotId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  updatedAt: DateTimeFilter
}

input ShotWhereInput {
  AND: [ShotWhereInput!]
  NOT: [ShotWhereInput!]
  OR: [ShotWhereInput!]
  comments: StringNullableListFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  parts: StringNullableListFilter
  shotResults: ShotResultListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ShotWhereUniqueInput {
  AND: [ShotWhereInput!]
  NOT: [ShotWhereInput!]
  OR: [ShotWhereInput!]
  comments: StringNullableListFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  parts: StringNullableListFilter
  shotResults: ShotResultListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type SignOut {
  message: String
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

type Statement {
  answered: Boolean
  comments: [String!]!
  createdAt: DateTime!
  forum: Forum
  forumId: String
  id: String!
  text: String
  updatedAt: DateTime!
  user: User
  userId: String
}

input StatementListRelationFilter {
  every: StatementWhereInput
  none: StatementWhereInput
  some: StatementWhereInput
}

input StatementOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatementWhereInput {
  AND: [StatementWhereInput!]
  NOT: [StatementWhereInput!]
  OR: [StatementWhereInput!]
  answered: BoolNullableFilter
  comments: StringNullableListFilter
  createdAt: DateTimeFilter
  forum: ForumWhereInput
  forumId: StringNullableFilter
  id: StringFilter
  miniForum: MiniForumWhereInput
  miniforumId: StringNullableFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input StatementWhereUniqueInput {
  AND: [StatementWhereInput!]
  NOT: [StatementWhereInput!]
  OR: [StatementWhereInput!]
  answered: BoolNullableFilter
  comments: StringNullableListFilter
  createdAt: DateTimeFilter
  forum: ForumWhereInput
  forumId: StringNullableFilter
  id: String
  miniForum: MiniForumWhereInput
  miniforumId: StringNullableFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

type Stats {
  constructionResults: [ConstructionResult]
  documentResults: [DocumentResult]
  feedbacks: [Feedback]
  problemResults: [ProblemResult]
  quizResults: [QuizResult]
  testResults: [TestResult]
  textEditorResults: [TextEditorResult]
}

"""The first Star Wars episodes released"""
enum Status {
  AUTHOR
  HR
  LAWYER
  SAVVY_AUTHOR
  STUDENT
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input Syllabus {
  modules: [ProgramModule]
}

type Team {
  createdAt: DateTime!
  founder: User!
  id: String!
  image: String
  name: String!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  updatedAt: DateTime!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input TeamListRelationFilter {
  every: TeamWhereInput
  none: TeamWhereInput
  some: TeamWhereInput
}

input TeamOrderByRelationAggregateInput {
  _count: SortOrder
}

input TeamOrderByWithRelationInput {
  createdAt: SortOrder
  founder: UserOrderByWithRelationInput
  founderId: SortOrder
  id: SortOrder
  image: SortOrderInput
  name: SortOrder
  orders: OrderOrderByRelationAggregateInput
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
}

type TeamQuest {
  createdAt: DateTime!
  id: String!
  introduction: String!
  lesson: Lesson!
  lessonId: String!
  solution: String
  tasks: Json!
  teamQuestResults(after: TeamQuestResultWhereUniqueInput, before: TeamQuestResultWhereUniqueInput, first: Int, last: Int): [TeamQuestResult!]!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input TeamQuestListRelationFilter {
  every: TeamQuestWhereInput
  none: TeamQuestWhereInput
  some: TeamQuestWhereInput
}

input TeamQuestOrderByRelationAggregateInput {
  _count: SortOrder
}

type TeamQuestResult {
  answer: String
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonId: String
  student: User!
  studentId: String!
  teamQuest: TeamQuest
  teamQuestId: String
  updatedAt: DateTime!
}

input TeamQuestResultListRelationFilter {
  every: TeamQuestResultWhereInput
  none: TeamQuestResultWhereInput
  some: TeamQuestResultWhereInput
}

input TeamQuestResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input TeamQuestResultWhereInput {
  AND: [TeamQuestResultWhereInput!]
  NOT: [TeamQuestResultWhereInput!]
  OR: [TeamQuestResultWhereInput!]
  answer: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  teamQuest: TeamQuestWhereInput
  teamQuestId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TeamQuestResultWhereUniqueInput {
  AND: [TeamQuestResultWhereInput!]
  NOT: [TeamQuestResultWhereInput!]
  OR: [TeamQuestResultWhereInput!]
  answer: StringNullableFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  teamQuest: TeamQuestWhereInput
  teamQuestId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TeamQuestWhereInput {
  AND: [TeamQuestWhereInput!]
  NOT: [TeamQuestWhereInput!]
  OR: [TeamQuestWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  introduction: StringFilter
  lesson: LessonWhereInput
  lessonId: StringFilter
  solution: StringNullableFilter
  teamQuestResults: TeamQuestResultListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input TeamQuestWhereUniqueInput {
  AND: [TeamQuestWhereInput!]
  NOT: [TeamQuestWhereInput!]
  OR: [TeamQuestWhereInput!]
  createdAt: DateTimeFilter
  id: String
  introduction: StringFilter
  lesson: LessonWhereInput
  lessonId: StringFilter
  solution: StringNullableFilter
  teamQuestResults: TeamQuestResultListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  createdAt: DateTimeFilter
  founder: UserWhereInput
  founderId: StringFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringFilter
  orders: OrderListRelationFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input TeamWhereUniqueInput {
  AND: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  createdAt: DateTimeFilter
  founder: UserWhereInput
  founderId: StringFilter
  id: String
  image: StringNullableFilter
  name: StringFilter
  orders: OrderListRelationFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input TestListRelationFilter {
  every: TestWhereInput
  none: TestWhereInput
  some: TestWhereInput
}

input TestOrderByRelationAggregateInput {
  _count: SortOrder
}

type TestPractice {
  createdAt: DateTime!
  failureText: String
  id: String!
  intro: String
  lessonId: String
  successText: String
  tasks: [String!]!
  tasksNum: Int!
  text: String
  updatedAt: DateTime!
}

input TestPracticeListRelationFilter {
  every: TestPracticeWhereInput
  none: TestPracticeWhereInput
  some: TestPracticeWhereInput
}

input TestPracticeOrderByRelationAggregateInput {
  _count: SortOrder
}

type TestPracticeResult {
  correct: Int!
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonId: String
  student: User!
  studentId: String!
  tasks: [String!]!
  testPractice: TestPractice
  testPracticeId: String
  updatedAt: DateTime!
}

input TestPracticeResultListRelationFilter {
  every: TestPracticeResultWhereInput
  none: TestPracticeResultWhereInput
  some: TestPracticeResultWhereInput
}

input TestPracticeResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input TestPracticeResultWhereInput {
  AND: [TestPracticeResultWhereInput!]
  NOT: [TestPracticeResultWhereInput!]
  OR: [TestPracticeResultWhereInput!]
  correct: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  tasks: StringNullableListFilter
  testPractice: TestPracticeWhereInput
  testPracticeId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TestPracticeWhereInput {
  AND: [TestPracticeWhereInput!]
  NOT: [TestPracticeWhereInput!]
  OR: [TestPracticeWhereInput!]
  createdAt: DateTimeFilter
  failureText: StringNullableFilter
  id: StringFilter
  intro: StringNullableFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  successText: StringNullableFilter
  tasks: StringNullableListFilter
  tasksNum: IntFilter
  testPracticeResult: TestPracticeResultListRelationFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input TestPracticeWhereUniqueInput {
  AND: [TestPracticeWhereInput!]
  NOT: [TestPracticeWhereInput!]
  OR: [TestPracticeWhereInput!]
  createdAt: DateTimeFilter
  failureText: StringNullableFilter
  id: String
  intro: StringNullableFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  successText: StringNullableFilter
  tasks: StringNullableListFilter
  tasksNum: IntFilter
  testPracticeResult: TestPracticeResultListRelationFilter
  text: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

type TestResult {
  answer: String
  attempts: Int
  createdAt: DateTime!
  id: String!
  lesson: Lesson
  lessonID: String
  lessonId: String
  student: User!
  studentId: String!
  test: NewTest
  testID: String
  testId: String
  updatedAt: DateTime!
}

input TestResultListRelationFilter {
  every: TestResultWhereInput
  none: TestResultWhereInput
  some: TestResultWhereInput
}

input TestResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input TestResultOrderByWithRelationInput {
  answer: SortOrderInput
  attempts: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonID: SortOrderInput
  lessonId: SortOrderInput
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  test: NewTestOrderByWithRelationInput
  testID: SortOrderInput
  testId: SortOrderInput
  updatedAt: SortOrder
}

input TestResultWhereInput {
  AND: [TestResultWhereInput!]
  NOT: [TestResultWhereInput!]
  OR: [TestResultWhereInput!]
  answer: StringNullableFilter
  attempts: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  test: NewTestWhereInput
  testID: StringNullableFilter
  testId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TestResultWhereUniqueInput {
  AND: [TestResultWhereInput!]
  NOT: [TestResultWhereInput!]
  OR: [TestResultWhereInput!]
  answer: StringNullableFilter
  attempts: IntNullableFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  test: NewTestWhereInput
  testID: StringNullableFilter
  testId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TestWhereInput {
  AND: [TestWhereInput!]
  NOT: [TestWhereInput!]
  OR: [TestWhereInput!]
  answer1: StringFilter
  answer1Correct: StringFilter
  answer2: StringFilter
  answer2Correct: StringFilter
  answer3: StringNullableFilter
  answer3Correct: StringNullableFilter
  answer4: StringNullableFilter
  answer4Correct: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringNullableFilter
  lessonId: StringNullableFilter
  question: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type TextEditor {
  complexity: Int
  createdAt: DateTime!
  id: String!
  lesson: Lesson!
  lessonID: String!
  lessonId: String!
  name: String!
  text: String!
  textEditorResults(after: TextEditorResultWhereUniqueInput, before: TextEditorResultWhereUniqueInput, first: Int, last: Int): [TextEditorResult!]!
  totalMistakes: Int
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input TextEditorListRelationFilter {
  every: TextEditorWhereInput
  none: TextEditorWhereInput
  some: TextEditorWhereInput
}

input TextEditorOrderByRelationAggregateInput {
  _count: SortOrder
}

input TextEditorOrderByWithRelationInput {
  complexity: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonID: SortOrder
  lessonId: SortOrder
  name: SortOrder
  text: SortOrder
  textEditorResults: TextEditorResultOrderByRelationAggregateInput
  totalMistakes: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

type TextEditorResult {
  attempts: Int
  correct: String
  createdAt: DateTime!
  guess: String!
  id: String!
  lesson: Lesson
  lessonId: String
  result: Boolean
  student: User!
  studentId: String!
  textEditor: TextEditor
  textEditorId: String
  type: String
  updatedAt: DateTime!
  wrong: String
}

input TextEditorResultListRelationFilter {
  every: TextEditorResultWhereInput
  none: TextEditorResultWhereInput
  some: TextEditorResultWhereInput
}

input TextEditorResultOrderByRelationAggregateInput {
  _count: SortOrder
}

input TextEditorResultOrderByWithRelationInput {
  attempts: SortOrderInput
  correct: SortOrderInput
  createdAt: SortOrder
  guess: SortOrder
  id: SortOrder
  lesson: LessonOrderByWithRelationInput
  lessonId: SortOrderInput
  result: SortOrderInput
  student: UserOrderByWithRelationInput
  studentId: SortOrder
  textEditor: TextEditorOrderByWithRelationInput
  textEditorId: SortOrderInput
  type: SortOrderInput
  updatedAt: SortOrder
  wrong: SortOrderInput
}

input TextEditorResultWhereInput {
  AND: [TextEditorResultWhereInput!]
  NOT: [TextEditorResultWhereInput!]
  OR: [TextEditorResultWhereInput!]
  attempts: IntNullableFilter
  correct: StringNullableFilter
  createdAt: DateTimeFilter
  guess: StringFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  result: BoolNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  textEditor: TextEditorWhereInput
  textEditorId: StringNullableFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  wrong: StringNullableFilter
}

input TextEditorResultWhereUniqueInput {
  AND: [TextEditorResultWhereInput!]
  NOT: [TextEditorResultWhereInput!]
  OR: [TextEditorResultWhereInput!]
  attempts: IntNullableFilter
  correct: StringNullableFilter
  createdAt: DateTimeFilter
  guess: StringFilter
  id: String
  lesson: LessonWhereInput
  lessonId: StringNullableFilter
  result: BoolNullableFilter
  student: UserWhereInput
  studentId: StringFilter
  textEditor: TextEditorWhereInput
  textEditorId: StringNullableFilter
  type: StringNullableFilter
  updatedAt: DateTimeFilter
  wrong: StringNullableFilter
}

input TextEditorWhereInput {
  AND: [TextEditorWhereInput!]
  NOT: [TextEditorWhereInput!]
  OR: [TextEditorWhereInput!]
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  lesson: LessonWhereInput
  lessonID: StringFilter
  lessonId: StringFilter
  name: StringFilter
  text: StringFilter
  textEditorResults: TextEditorResultListRelationFilter
  totalMistakes: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input TextEditorWhereUniqueInput {
  AND: [TextEditorWhereInput!]
  NOT: [TextEditorWhereInput!]
  OR: [TextEditorWhereInput!]
  complexity: IntNullableFilter
  createdAt: DateTimeFilter
  id: String
  lesson: LessonWhereInput
  lessonID: StringFilter
  lessonId: StringFilter
  name: StringFilter
  text: StringFilter
  textEditorResults: TextEditorResultListRelationFilter
  totalMistakes: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

type Uni {
  capacity: Int
  id: String!
  paidMonths: Int
  teachers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  title: String!
}

input UniOrderByWithRelationInput {
  capacity: SortOrderInput
  coursePage: CoursePageOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  paidMonths: SortOrderInput
  teachers: UserOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
}

input UniWhereInput {
  AND: [UniWhereInput!]
  NOT: [UniWhereInput!]
  OR: [UniWhereInput!]
  capacity: IntNullableFilter
  coursePage: CoursePageListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  paidMonths: IntNullableFilter
  teachers: UserListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type Useful {
  buttonText: String!
  createdAt: DateTime!
  header: String!
  id: String!
  image: String!
  link: String!
  name: String
  tags: [String!]!
  updatedAt: DateTime!
}

input UsefulWhereInput {
  AND: [UsefulWhereInput!]
  NOT: [UsefulWhereInput!]
  OR: [UsefulWhereInput!]
  buttonText: StringFilter
  createdAt: DateTimeFilter
  header: StringFilter
  id: StringFilter
  image: StringFilter
  link: StringFilter
  name: StringNullableFilter
  tags: StringNullableListFilter
  updatedAt: DateTimeFilter
}

input UsefulWhereUniqueInput {
  AND: [UsefulWhereInput!]
  NOT: [UsefulWhereInput!]
  OR: [UsefulWhereInput!]
  buttonText: StringFilter
  createdAt: DateTimeFilter
  header: StringFilter
  id: String
  image: StringFilter
  link: StringFilter
  name: StringNullableFilter
  tags: StringNullableListFilter
  updatedAt: DateTimeFilter
}

type User {
  active: Boolean
  certificates(after: CertificateWhereUniqueInput, before: CertificateWhereUniqueInput, first: Int, last: Int): [Certificate!]!
  challengeResults(after: ChallengeResultWhereUniqueInput, before: ChallengeResultWhereUniqueInput, first: Int, last: Int): [ChallengeResult!]!
  co_coursePages(after: CoursePageWhereUniqueInput, before: CoursePageWhereUniqueInput, first: Int, last: Int, orderBy: [UserCo_coursePagesOrderByInput!]): [CoursePage!]!
  comment: String
  company: Company
  country: String
  coursePages(after: CoursePageWhereUniqueInput, before: CoursePageWhereUniqueInput, first: Int, last: Int, orderBy: [UserCoursePagesOrderByInput!]): [CoursePage!]!
  courseVisits(after: CourseVisitWhereUniqueInput, before: CourseVisitWhereUniqueInput, first: Int, last: Int): [CourseVisit!]!
  createdAt: DateTime!
  description: String
  email: String!
  emailReminders(after: EmailReminderWhereUniqueInput, before: EmailReminderWhereUniqueInput, first: Int, last: Int): [EmailReminder!]!
  id: String!
  image: String
  lessonResults(after: LessonResultWhereUniqueInput, before: LessonResultWhereUniqueInput, first: Int, last: Int): [LessonResult!]!
  lessons(after: LessonWhereUniqueInput, before: LessonWhereUniqueInput, first: Int, last: Int): [Lesson!]!
  level: UserLevel
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  myTeams(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int): [Team!]!
  name: String!
  new_subjects(after: CoursePageWhereUniqueInput, before: CoursePageWhereUniqueInput, first: Int, last: Int): [CoursePage!]!
  number: String
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  password: String!
  permissions: [Permission!]!
  ratings(after: RatingWhereUniqueInput, before: RatingWhereUniqueInput, first: Int, last: Int): [Rating!]!
  referal: String
  resume: String
  score: Int
  status: String
  studentFeedback(after: FeedbackWhereUniqueInput, before: FeedbackWhereUniqueInput, first: Int, last: Int): [Feedback!]!
  surname: String
  tags: [String!]!
  teacherFeedback(after: FeedbackWhereUniqueInput, before: FeedbackWhereUniqueInput, first: Int, last: Int): [Feedback!]!
  teamQuestResults(after: TeamQuestResultWhereUniqueInput, before: TeamQuestResultWhereUniqueInput, first: Int, last: Int): [TeamQuestResult!]!
  teamQuests(after: TeamQuestWhereUniqueInput, before: TeamQuestWhereUniqueInput, first: Int, last: Int): [TeamQuest!]!
  teams(after: TeamWhereUniqueInput, before: TeamWhereUniqueInput, first: Int, last: Int): [Team!]!
  traffic_sources: Json
  uni: Uni
  updatedAt: DateTime!
  work: String
}

input UserCo_coursePagesOrderByInput {
  title: SortOrder
}

input UserCoursePagesOrderByInput {
  title: SortOrder
}

type UserLevel {
  consumedContent: Json
  createdAt: DateTime!
  growthAreas(after: GrowthAreaWhereUniqueInput, before: GrowthAreaWhereUniqueInput, first: Int, last: Int): [GrowthArea!]!
  id: String!
  isProgressPublic: Boolean
  learningStreak: [DateTime!]!
  level: Decimal
  myProgress: Json
  updatedAt: DateTime!
  user: User
}

input UserLevelListRelationFilter {
  every: UserLevelWhereInput
  none: UserLevelWhereInput
  some: UserLevelWhereInput
}

input UserLevelOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserLevelOrderByWithRelationInput {
  consumedContent: SortOrderInput
  createdAt: SortOrder
  growthAreas: GrowthAreaOrderByRelationAggregateInput
  id: SortOrder
  isProgressPublic: SortOrderInput
  learningStreak: SortOrder
  level: SortOrderInput
  myProgress: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input UserLevelWhereInput {
  AND: [UserLevelWhereInput!]
  NOT: [UserLevelWhereInput!]
  OR: [UserLevelWhereInput!]
  consumedContent: JsonNullableFilter
  createdAt: DateTimeFilter
  growthAreas: GrowthAreaListRelationFilter
  id: StringFilter
  isProgressPublic: BoolNullableFilter
  learningStreak: DateTimeNullableListFilter
  level: DecimalNullableFilter
  myProgress: JsonNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input UserLevelWhereUniqueInput {
  AND: [UserLevelWhereInput!]
  NOT: [UserLevelWhereInput!]
  OR: [UserLevelWhereInput!]
  consumedContent: JsonNullableFilter
  createdAt: DateTimeFilter
  growthAreas: GrowthAreaListRelationFilter
  id: String
  isProgressPublic: BoolNullableFilter
  learningStreak: DateTimeNullableListFilter
  level: DecimalNullableFilter
  myProgress: JsonNullableFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  active: SortOrderInput
  careerTrack: CareerTrackOrderByWithRelationInput
  careerTrackID: SortOrderInput
  careerTrackId: SortOrderInput
  certificates: CertificateOrderByRelationAggregateInput
  challengeResults: ChallengeResultOrderByRelationAggregateInput
  chat: ChatOrderByRelationAggregateInput
  clause: ClauseOrderByRelationAggregateInput
  co_coursePages: CoursePageOrderByRelationAggregateInput
  comment: SortOrderInput
  company: CompanyOrderByWithRelationInput
  companyId: SortOrderInput
  construction: ConstructionOrderByRelationAggregateInput
  constructionResult: ConstructionResultOrderByRelationAggregateInput
  country: SortOrderInput
  coursePages: CoursePageOrderByRelationAggregateInput
  courseVisits: CourseVisitOrderByRelationAggregateInput
  coverLetter: SortOrderInput
  createdAt: SortOrder
  description: SortOrderInput
  document: DocumentOrderByRelationAggregateInput
  documentResult: DocumentResultOrderByRelationAggregateInput
  email: SortOrder
  emailReminders: EmailReminderOrderByRelationAggregateInput
  exam: ExamOrderByRelationAggregateInput
  examAnswer: ExamAnswerOrderByRelationAggregateInput
  examResult: ExamResultOrderByRelationAggregateInput
  favourites: SortOrder
  forum: ForumOrderByRelationAggregateInput
  id: SortOrder
  image: SortOrderInput
  isFamiliar: SortOrder
  lawrdles: LawrdleOrderByRelationAggregateInput
  legalPortfolio: LegalPortfolioOrderByWithRelationInput
  legalPortfolioId: SortOrderInput
  lessonResults: LessonResultOrderByRelationAggregateInput
  lessons: LessonOrderByRelationAggregateInput
  level: UserLevelOrderByWithRelationInput
  levelId: SortOrderInput
  messages: MessageOrderByRelationAggregateInput
  miniforums: MiniForumOrderByRelationAggregateInput
  myTeams: TeamOrderByRelationAggregateInput
  name: SortOrder
  newTests: NewTestOrderByRelationAggregateInput
  new_subjects: CoursePageOrderByRelationAggregateInput
  notes: NoteOrderByRelationAggregateInput
  number: SortOrderInput
  offers: OfferOrderByRelationAggregateInput
  orders: OrderOrderByRelationAggregateInput
  password: SortOrder
  permissions: SortOrder
  pointATests: PointATestOrderByRelationAggregateInput
  pointAs: PointAOrderByRelationAggregateInput
  posts: PostOrderByRelationAggregateInput
  problemResults: ProblemResultOrderByRelationAggregateInput
  problems: ProblemOrderByRelationAggregateInput
  quizResults: QuizResultOrderByRelationAggregateInput
  quizes: QuizOrderByRelationAggregateInput
  ratings: RatingOrderByRelationAggregateInput
  referal: SortOrderInput
  resetToken: SortOrderInput
  resetTokenExpiry: SortOrderInput
  resume: SortOrderInput
  sandboxPage: SandboxPageOrderByRelationAggregateInput
  sandboxPageGoal: SandboxPageGoalOrderByRelationAggregateInput
  score: SortOrderInput
  shot: ShotOrderByRelationAggregateInput
  shotResult: ShotResultOrderByRelationAggregateInput
  statement: StatementOrderByRelationAggregateInput
  status: SortOrderInput
  studentFeedback: FeedbackOrderByRelationAggregateInput
  subjects: SortOrder
  surname: SortOrderInput
  tags: SortOrder
  teacherFeedback: FeedbackOrderByRelationAggregateInput
  teamQuestResults: TeamQuestResultOrderByRelationAggregateInput
  teamQuests: TeamQuestOrderByRelationAggregateInput
  teams: TeamOrderByRelationAggregateInput
  test: TestOrderByRelationAggregateInput
  testPracticeResult: TestPracticeResultOrderByRelationAggregateInput
  testPractices: TestPracticeOrderByRelationAggregateInput
  testResults: TestResultOrderByRelationAggregateInput
  textEditorResults: TextEditorResultOrderByRelationAggregateInput
  textEditors: TextEditorOrderByRelationAggregateInput
  traffic_sources: SortOrderInput
  uni: UniOrderByWithRelationInput
  uniID: SortOrderInput
  uniId: SortOrderInput
  updatedAt: SortOrder
  work: SortOrderInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  active: BoolNullableFilter
  careerTrack: CareerTrackWhereInput
  careerTrackID: StringNullableFilter
  careerTrackId: StringNullableFilter
  certificates: CertificateListRelationFilter
  challengeResults: ChallengeResultListRelationFilter
  chat: ChatListRelationFilter
  clause: ClauseListRelationFilter
  co_coursePages: CoursePageListRelationFilter
  comment: StringNullableFilter
  company: CompanyWhereInput
  companyId: StringNullableFilter
  construction: ConstructionListRelationFilter
  constructionResult: ConstructionResultListRelationFilter
  country: StringNullableFilter
  coursePages: CoursePageListRelationFilter
  courseVisits: CourseVisitListRelationFilter
  coverLetter: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  document: DocumentListRelationFilter
  documentResult: DocumentResultListRelationFilter
  email: StringFilter
  emailReminders: EmailReminderListRelationFilter
  exam: ExamListRelationFilter
  examAnswer: ExamAnswerListRelationFilter
  examResult: ExamResultListRelationFilter
  favourites: StringNullableListFilter
  forum: ForumListRelationFilter
  id: StringFilter
  image: StringNullableFilter
  isFamiliar: BoolFilter
  lawrdles: LawrdleListRelationFilter
  legalPortfolio: LegalPortfolioWhereInput
  legalPortfolioId: StringNullableFilter
  lessonResults: LessonResultListRelationFilter
  lessons: LessonListRelationFilter
  level: UserLevelWhereInput
  levelId: StringNullableFilter
  messages: MessageListRelationFilter
  miniforums: MiniForumListRelationFilter
  myTeams: TeamListRelationFilter
  name: StringFilter
  newTests: NewTestListRelationFilter
  new_subjects: CoursePageListRelationFilter
  notes: NoteListRelationFilter
  number: StringNullableFilter
  offers: OfferListRelationFilter
  orders: OrderListRelationFilter
  password: StringFilter
  permissions: EnumPermissionNullableListFilter
  pointATests: PointATestListRelationFilter
  pointAs: PointAListRelationFilter
  posts: PostListRelationFilter
  problemResults: ProblemResultListRelationFilter
  problems: ProblemListRelationFilter
  quizResults: QuizResultListRelationFilter
  quizes: QuizListRelationFilter
  ratings: RatingListRelationFilter
  referal: StringNullableFilter
  resetToken: StringNullableFilter
  resetTokenExpiry: DecimalNullableFilter
  resume: StringNullableFilter
  sandboxPage: SandboxPageListRelationFilter
  sandboxPageGoal: SandboxPageGoalListRelationFilter
  score: IntNullableFilter
  shot: ShotListRelationFilter
  shotResult: ShotResultListRelationFilter
  statement: StatementListRelationFilter
  status: StringNullableFilter
  studentFeedback: FeedbackListRelationFilter
  subjects: StringNullableListFilter
  surname: StringNullableFilter
  tags: StringNullableListFilter
  teacherFeedback: FeedbackListRelationFilter
  teamQuestResults: TeamQuestResultListRelationFilter
  teamQuests: TeamQuestListRelationFilter
  teams: TeamListRelationFilter
  test: TestListRelationFilter
  testPracticeResult: TestPracticeResultListRelationFilter
  testPractices: TestPracticeListRelationFilter
  testResults: TestResultListRelationFilter
  textEditorResults: TextEditorResultListRelationFilter
  textEditors: TextEditorListRelationFilter
  traffic_sources: JsonNullableFilter
  uni: UniWhereInput
  uniID: StringNullableFilter
  uniId: StringNullableFilter
  updatedAt: DateTimeFilter
  work: StringNullableFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  active: BoolNullableFilter
  careerTrack: CareerTrackWhereInput
  careerTrackID: StringNullableFilter
  careerTrackId: String
  certificates: CertificateListRelationFilter
  challengeResults: ChallengeResultListRelationFilter
  chat: ChatListRelationFilter
  clause: ClauseListRelationFilter
  co_coursePages: CoursePageListRelationFilter
  comment: StringNullableFilter
  company: CompanyWhereInput
  companyId: StringNullableFilter
  construction: ConstructionListRelationFilter
  constructionResult: ConstructionResultListRelationFilter
  country: StringNullableFilter
  coursePages: CoursePageListRelationFilter
  courseVisits: CourseVisitListRelationFilter
  coverLetter: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  document: DocumentListRelationFilter
  documentResult: DocumentResultListRelationFilter
  email: String
  emailReminders: EmailReminderListRelationFilter
  exam: ExamListRelationFilter
  examAnswer: ExamAnswerListRelationFilter
  examResult: ExamResultListRelationFilter
  favourites: StringNullableListFilter
  forum: ForumListRelationFilter
  id: String
  image: StringNullableFilter
  isFamiliar: BoolFilter
  lawrdles: LawrdleListRelationFilter
  legalPortfolio: LegalPortfolioWhereInput
  legalPortfolioId: String
  lessonResults: LessonResultListRelationFilter
  lessons: LessonListRelationFilter
  level: UserLevelWhereInput
  levelId: String
  messages: MessageListRelationFilter
  miniforums: MiniForumListRelationFilter
  myTeams: TeamListRelationFilter
  name: StringFilter
  newTests: NewTestListRelationFilter
  new_subjects: CoursePageListRelationFilter
  notes: NoteListRelationFilter
  number: StringNullableFilter
  offers: OfferListRelationFilter
  orders: OrderListRelationFilter
  password: StringFilter
  permissions: EnumPermissionNullableListFilter
  pointATests: PointATestListRelationFilter
  pointAs: PointAListRelationFilter
  posts: PostListRelationFilter
  problemResults: ProblemResultListRelationFilter
  problems: ProblemListRelationFilter
  quizResults: QuizResultListRelationFilter
  quizes: QuizListRelationFilter
  ratings: RatingListRelationFilter
  referal: StringNullableFilter
  resetToken: StringNullableFilter
  resetTokenExpiry: DecimalNullableFilter
  resume: StringNullableFilter
  sandboxPage: SandboxPageListRelationFilter
  sandboxPageGoal: SandboxPageGoalListRelationFilter
  score: IntNullableFilter
  shot: ShotListRelationFilter
  shotResult: ShotResultListRelationFilter
  statement: StatementListRelationFilter
  status: StringNullableFilter
  studentFeedback: FeedbackListRelationFilter
  subjects: StringNullableListFilter
  surname: StringNullableFilter
  tags: StringNullableListFilter
  teacherFeedback: FeedbackListRelationFilter
  teamQuestResults: TeamQuestResultListRelationFilter
  teamQuests: TeamQuestListRelationFilter
  teams: TeamListRelationFilter
  test: TestListRelationFilter
  testPracticeResult: TestPracticeResultListRelationFilter
  testPractices: TestPracticeListRelationFilter
  testResults: TestResultListRelationFilter
  textEditorResults: TextEditorResultListRelationFilter
  textEditors: TextEditorListRelationFilter
  traffic_sources: JsonNullableFilter
  uni: UniWhereInput
  uniID: StringNullableFilter
  uniId: StringNullableFilter
  updatedAt: DateTimeFilter
  work: StringNullableFilter
}

input Visit {
  date: String
  utm_campaign: String
  utm_medium: String
  utm_source: String
}

input Visits {
  visitsList: [Visit]
}