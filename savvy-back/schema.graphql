### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AnswerElement {
  """Answer text."""
  answer: String

  """Feedback for the answer."""
  feedback: String

  """Position or index of the answer."""
  index: Int

  """ID of the next step after this answer."""
  next_id: String

  """Type of the next step after this answer."""
  next_type: String
  relatedAnswers: [String]
}

input AnswerElementInput {
  """Answer text."""
  answer: String

  """Feedback for the answer."""
  feedback: String

  """Position or index of the answer."""
  index: Int

  """ID of the next step after this answer."""
  next_id: String

  """Type of the next step after this answer."""
  next_type: String
  relatedAnswers: [String]
}

type Application {
  applicantId: Int
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

type AuthMessage {
  message: String
}

type AuthPayload {
  token: String
  user: User
}

type Borders {
  """Bottom border value."""
  bottom: String

  """Left border value."""
  left: String

  """Right border value."""
  right: String

  """Top border value."""
  top: String
}

input BordersInput {
  """Bottom border value."""
  bottom: String

  """Left border value."""
  left: String

  """Right border value."""
  right: String

  """Top border value."""
  top: String
}

type BotDialogue {
  """Timestamp when the bot dialogue was created."""
  createdAt: DateTime

  """Unique identifier for the bot dialogue."""
  id: String

  """Journey or path of the bot dialogue."""
  journey: String

  """Rating given for the bot dialogue."""
  rating: Float

  """Source or context of the bot dialogue."""
  source: String

  """Timestamp when the bot dialogue was last updated."""
  updatedAt: DateTime
}

type BranchItem {
  """The source of the branch item."""
  source: String

  """The type of the branch item."""
  type: String

  """The value of the branch item."""
  value: String
}

input BranchItemInput {
  """The source of the branch item."""
  source: String

  """The type of the branch item."""
  type: String

  """The value of the branch item."""
  value: String
}

type BusinessClient {
  """Additional comments about the business client."""
  comment: String

  """History of communications with the client."""
  communication_history: CommunicationHistory

  """Preferred communication medium of the client."""
  communication_medium: String

  """Country of the business client."""
  country: String

  """Details of the associated course page."""
  coursePage: CoursePage

  """ID of the associated course page."""
  coursePageId: Int

  """Timestamp when the client record was created."""
  createdAt: DateTime

  """Email of the business client."""
  email: String

  """Unique identifier for the business client."""
  id: String

  """Name of the business client."""
  name: String

  """Contact number of the business client."""
  number: String

  """Sales cycle details for the client."""
  sales_cycle: String

  """Source from which the client was acquired."""
  source: String

  """Surname of the business client."""
  surname: String

  """Tags associated with the business client."""
  tags: [String]

  """Type or category of the business client."""
  type: String

  """Timestamp when the client record was last updated."""
  updatedAt: DateTime
}

type Certificate {
  coursePage: CoursePage
  coursePageId: Int
  createdAt: DateTime
  id: Int
  student: User
  studentId: Int
  updatedAt: DateTime
}

type ChallengeResult {
  """Indicates whether the challenge was completed correctly."""
  correct: Boolean

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Unique identifier for the challenge result."""
  id: String

  """Details of the associated lesson."""
  lesson: Lesson

  """ID of the associated lesson."""
  lessonId: String

  """Details of the student."""
  student: User

  """ID of the student who completed the challenge."""
  studentId: Int

  """Time taken to complete the challenge."""
  time: Float

  """Timestamp when the result was last updated."""
  updatedAt: DateTime

  """Indicates whether the challenge was completed incorrectly."""
  wrong: Boolean
}

type Character {
  description: String
  image: String
  name: String
}

input CharacterInput {
  description: String
  image: String
  name: String
}

type Chat {
  chatResults: [ChatResult]
  complexity: Int
  createdAt: DateTime
  id: String
  isSecret: Boolean
  lesson: Lesson
  lessonId: String
  link_clicks: Int
  messages: Messages
  name: String
  type: String
  updatedAt: DateTime
  user: User
}

type ChatResult {
  """Details of the associated chat."""
  chat: Chat

  """ID of the associated chat."""
  chatId: String

  """Timestamp when the chat result was created."""
  createdAt: DateTime

  """Unique identifier for the chat result."""
  id: String

  """Details of the associated lesson."""
  lesson: Lesson

  """ID of the associated lesson."""
  lessonId: String

  """Name associated with the chat result."""
  name: String

  """Text content of the chat result."""
  text: String

  """Timestamp when the chat result was last updated."""
  updatedAt: DateTime

  """Details of the user."""
  user: User

  """ID of the user associated with the chat result."""
  userId: String
}

type Clause {
  commentary: String
  createdAt: DateTime
  document: Document
  documentId: Int
  id: String
  keywords: [String]
  number: Int
  sample: String
  updatedAt: DateTime
  user: User
  userId: Int
}

type Comment {
  blockId: String
  createdAt: DateTime
  id: String
  lesson: Lesson
  lessonId: String
  parentComment: Comment
  replies: [Comment]
  sourceCommentId: String
  status: String
  text: String
  updatedAt: DateTime
  user: User
  userId: String
}

"""
Represents the status of a comment, such as pending, approved, or rejected.
"""
enum CommentStatus {
  APPROVED
  PENDING
  REJECTED
}

type CommunicationHistory {
  """History of communications."""
  messages: [CommunicationHistoryMessage]
}

input CommunicationHistoryInput {
  """History of communications."""
  messages: [CommunicationHistoryMessageInput]
}

type CommunicationHistoryMessage {
  """Date of the communication."""
  date: String

  """Unique identifier for the communication."""
  id: String

  """Message content of the communication."""
  message: String

  """Subject of the communication."""
  subject: String
}

input CommunicationHistoryMessageInput {
  """Date of the communication."""
  date: String

  """Unique identifier for the communication."""
  id: String

  """Message content of the communication."""
  message: String

  """Subject of the communication."""
  subject: String
}

type CommunityMember {
  """Timestamp when the community member record was created."""
  createdAt: DateTime

  """Email address of the community member."""
  email: String

  """Unique identifier for the community member."""
  id: String

  """First name of the community member."""
  name: String

  """Contact number of the community member."""
  number: String

  """Source of acquisition for the community member."""
  source: String

  """Subscription details for the community member."""
  subscription: Subscription

  """Surname of the community member."""
  surname: String

  """Timestamp when the community member record was last updated."""
  updatedAt: DateTime
}

type Company {
  """Unique identifier for the company."""
  id: Int

  """Name of the company."""
  name: String
}

type ComplexAnswer {
  """List of elements in a complex answer."""
  answerElements: [AnswerElement]
}

input ComplexAnswerInput {
  """List of elements in a complex answer."""
  answerElements: [AnswerElementInput]
}

type ComplexTestAnswer {
  """The answer text or value."""
  answer: String

  """Unique identifier for the test answer."""
  id: String
}

input ComplexTestAnswerInput {
  """The answer text or value."""
  answer: String

  """Unique identifier for the test answer."""
  id: String
}

type ComplexTestAnswers {
  """List of answers for a complex test."""
  complexTestAnswers: [ComplexTestAnswer]
}

input ComplexTestAnswersInput {
  """List of answers for a complex test."""
  complexTestAnswers: [ComplexTestAnswerInput]
}

type ConfUser {
  """Conference number associated with the user."""
  conf_number: String

  """Timestamp when the conference user record was created."""
  createdAt: DateTime

  """Email address of the conference user."""
  email: String

  """Unique identifier for the conference user."""
  id: String

  """First name of the conference user."""
  name: String

  """Surname of the conference user."""
  surname: String

  """Timestamp when the conference user record was last updated."""
  updatedAt: DateTime
}

type Construction {
  answer: [String]
  columnsNum: Int
  complexity: Int
  constructionResults: [ConstructionResult]
  context: String
  createdAt: DateTime
  elements: ConstructionElementsList
  goal: String
  hasText: Boolean
  hint: String
  id: String
  lesson: Lesson
  lessonID: String
  lessonId: String
  name: String
  text: String
  type: String
  updatedAt: DateTime
  user: User
  userId: String
  variants: [String]
}

type ConstructionElement {
  """Defines the borders of the element."""
  borders: Borders

  """Additional comment for the element."""
  comment: String

  """Indicates if the element is editable."""
  edit: Boolean

  """Indicates if the element is part of a document."""
  inDoc: Boolean

  """Indicates if the element is a test component."""
  isTest: Boolean

  """Placement position of the element."""
  place: Int

  """Number of rows occupied by the element."""
  rows: Int

  """Size of the element."""
  size: Int

  """Text content of the element."""
  text: String

  """The type of the element."""
  type: String

  """The value of the element."""
  value: String
}

input ConstructionElementInput {
  """Defines the borders of the element."""
  borders: BordersInput

  """Additional comment for the element."""
  comment: String

  """Indicates if the element is editable."""
  edit: Boolean

  """Indicates if the element is part of a document."""
  inDoc: Boolean

  """Indicates if the element is a test component."""
  isTest: Boolean

  """Placement position of the element."""
  place: Int

  """Number of rows occupied by the element."""
  rows: Int

  """Size of the element."""
  size: Int

  """Text content of the element."""
  text: String

  """The type of the element."""
  type: String

  """The value of the element."""
  value: String
}

type ConstructionElementsList {
  """List of elements in the structure."""
  elements: [ConstructionElement]
}

input ConstructionElementsListInput {
  """List of elements in the structure."""
  elements: [ConstructionElementInput]
}

type ConstructionResult {
  """Answer provided by the student."""
  answer: String

  """List of answers provided."""
  answers: [String]

  """Number of attempts made."""
  attempts: Int

  """Details of the construction."""
  construction: Construction

  """Legacy ID of the construction."""
  constructionID: String

  """ID of the construction."""
  constructionId: String

  """Timestamp when the result was created."""
  createdAt: DateTime
  elements: ConstructionElementsList

  """Unique identifier for the construction result."""
  id: String

  """Inputs provided during the construction task."""
  inputs: [String]

  """Details of the associated lesson."""
  lesson: Lesson

  """Legacy ID of the lesson."""
  lessonID: String

  """ID of the associated lesson."""
  lessonId: String

  """Details of the student."""
  student: User

  """ID of the student who completed the task."""
  studentId: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime
}

input ConsumedContent {
  """Unique identifier for the consumed content."""
  id: String

  """Tags associated with the content."""
  tags: [String]

  """Type of the consumed content."""
  type: String
}

input ConsumedContentList {
  """List of consumed content items."""
  consumedContentList: [ConsumedContent]
}

type CoursePage {
  applications: [Application]
  audience: String
  authors: [User]
  banner: String
  batch: String
  company: Company
  countries: [String]
  courseType: String
  createdAt: DateTime
  currency: String
  description: String
  discountPrice: Float
  goals: [String]
  header: [String]
  id: String
  image: String
  installments: Boolean
  lessons: [Lesson]
  methods: String
  new_students: [User]
  nextStart: DateTime
  numInCareerTrack: Int
  orders: [Order]
  price: Float
  promocode: String
  promotionId: Int
  published: Boolean
  result: String
  reviews: ReviewsList
  subheader: [String]
  subscriptionPrice: Float
  tags: [String]
  title: String
  uni: String
  updatedAt: DateTime
  uptodateAt: DateTime
  user: User
  userId: String
  video: String
  view: Int
  weeks: Int
}

"""
Defines the type of a course, such as public, private, for money, university-affiliated, or a challenge course.
"""
enum CourseType {
  CHALLENGE
  FORMONEY
  PRIVATE
  PUBLIC
  UNI
}

type CourseVisit {
  coursePage: CoursePage
  coursePageId: Int
  createdAt: DateTime
  id: Int
  student: User
  studentId: Int
  updatedAt: DateTime
  visitsNumber: Int
}

"""A DateTime scalar type representing ISO-8601 formatted date and time."""
scalar DateTime

input Dialogue {
  """Answer provided during the dialogue."""
  answer: String

  """Additional comments or notes for the dialogue."""
  comment: String

  """Question asked during the dialogue."""
  question: String

  """Source ID related to the dialogue."""
  sourceId: String
}

input DialogueHistory {
  """List of steps in the dialogue history."""
  steps: [DialogueStep]
}

input DialogueStep {
  """Image URL for the dialogue step."""
  image: String

  """Name associated with the dialogue step."""
  name: String

  """Step number in the dialogue."""
  number: Int

  """Source ID related to the dialogue step."""
  sourceId: String

  """Start time of the dialogue step."""
  startTime: String

  """Text content of the dialogue step."""
  text: String
}

type Document {
  clauses: [Clause]
  complexity: Int
  createdAt: DateTime
  documentResults: [DocumentResult]
  goal: String
  id: String
  lesson: Lesson
  lessonId: String
  name: String
  title: String
  updatedAt: DateTime
  user: User
  userId: String
}

type DocumentResult {
  """List of answers associated with the document."""
  answers: [String]

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Details of the document."""
  document: Document

  """ID of the document."""
  documentId: String

  """Drafts created for the document."""
  drafts: [String]

  """Unique identifier for the document result."""
  id: String

  """Details of the associated lesson."""
  lesson: Lesson

  """ID of the associated lesson."""
  lessonId: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime

  """Details of the user."""
  user: User

  """ID of the user who completed the task."""
  userId: String
}

input Email {
  """Header of the email."""
  header: String

  """Name of the email template."""
  name: String

  """Sequence number of the email."""
  number: Int

  """Content or body of the email."""
  text: String
}

type EmailCampaign {
  content: String
  createdAt: DateTime
  emailReminders: [EmailReminder]
  emails: [EmailReminder]
  id: Int
  name: String
  updatedAt: DateTime
}

input EmailInfo {
  """Number of completed lessons."""
  completed_lessons_number: Int

  """Name of the course."""
  course_name: String

  """Results list for the lessons."""
  lesResultsList: LesResultsList

  """Total number of lessons."""
  lessons_number: Int

  """Name of the student."""
  student_name: String
}

type EmailReminder {
  coursePage: CoursePage
  coursePageId: Int
  createdAt: DateTime
  emailCampaign: EmailCampaign
  emailsSent: Int
  gap: Int
  id: Int
  link: String
  sendAt: DateTime
  updatedAt: DateTime
  user: User
  userId: String
}

input EmailsList {
  """List of emails in a campaign."""
  emails: [Email]
}

type Feedback {
  createdAt: DateTime
  id: String
  lesson: Lesson
  lessonId: String
  student: User
  studentId: String
  teacher: User
  teacherId: String
  text: String
  updatedAt: DateTime
}

type Forum {
  createdAt: DateTime
  id: String
  lesson: Lesson
  lessonId: String
  rating: [Rating]
  statements: [Statement]
  text: String
  updatedAt: DateTime
  user: User
  userId: String
}

type GrowthArea {
  """Timestamp when the growth area was created."""
  createdAt: DateTime

  """Unique identifier for the growth area."""
  id: String

  """Maximum progress achievable in this area."""
  maxProgress: Int

  """Name of the growth area."""
  name: String

  """Timestamp when the growth area was last updated."""
  updatedAt: DateTime

  """User levels linked to the growth area."""
  userLevels: [UserLevel]
}

type Lawrdle {
  """Indicates if the Lawrdle entry is active."""
  active: Boolean

  """Details of the author who created the Lawrdle entry."""
  author: User

  """ID of the author who created the Lawrdle entry."""
  authorId: Int

  """Text displayed on the associated button."""
  buttonText: String

  """Course page linked to the Lawrdle entry."""
  coursePage: CoursePage

  """ID of the course page linked to the Lawrdle entry."""
  coursePageId: Int

  """Timestamp when the Lawrdle entry was created."""
  createdAt: DateTime

  """Email campaign associated with the Lawrdle entry."""
  emailCampaign: EmailCampaign

  """ID of the email campaign associated with the Lawrdle entry."""
  emailCampaignId: String

  """Unique identifier for the Lawrdle entry."""
  id: Int

  """Introductory text or lead-in for the Lawrdle entry."""
  leadin: String

  """ID of the lesson linked to the Lawrdle entry."""
  lessonId: String

  """Link associated with the Lawrdle entry."""
  link: String

  """Story or context related to the Lawrdle entry."""
  story: String

  """Timestamp when the Lawrdle entry was last updated."""
  updatedAt: DateTime

  """Word associated with the Lawrdle entry."""
  word: String
}

input LesResult {
  """Name of the lesson."""
  lesson_name: String

  """Number of the lesson."""
  lesson_number: Int

  """Size of the lesson content."""
  lesson_size: Int

  """Progress in the lesson."""
  progress: Int

  """Number of visits to the lesson."""
  visits: Int
}

input LesResultsList {
  """List of individual lesson results."""
  lesResults: [LesResult]
}

type Lesson {
  assignment: String
  banner: String
  challengeResults: [ChallengeResult]
  challenge_num: Int
  change: String
  characters: [Character]
  chats: [Chat]
  comments: [Comment]
  constructionResults: [ConstructionResult]
  constructions: [Construction]
  context: String
  coursePage: CoursePage
  coursePageID: Int
  coursePageId: Int
  createdAt: DateTime
  description: String
  documents: [Document]
  forum: Forum
  forumId: Int
  goal: String
  hasSecret: Boolean
  id: String
  lessonResults: [LessonResult]
  map: String
  miniforums: [MiniForum]
  name: String
  newTests: [NewTest]
  notes: [Note]
  number: Int
  offers: [Offer]
  open: Boolean
  openSize: String
  problemResults: [ProblemResult]
  problems: [Problem]
  processManagers: [ProcessManager]
  published: Boolean
  quizResults: [QuizResult]
  quizes: [Quiz]
  shotResults: [ShotResult]
  shots: [Shot]
  story: String
  structure: LessonStructure
  tags: [String]
  teamQuestResults: [TeamQuestResult]
  teamQuests: [TeamQuest]
  testPractices: [TestPractice]
  testResults: [TestResult]
  text: String
  textEditorResults: [TextEditorResult]
  texteditors: [TextEditor]
  totalPoints: Int
  type: String
  updatedAt: DateTime
  user: User
  userId: Int
}

type LessonData {
  """List of chats."""
  chats: [Chat]

  """List of constructions."""
  constructions: [Construction]

  """List of documents."""
  documents: [Document]

  """Forum"""
  forum: Forum

  """List of new tests."""
  newTests: [NewTest]

  """List of notes."""
  notes: [Note]

  """List of problems."""
  problems: [Problem]

  """List of quizzes."""
  quizes: [Quiz]

  """List of shots."""
  shots: [Shot]

  """List of test practices."""
  testPractices: [TestPractice]

  """List of text editors."""
  textEditors: [TextEditor]
}

input LessonInModule {
  """The ID of the lesson in the module."""
  id: String
}

type LessonItem {
  """Additional comments or notes."""
  comment: String

  """Unique identifier for the lesson item."""
  id: String

  """Type of the lesson item."""
  type: String
}

input LessonItemInput {
  """Additional comments or notes."""
  comment: String

  """Unique identifier for the lesson item."""
  id: String

  """Type of the lesson item."""
  type: String
}

type LessonResult {
  checked: Boolean
  createdAt: DateTime
  id: String
  lesson: Lesson
  lessonID: String
  progress: Float
  student: User
  updatedAt: DateTime
  visitsNumber: Int
}

type LessonStructure {
  """Structure of a lesson with multiple items."""
  lessonItems: [LessonItem]
}

input LessonStructureInput {
  """Structure of a lesson with multiple items."""
  lessonItems: [LessonItemInput]
}

input Mark {
  """Level associated with the mark."""
  level: Int

  """Message or feedback associated with the mark."""
  message: String

  """Name of the mark or grade."""
  name: String
}

input MarksList {
  """List of marks or grades."""
  marksList: [Mark]
}

type Message {
  """Additional comments on the message."""
  comment: String

  """ID of the associated course page."""
  coursePageId: Int

  """Timestamp when the message was created."""
  createdAt: DateTime

  """Unique identifier for the message."""
  id: String

  """Link associated with the message."""
  link: String

  """Subject of the message."""
  subject: String

  """Text content of the message."""
  text: String

  """Timestamp when the message was last updated."""
  updatedAt: DateTime

  """Details of the user who sent the message."""
  user: User

  """ID of the user who sent the message."""
  userId: String
}

type MessageElement {
  author: String
  image: String
  isAiAssistantOn: Boolean
  name: String
  number: Int
  reactions: [Reaction]
  text: String
}

input MessageElementInput {
  author: String
  image: String
  isAiAssistantOn: Boolean
  name: String
  number: Int
  reactions: [ReactionInput]
  text: String
}

type Messages {
  messagesList: [MessageElement]
}

input MessagesInput {
  messagesList: [MessageElementInput]
}

type MiniForum {
  createdAt: DateTime
  id: String
  lesson: Lesson
  lessonId: String
  statements: [Statement]
  type: String
  updatedAt: DateTime
  user: User
  userId: String
  value: String
}

input Module {
  """List of lessons contained within the module."""
  lessonsInModule: [LessonInModule]

  """The name of the module."""
  name: String

  """The number of the module in the program."""
  number: Int
}

input Modules {
  """List of modules in the program."""
  modules: [Module]
}

type Mutation {
  addCoAuthor(coursePageId: String, email: String): User
  addToTeam(id: String): User
  addUserToCourse(coursePageId: String, email: String): User
  advancedSignup(careerTrackID: String, company: String, country: String, email: String, isFamiliar: Boolean, name: String, number: String, password: String, status: Status, surname: String, traffic_sources: Visits, uniID: String): AuthPayload
  botSignup(email: String, image: String, name: String, number: String, password: String, surname: String): AuthPayload
  cancelSubscription(id: String): Subscription
  checkAssignment(checked: Boolean, id: String): LessonResult
  copyLesson(coursePageId: String!, id: String!): Lesson
  createBotDialogue(journey: [String], source: String): BotDialogue
  createBusinessClient(comment: String, country: String, coursePageId: String, email: String, name: String, number: String, sales_cycle: SalesCycle, source: String, surname: String, type: String): BusinessClient
  createCertificate(coursePageId: String, studentId: String): Certificate
  createChallengeResult(correct: Int, lesson: String, time: Int, wrong: Int): ChallengeResult
  createChat(lessonId: String, messages: MessagesInput, name: String, type: String): Chat
  createChatResult(chatId: String, lessonId: String, name: String, text: String): ChatResult
  createClause(commentary: String, documentId: String, keywords: [String], number: Int, sample: String, title: String): Clause
  createComment(blockId: String, lessonId: String, text: String): Comment
  createConstruction(columnsNum: Int, elements: ConstructionElementsListInput, hasText: Boolean, lessonId: String, name: String, text: String, type: String): Construction
  createConstructionResult(answer: String, answers: ConstructionElementsListInput, attempts: Int, constructionId: String, elements: ConstructionElementsListInput, goal: String, lessonId: String): ConstructionResult
  createCoursePage(audience: String, courseType: String, description: String, image: String, published: Boolean, result: String, title: String): CoursePage
  createCourseVisit(coursePageId: String, studentId: String, visitsNumber: Int): CourseVisit
  createDocument(goal: String, lessonId: String, name: String, title: String): Document
  createDocumentResult(answers: [String], documentId: String, drafts: [String], lessonId: String): DocumentResult
  createFeedback(lessonId: String, studentId: String, text: String): Feedback
  createForum(lessonId: String, text: String): Forum
  createLesson(coursePageID: String, description: String, goal: String, name: String, number: Int, text: String): Lesson
  createLessonResult(lessonID: String, visitsNumber: Int): LessonResult
  createMiniForum(lessonId: String, type: String, value: String): MiniForum
  createMiniStatement(miniforumId: String, text: String): Statement
  createNewTest(answers: [String], comments: [String], complexTestAnswers: ComplexTestAnswersInput, correct: [Boolean], goal: String, ifRight: String, ifWrong: String, image: String, instructorName: String, lessonId: String, name: String, question: [String], type: String): NewTest
  createNote(lessonId: String, name: String, text: String): Note
  createOrder(comment: String, coursePageId: String, price: Int, promocode: String, userId: String): PaymentInfo
  createPost(image: String, summary: String, text: String, title: String): Post
  createPrivateOrder(coursePageId: String, promocode: String, userId: String): PaymentInfo
  createProblem(goal: String, lessonId: String, name: String, steps: ProblemStructureInput, text: String): Problem
  createProblemResult(answer: String, lessonId: String, problemID: String, revealed: [String]): ProblemResult
  createProcessManager(backgroundStory: String, edges: ProcessEdges, lessonId: String, name: String, nodes: ProcessNodes, remainingResources: Int): ProcessManager
  createQuiz(answer: String, answers: ComplexAnswerInput, goalType: String, ifRight: String, ifWrong: String, image: String, instructorName: String, lessonId: String, name: String, question: String, type: String): Quiz
  createQuizResult(answer: String, comment: String, correct: Boolean, explanation: String, goal: String, hint: String, ideasList: QuizIdeasInput, improvement: String, lessonId: String, quiz: String, result: String, type: String): QuizResult
  createRating(forumId: String, rating: Int): Rating
  createReferral(referrerId: String): Referral
  createReply(blockId: String, lessonId: String, sourceCommentId: String, text: String): Comment
  createShot(comments: [String], lessonId: String, name: String, parts: [String], title: String): Shot
  createShotResult(answer: String, lessonId: String, shotId: String): ShotResult
  createStatement(forumId: String, miniforumId: String, text: String): Statement
  createSubscription(endDate: DateTime, paymentID: String, startDate: DateTime, term: String, type: String, userId: String): Subscription
  createTeam(name: String): Team
  createTeamQuest(introduction: String, lessonId: String, solution: String, tasks: QuestList): TeamQuest
  createTeamQuestResult(answer: String, lessonId: String, teamQuestId: String): TeamQuestResult
  createTestPractice(failureText: String, goal: String, intro: String, lessonId: String, successText: String, tasks: [String], tasksNum: Int, text: String): TestPractice
  createTestPracticeResult(correct: Int, lessonId: String, tasks: [String], testPracticeId: String): TestPracticeResult
  createTestResult(answer: String, answerArray: [String], hint: String, lessonID: String, result: String, testID: String, type: String): TestResult
  createTextEditor(goal: String, lessonId: String, name: String, text: String, totalMistakes: Int): TextEditor
  createTextEditorResult(attempts: Int, correct: String, guess: String, lessonId: String, result: Boolean, textEditorId: String, type: String, wrong: String): TextEditorResult
  createUseful(buttonText: String, header: String, image: String, link: String, name: String, tags: [String]): Useful
  createUserLevel(consumedContent: ConsumedContentList, isProgressPublic: Boolean, level: Float, myProgress: MyProgressList): UserLevel
  deleteChat(id: String): Chat
  deleteClause(id: String): Clause
  deleteClient(id: String): BusinessClient
  deleteComment(id: String): Comment
  deleteConstruction(id: String): Construction
  deleteCoursePage(id: String): CoursePage
  deleteDocument(id: String): Document
  deleteLesson(id: String): Lesson
  deleteLessonResult(id: String): LessonResult
  deleteNewTest(id: String): NewTest
  deleteNote(id: String): Note
  deleteOrder(id: String): Order
  deletePost(id: String): Post
  deleteProblem(id: String): Problem
  deleteProcessManager(id: String): ProcessManager
  deleteQuiz(id: String): Quiz
  deleteReply(id: String): Comment
  deleteShot(id: String): Shot
  deleteStatement(id: String): Statement
  deleteTextEditor(id: String): TextEditor
  deleteUserLevel(id: String): UserLevel
  enrollOnCourse(coursePageId: String, id: String): User
  publishCourse(id: String, published: Boolean): CoursePage
  recordSession(id: String, traffic_sources: Visits): User
  remind(id: String, reminders: [DateTime]): CourseVisit
  requestReset(email: String): AuthMessage
  resetPassword(confirmPassword: String, password: String, resetToken: String): User
  sendBusinessClientEmail(communication_history: CommunicationHistoryInput, id: String): BusinessClient
  sendBusinessEmail(connection: String, email: String, firm: String, name: String, personalTouch: String, subject: String, type: String): User
  sendClientEmail(connection: String, email: String, firm: String, name: String, personalTouch: String, subject: String, type: String): User
  sendEmailToStudent(comment: String, id: String, info: EmailInfo, reminders: [DateTime]): CourseVisit
  sendMessage(comment: String, coursePageId: String, link: String, subject: String, text: String, userId: String): Message
  sendWelcomeEmail(courseId: String, email: String, name: String): CoursePage
  signin(email: String, password: String, traffic_sources: Visits): AuthPayload
  signout: SignOut
  signup(careerTrackID: String, company: String, country: String, email: String, isFamiliar: Boolean, name: String, number: String, password: String, referal: String, status: Status, surname: String, traffic_sources: Visits, uniID: String): AuthPayload
  singleSignin(email: String): AuthPayload
  singleSignup(email: String, image: String, isFamiliar: Boolean, name: String, password: String, surname: String): AuthPayload
  unenrollFromCourse(coursePageId: String, id: String): User
  updateActiveUser(active: Boolean, email: String): User
  updateBotDialogue(id: String, journey: [String], rating: Int): BotDialogue
  updateBusinessClient(comment: String, communication_history: CommunicationHistoryInput, id: String, number: String, sales_cycle: SalesCycle, tags: [String]): BusinessClient
  updateChat(id: String, isSecret: Boolean, link_clicks: Int, messages: MessagesInput, name: String, type: String): Chat
  updateClause(commentary: String, id: String, keywords: [String], number: Int, sample: String, text: String): Clause
  updateComment(id: String, status: CommentStatus, text: String): Comment
  updateConstruction(answer: [String], columnsNum: Int, complexity: Int, context: String, elements: ConstructionElementsListInput, goal: String, hint: String, id: String, name: String, type: String, variants: [String]): Construction
  updateConstructionResult(elements: ConstructionElementsListInput, id: String): ConstructionResult
  updateCoursePage(audience: String, authors: String, currency: String, description: String, discountPrice: Int, goals: [String], header: [String], id: String, image: String, methods: String, modules: Modules, news: String, nextStart: DateTime, price: Int, prices: Prices, promocode: PromocodeList, promotionId: String, result: String, reviews: ReviewsListInput, subheader: [String], tariffs: String, title: String, uptodateAt: DateTime, video: String): CoursePage
  updateCourseVisit(id: String, visitsNumber: Int): CourseVisit
  updateForum(id: String, text: String): Forum
  updateLesson(assignment: Boolean, audience: String, banner: String, challenge_num: Int, change: String, characters: [CharacterInput], context: String, description: String, goal: String, hasSecret: Boolean, id: String, name: String, number: Int, open: Boolean, short_structure: LessonStructureInput, story: String, structure: LessonStructureInput, tags: [String], tariffs: String, text: String, totalPoints: Int, type: String): Lesson
  updateLessonResult(id: String, progress: Int, visitsNumber: Int): LessonResult
  updateLessonUser(id: String, ownerEmail: String): Lesson
  updateMiniStatement(comments: [String], id: String): Statement
  updateNewTest(answers: [String], comments: [String], complexTestAnswers: ComplexTestAnswersInput, complexity: Int, correct: [Boolean], goal: String, goalType: String, id: String, ifRight: String, ifWrong: String, image: String, instructorName: String, name: String, next: NextTypeInput, question: [String], type: String): NewTest
  updateNote(complexity: Int, horizontal_image: String, id: String, instructorName: String, isSecret: Boolean, link_clicks: Int, name: String, next: NextTypeInput, text: String, type: String, vertical_image: String): Note
  updateOrder(id: String, isPaid: Boolean): Order
  updateOrderAuto(id: String, userId: String): Order
  updatePost(id: String, image: String, likes: Int, summary: String, tags: [String], text: String, title: String): Post
  updateProblem(complexity: Int, context: String, goal: String, id: String, isSecret: Boolean, name: String, steps: ProblemStructureInput, text: String, type: String): Problem
  updateProcessManager(backgroundStory: String, edges: ProcessEdges, id: String, name: String, nodes: ProcessNodes, remainingResources: Int): ProcessManager
  updatePublished(id: String, published: Boolean): Lesson
  updateQuiz(answer: String, answers: ComplexAnswerInput, check: String, complexity: Int, goal: String, goalType: String, id: String, ifRight: String, ifWrong: String, image: String, instructorName: String, isOrderOfAnswersImportant: Boolean, isScoringShown: Boolean, lessonId: String, name: String, next: NextTypeInput, question: String, shouldAnswerSizeMatchSample: Boolean, type: String): Quiz
  updateRating(id: String, rating: Int): Rating
  updateReply(id: String, status: CommentStatus, text: String): Comment
  updateScore(id: String, score: Int): User
  updateShot(comments: [String], id: String, name: String, parts: [String], title: String): Shot
  updateStatement(comments: [String], id: String): Statement
  updateStatementChecked(answered: Boolean, id: String): Statement
  updateSubscription(endDate: DateTime, id: String, isActive: Boolean, paymentID: String, term: String, type: String): Subscription
  updateTestPractice(failureText: String, id: String, intro: String, successText: String, tasks: [String], tasksNum: Int): TestPractice
  updateTextEditor(complexity: Int, context: String, goal: String, id: String, name: String, text: String, totalMistakes: Int): TextEditor
  updateUser(active: Boolean, comment: String, description: String, email: String, id: String, image: String, isFamiliar: Boolean, name: String, number: String, status: Status, surname: String, tags: [String], work: String): User
  updateUserLevel(consumedContent: ConsumedContentList, id: String, isProgressPublic: Boolean, learningStreak: [DateTime], level: Float, myProgress: MyProgressList): UserLevel
}

input MyProgress {
  """Name of the progress item."""
  name: String

  """Progress percentage or value."""
  progress: Int
}

input MyProgressList {
  """List of progress items."""
  progressList: [MyProgress]
}

input NewStudentFilter {
  """Filter by student ID."""
  id: String

  """Filter by student name."""
  name: String
}

type NewTest {
  answers: [String]
  comments: [String]
  complexTestAnswers: ComplexTestAnswers
  complexity: Int
  correct: [Boolean]
  createdAt: DateTime
  goal: String
  goalType: String
  id: String
  ifRight: String
  ifWrong: String
  image: String
  instructorName: String
  lesson: Lesson
  lessonID: Int
  lessonId: Int
  name: String
  next: NextType
  question: [String]
  testResults: [TestResult]
  type: String
  updatedAt: DateTime
  user: User
  userId: Int
}

type NextFalseType {
  """The type of the false condition."""
  type: String

  """The value associated with the false condition."""
  value: String
}

input NextFalseTypeInput {
  """The type of the false condition."""
  type: String

  """The value associated with the false condition."""
  value: String
}

type NextTrueType {
  """The type of the true condition."""
  type: String

  """The value associated with the true condition."""
  value: String
}

input NextTrueTypeInput {
  """The type of the true condition."""
  type: String

  """The value associated with the true condition."""
  value: String
}

type NextType {
  """List of branches for decision making."""
  branches: [BranchItem]

  """False condition configuration."""
  false: NextFalseType

  """True condition configuration."""
  true: NextTrueType
}

input NextTypeInput {
  """List of branches for decision making."""
  branches: [BranchItemInput]

  """False condition configuration."""
  false: NextFalseTypeInput

  """True condition configuration."""
  true: NextTrueTypeInput
}

type Note {
  complexity: Int
  createdAt: DateTime
  horizontal_image: String
  id: String
  instructorName: String
  isSecret: Boolean
  lesson: Lesson
  lessonId: Int
  link_clicks: Int
  name: String
  next: NextType
  text: String
  type: String
  updatedAt: DateTime
  user: User
  userId: Int
  vertical_image: String
}

type Offer {
  courseId: String
  createdAt: DateTime
  discountPrice: Float
  header: String
  id: String
  lesson: Lesson
  lessonId: String
  price: Float
  program: Program
  programId: String
  text: String
  type: String
  updatedAt: DateTime
  user: User
  userId: String
}

type Order {
  """Additional comments regarding the order."""
  comment: String

  """Details of the course page linked to the order."""
  coursePage: CoursePage

  """ID of the course page linked to the order."""
  coursePageId: Int

  """Timestamp when the order was created."""
  createdAt: DateTime

  """Unique identifier for the order."""
  id: String

  """Indicates whether the order has been paid."""
  isPaid: Boolean

  """Level or category of the order."""
  level: String

  """Payment identifier associated with the order."""
  paymentID: String

  """Price of the order."""
  price: Float

  """Promocode applied to the order."""
  promocode: String

  """Timestamp when the order was last updated."""
  updatedAt: DateTime

  """Details of the user associated with the order."""
  user: User

  """ID of the user associated with the order."""
  userId: Int
}

type PaymentInfo {
  order: Order
  url: String
}

type PaymentInfo2 {
  communityMember: CommunityMember
  url: String
}

"""
Defines the access level of a user, either as an admin or a regular user.
"""
enum Permission {
  ADMIN
  USER
}

type Position {
  """The x-coordinate of the position."""
  x: Int

  """The y-coordinate of the position."""
  y: Int
}

input PositionInput {
  """The x-coordinate of the position."""
  x: Int

  """The y-coordinate of the position."""
  y: Int
}

type Post {
  """Course page associated with the post."""
  coursePage: CoursePage

  """Timestamp when the post was created."""
  createdAt: DateTime

  """Email campaign associated with the post."""
  emailCampaign: EmailCampaign

  """ID of the email campaign associated with the post."""
  emailCampaignId: String

  """Unique identifier for the post."""
  id: String

  """Image URL associated with the post."""
  image: String

  """Language in which the post is written."""
  language: String

  """Introductory text or lead-in for the post."""
  leadin: String

  """ID of the lesson associated with the post."""
  lessonId: String

  """Number of likes the post has received."""
  likes: Int

  """Summary or brief description of the post."""
  summary: String

  """List of tags associated with the post."""
  tags: [String]

  """Main content or body of the post."""
  text: String

  """Title of the post."""
  title: String

  """Timestamp when the post was last updated."""
  updatedAt: DateTime

  """Details of the user who created the post."""
  user: User

  """ID of the user who created the post."""
  userId: String
}

input Price {
  """Text displayed on the purchase button."""
  buttonText: String

  """Currency of the price."""
  currency: String

  """Description of the price plan."""
  description: String

  """Discount applied to the price."""
  discount: Float

  """Name of the price plan."""
  name: String

  """Number of available places in the price plan."""
  places: Int

  """Price value in the specified currency."""
  price: Int

  """Timer or deadline for the price plan."""
  timer: String
}

input Prices {
  """List of available prices."""
  prices: [Price]
}

type Problem {
  complexity: Int
  context: String
  createdAt: DateTime
  goal: String
  id: String
  isSecret: Boolean
  lesson: Lesson
  lessonId: String
  name: String
  nodeID: String
  nodeType: String
  problemResults: [ProblemResult]
  steps: ProblemStructure
  text: String
  type: String
  updatedAt: DateTime
  user: User
  userId: Int
}

type ProblemItem {
  """The unique identifier for the problem item."""
  id: String

  """The index of the problem item."""
  index: Int

  """The next type configuration for this problem item."""
  next: NextType

  """The position of the problem item."""
  position: Position

  """The type of the problem item."""
  type: String
}

input ProblemItemInput {
  """The unique identifier for the problem item."""
  id: String

  """The index of the problem item."""
  index: Int

  """The next type configuration for this problem item."""
  next: NextTypeInput

  """The position of the problem item."""
  position: PositionInput

  """The type of the problem item."""
  type: String
}

type ProblemResult {
  """Answer provided by the student."""
  answer: String

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Depth or complexity of the problem."""
  depth: Int

  """Unique identifier for the problem result."""
  id: String

  """Details of the associated lesson."""
  lesson: Lesson

  """Legacy ID of the lesson."""
  lessonID: String

  """ID of the associated lesson."""
  lessonId: String

  """Details of the problem."""
  problem: Problem

  """Legacy ID of the problem."""
  problemID: String

  """ID of the problem."""
  problemId: String

  """Indicates if the solution was revealed."""
  revealed: Boolean

  """Details of the student."""
  student: User

  """ID of the student who completed the task."""
  studentId: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime
}

type ProblemStructure {
  problemItems: [ProblemItem]
}

input ProblemStructureInput {
  problemItems: [ProblemItemInput]
}

input ProcessEdge {
  """The unique identifier for the edge."""
  id: String

  """The source node ID for the edge."""
  source: String

  """The target node ID for the edge."""
  target: String
}

input ProcessEdges {
  """A list of process edges connecting nodes in the workflow."""
  processEdges: [ProcessEdge]
}

type ProcessManager {
  backgroundStory: String
  createdAt: DateTime
  id: String
  lesson: Lesson
  lessonId: String
  name: String
  remainingResources: Int
  updatedAt: DateTime
  user: User
  userId: String
}

input ProcessNode {
  """Indicates whether the node is updatable."""
  canNodeBeUpdated: Boolean

  """A description of the node."""
  description: String

  """A formula associated with the node."""
  formula: String

  """The unique identifier for the node."""
  id: String

  """The label displayed for the node."""
  label: String

  """The type of the process node."""
  type: String

  """The value or data associated with the node."""
  value: String
}

input ProcessNodes {
  """A list of process nodes in the workflow."""
  processNodes: [ProcessNode]
}

type Program {
  description: String
  id: Int
  image: String
  months: Int
  orders: [Order]
  promotionId: Int
  syllabus: String
  title: String
}

input ProgramModule {
  """Header for the program module."""
  header: String

  """Topics covered in the module."""
  topic: [String]
}

input Promocode {
  """Name of the promocode."""
  name: String

  """Discount value of the promocode."""
  value: Float
}

input PromocodeList {
  """List of available promocodes."""
  promocodes: [Promocode]
}

type Query {
  botDialogue(id: String!): BotDialogue
  botDialogues(
    """ID of the bot dialogue to fetch."""
    id: String
  ): [BotDialogue]
  businessClient(id: String!): BusinessClient
  businessClients: [BusinessClient]
  certificate(id: String!): Certificate
  certificates(
    """ID of the certificate to fetch."""
    id: String
  ): [Certificate]
  challengeResults(
    """ID of the challenge result to fetch."""
    id: String
  ): [ChallengeResult]
  chat(id: String!): Chat
  chatResult(id: String!): ChatResult
  chatResults(
    """ID of the chat result to fetch."""
    id: String
  ): [ChatResult]
  chats(
    """ID of the chat to fetch."""
    id: String
  ): [Chat]
  comment(id: String!): Comment
  comments(
    """ID of the comment to fetch."""
    id: String
  ): [Comment]
  constructionResult(id: String!): ConstructionResult
  constructionResults(
    """ID of the associated construction."""
    constructionId: String

    """ID of the construction result to fetch."""
    id: String

    """ID of the associated lesson."""
    lessonId: String

    """ID of the student."""
    studentId: String
  ): [ConstructionResult]
  coursePage(id: String!): CoursePage
  coursePages(
    """ID of the course creator to filter by."""
    co_authorId: String

    """Filter by course type."""
    courseType: String

    """ID of the course page to fetch."""
    id: String

    """Sort direction for createdAt: 'asc' or 'desc'"""
    orderByCreatedAt: String

    """Filter by published status."""
    published: Boolean

    """ID of the student to filter by."""
    studentId: String

    """ID of the course creator to filter by."""
    userId: String
  ): [CoursePage]
  courseVisit(id: String!): CourseVisit
  courseVisits(
    """ID of the course visit to fetch."""
    id: String
  ): [CourseVisit]
  feedbacks(
    """ID of the feedback to fetch."""
    id: String
  ): [Feedback]
  lesson(id: String!): Lesson
  lessonResults(
    """ID of the course page."""
    coursePageId: String

    """ID of the lesson."""
    lessonId: String

    """ID of the user."""
    studentId: String
  ): [LessonResult]
  lessons(
    """ID of the coursePage to fetch."""
    coursePageId: String

    """ID of the lesson to fetch."""
    id: String
  ): [Lesson]
  loadLessonData(lessonId: String): LessonData
  me: User
  newTest(id: String!): NewTest
  newTests(
    """ID of the new test to fetch."""
    id: String
  ): [NewTest]
  note(id: String!): Note
  notes(
    """ID of the note to fetch."""
    id: String
  ): [Note]
  order(id: String!): Order
  orders(
    """ID of the order to fetch."""
    id: String
  ): [Order]
  post(id: String!): Post
  posts(
    """ID of the post to fetch."""
    id: String

    """Language of the post to fetch."""
    language: String

    """Sort direction for createdAt: 'asc' or 'desc'"""
    orderByCreatedAt: String
  ): [Post]
  problemResult(id: String!): ProblemResult
  problemResults(
    """ID of the problem result to fetch."""
    id: String

    """ID of the associated lesson."""
    lessonId: String
  ): [ProblemResult]
  processManager(id: String!): ProcessManager
  processManagers(
    """ID of the process manager to fetch."""
    id: String
  ): [ProcessManager]
  questResults(lessonId: String, list_of_ids: [String]): QuestResults
  quiz(id: String!): Quiz
  quizResult(id: String!): QuizResult
  quizResults(
    """ID of the quiz result to fetch."""
    id: String

    """ID of the associated lesson."""
    lessonId: String
  ): [QuizResult]
  quizes(
    """ID of the quiz to fetch."""
    id: String
  ): [Quiz]
  rating(id: String!): Rating
  ratings(
    """ID of the forum to fetch ratings for."""
    forumId: String
  ): [Rating]
  referral(id: String!): Referral
  referrals(
    """ID of the referral to fetch."""
    id: String
  ): [Referral]
  shortLesson(id: String!): Lesson
  stats(lessonId: String, userId: String): Stats
  studentsAnalytics(
    """Id"""
    lessonId: String
  ): [User]
  subscribers: [User]
  subscriptionsByUser(userId: String!): [Subscription]
  testPracticeResult(id: String!): TestPracticeResult
  testPracticeResults(
    """ID of the test practice result to fetch."""
    id: String
  ): [TestPracticeResult]
  testResult(id: String!): TestResult
  testResults(
    """ID of the test result to fetch."""
    id: String

    """ID of the associated lesson."""
    lessonId: String
  ): [TestResult]
  textEditorResult(id: String!): TextEditorResult
  textEditorResults(
    """ID of the text editor result to fetch."""
    id: String

    """ID of the associated lesson."""
    lessonId: String
  ): [TextEditorResult]
  useful(id: String!): Useful
  usefuls(
    """ID of the useful to fetch."""
    id: String
  ): [Useful]
  user(id: String!): User
  userLevel(id: String!): UserLevel
  userLevels(
    """ID of the user level to fetch."""
    id: String
  ): [UserLevel]
  users(
    activeDate: DateTime

    """Id"""
    coursePageId: String

    """Email of the user to fetch."""
    email: String

    """ID of the user to fetch."""
    id: String
    initialDate: DateTime
    lastDate: DateTime

    """tag"""
    tag: String
  ): [User]
}

input QuestElement {
  """The position number of the element in the quest."""
  number: Int

  """The type of the quest element."""
  type: String

  """The value of the quest element."""
  value: String
}

input QuestList {
  """List of elements in the quest."""
  questElements: [QuestElement]
}

type QuestResults {
  """List of lesson results associated with quest results."""
  lessonResults: [LessonResult]

  """List of quiz results associated with quest results."""
  quizResults: [QuizResult]

  """List of test results associated with quest results."""
  testResults: [TestResult]
}

type Quiz {
  answer: String
  answers: ComplexAnswer
  check: String
  complexity: Int
  createdAt: DateTime
  goal: String
  goalType: String
  id: String
  ifRight: String
  ifWrong: String
  image: String
  instructorName: String
  isOrderOfAnswersImportant: Boolean
  isScoringShown: Boolean
  lesson: Lesson
  lessonID: Int
  lessonId: Int
  name: String
  next: NextType
  question: String
  quizResults: [QuizResult]
  shouldAnswerSizeMatchSample: Boolean
  type: String
  updatedAt: DateTime
  user: User
  userId: Int
}

type QuizIdea {
  feedback: String

  """The core idea or concept of the quiz."""
  idea: String
  matchedAnswer: String

  """ID of the next step or quiz."""
  next_id: String

  """Type of the next step or quiz."""
  next_type: String

  """The result associated with the quiz idea."""
  result: String
}

input QuizIdeaInput {
  feedback: String

  """The core idea or concept of the quiz."""
  idea: String
  matchedAnswer: String

  """ID of the next step or quiz."""
  next_id: String

  """Type of the next step or quiz."""
  next_type: String

  """The result associated with the quiz idea."""
  result: String
}

type QuizIdeas {
  """List of ideas for quizzes."""
  quizIdeas: [QuizIdea]
}

input QuizIdeasInput {
  """List of ideas for quizzes."""
  quizIdeas: [QuizIdeaInput]
}

type QuizResult {
  """Answer provided by the student."""
  answer: String

  """Number of attempts made for the quiz."""
  attempts: Int

  """Comment on the quiz result."""
  comment: String

  """Indicates whether the answer is correct."""
  correct: Boolean

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Explanation provided for the quiz."""
  explanation: String

  """Hint provided to the student, if any."""
  hint: String

  """Unique identifier for the quiz result."""
  id: String

  """Student's ideas or input for the quiz."""
  ideas: String

  """List of ideas for the quiz."""
  ideasList: QuizIdeas

  """Suggestions for improvement."""
  improvement: String

  """Details of the lesson."""
  lesson: Lesson

  """Legacy ID of the lesson."""
  lessonID: String

  """ID of the lesson associated with the quiz."""
  lessonId: String

  """Details of the quiz."""
  quiz: Quiz

  """ID of the quiz."""
  quizId: String

  """The result of the quiz (pass/fail)."""
  result: String

  """Details of the student."""
  student: User

  """ID of the student who took the quiz."""
  studentId: String

  """Type of the quiz."""
  type: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime
}

type Rating {
  createdAt: DateTime
  forum: Forum
  forumId: Int
  id: String
  rating: Float
  updatedAt: DateTime
  user: User
  userId: Int
}

type Reaction {
  comment: String
  image: String
  name: String
  reaction: String
}

input ReactionInput {
  comment: String
  image: String
  name: String
  reaction: String
}

type Referral {
  """Timestamp when the referral was created."""
  createdAt: DateTime

  """Unique identifier for the referral."""
  id: String

  """Indicates if the referral has been counted."""
  isCounted: Boolean

  """Details of the referee."""
  referee: User

  """ID of the referee."""
  refereeId: Int

  """Details of the referrer."""
  referrer: User

  """ID of the referrer."""
  referrerId: Int

  """Timestamp when the referral was last updated."""
  updatedAt: DateTime
}

"""Represents a single renewal record."""
type Renewal {
  """Date of the renewal."""
  date: String

  """Price associated with the renewal."""
  price: String

  """Type of renewal."""
  type: String
}

"""List of renewal records."""
type Renewals {
  """List of individual renewals."""
  renewals: [Renewal]
}

type Review {
  """Image URL associated with the review."""
  image: String

  """Name of the reviewer."""
  name: String

  """Source of the review."""
  source: String

  """Review text content."""
  text: String
}

input ReviewInput {
  """Image URL associated with the review."""
  image: String

  """Name of the reviewer."""
  name: String

  """Source of the review."""
  source: String

  """Review text content."""
  text: String
}

type ReviewsList {
  """List of reviews."""
  reviews: [Review]
}

input ReviewsListInput {
  """List of reviews."""
  reviewsInput: [ReviewInput]
}

input SalesCycle {
  """List of stages in the sales cycle."""
  stages: [SalesStage]
}

input SalesStage {
  """Date associated with the sales stage."""
  date: String

  """Name of the sales stage."""
  name: String
}

type Shot {
  comments: [String]
  createdAt: DateTime
  id: String
  lesson: Lesson
  lessonID: String
  lessonId: String
  name: String
  parts: [String]
  shotResults: [ShotResult]
  title: String
  updatedAt: DateTime
  user: User
  userId: String
}

type ShotResult {
  """Answer provided by the student."""
  answer: String

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Depth or complexity of the task."""
  depth: Int

  """Unique identifier for the shot result."""
  id: String

  """Details of the associated lesson."""
  lesson: Lesson

  """ID of the associated lesson."""
  lessonId: String

  """Details of the shot."""
  shot: Shot

  """ID of the shot."""
  shotId: String

  """Details of the student."""
  student: User

  """ID of the student who completed the task."""
  studentId: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime
}

type SignOut {
  message: String
}

type Statement {
  answered: Boolean
  comments: [String]
  createdAt: DateTime
  forum: Forum
  forumId: Int
  id: String
  text: String
  updatedAt: DateTime
  user: User
  userId: Int
}

type Stats {
  """List of construction results associated with stats."""
  constructionResults: [ConstructionResult]

  """List of document results associated with stats."""
  documentResults: [DocumentResult]

  """List of feedback entries associated with stats."""
  feedbacks: [Feedback]

  """List of problem results associated with stats."""
  problemResults: [ProblemResult]

  """List of quiz results associated with stats."""
  quizResults: [QuizResult]

  """List of shot results associated with stats."""
  shotResults: [ShotResult]

  """List of test practice results associated with stats."""
  testPracticeResults: [TestPracticeResult]

  """List of test results associated with stats."""
  testResults: [TestResult]

  """List of text editor results associated with stats."""
  textEditorResults: [TextEditorResult]
}

"""
Represents the role or status of a user, such as student, lawyer, author, savvy author, or HR personnel.
"""
enum Status {
  AUTHOR
  HR
  LAWYER
  SAVVY_AUTHOR
  STUDENT
}

type Subscription {
  """Timestamp when the subscription was created."""
  createdAt: DateTime

  """End date of the subscription."""
  endDate: DateTime

  """Unique identifier for the subscription."""
  id: String

  """Indicates if the subscription is active."""
  isActive: Boolean

  """Payment ID associated with the subscription."""
  paymentID: String

  """List of renewals associated with the subscription."""
  renewals: [Renewal]

  """Start date of the subscription."""
  startDate: DateTime

  """Term or duration of the subscription."""
  term: String

  """Type of the subscription."""
  type: String

  """Timestamp when the subscription was last updated."""
  updatedAt: DateTime

  """Details of the user associated with the subscription."""
  user: User

  """ID of the user associated with the subscription."""
  userId: String
}

input Syllabus {
  """List of program modules in the syllabus."""
  modules: [ProgramModule]
}

type Team {
  """Timestamp when the team was created."""
  createdAt: DateTime

  """Founder of the team."""
  founder: User

  """Unique identifier for the team."""
  id: String

  """Image URL representing the team."""
  image: String

  """Name of the team."""
  name: String

  """List of orders associated with the team."""
  orders: [Order]

  """Timestamp when the team was last updated."""
  updatedAt: DateTime

  """List of users in the team."""
  users: [User]
}

type TeamQuest {
  createdAt: DateTime
  id: String
  introduction: String
  lesson: Lesson
  lessonId: String
  solution: String
  updatedAt: DateTime
  user: User
  userId: String
}

type TeamQuestResult {
  """Answer provided during the team quest."""
  answer: String

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Unique identifier for the team quest result."""
  id: String

  """Details of the associated lesson."""
  lesson: Lesson

  """ID of the associated lesson."""
  lessonId: String

  """Details of the student."""
  student: User

  """ID of the student who participated in the team quest."""
  studentId: String

  """Details of the team quest."""
  teamQuest: TeamQuest

  """ID of the team quest."""
  teamQuestId: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime
}

type TestPractice {
  createdAt: DateTime
  failureText: String
  goal: String
  id: String
  intro: String
  lessonId: Int
  successText: String
  tasks: [String]
  tasksNum: Int
  text: String
  updatedAt: DateTime
}

type TestPracticeResult {
  """Indicates whether the test practice was correct."""
  correct: Boolean

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Unique identifier for the test practice result."""
  id: String

  """Details of the associated lesson."""
  lesson: Lesson

  """ID of the associated lesson."""
  lessonId: String

  """Details of the student."""
  student: User

  """ID of the student who completed the test practice."""
  studentId: String

  """Details of the test practice."""
  testPractice: TestPractice

  """ID of the test practice."""
  testPracticeId: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime
}

type TestResult {
  """Answer provided by the student."""
  answer: String

  """Array of answers if multiple are possible."""
  answerArray: [String]

  """Number of attempts made for the test."""
  attempts: Int

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Hint provided to the student, if any."""
  hint: String

  """Unique identifier for the test result."""
  id: String

  """Details of the lesson."""
  lesson: Lesson

  """Legacy ID of the lesson."""
  lessonID: String

  """ID of the lesson associated with the test."""
  lessonId: String

  """The result of the test (pass/fail)."""
  result: String

  """Details of the student."""
  student: User

  """ID of the student who took the test."""
  studentId: String

  """Details of the test."""
  test: NewTest

  """Legacy ID of the test."""
  testID: String

  """ID of the test."""
  testId: String

  """Type of the test."""
  type: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime
}

type TextEditor {
  complexity: Int
  context: String
  createdAt: DateTime
  goal: String
  id: String
  lesson: Lesson
  lessonId: Int
  name: String
  text: String
  textEditorResults: [TextEditorResult]
  totalMistakes: Int
  updatedAt: DateTime
  user: User
  userId: Int
}

type TextEditorResult {
  """Number of attempts made for the task."""
  attempts: Int

  """Indicates if the answer was correct."""
  correct: String

  """Timestamp when the result was created."""
  createdAt: DateTime

  """Guesses made by the student."""
  guess: String

  """Unique identifier for the text editor result."""
  id: String

  """Details of the associated lesson."""
  lesson: Lesson

  """ID of the associated lesson."""
  lessonId: String

  """Result of the text editor activity."""
  result: String

  """Details of the student."""
  student: User

  """ID of the student who completed the task."""
  studentId: String

  """Details of the text editor."""
  textEditor: TextEditor

  """ID of the associated text editor."""
  textEditorId: String

  """Type of the text editor activity."""
  type: String

  """Timestamp when the result was last updated."""
  updatedAt: DateTime

  """Details of incorrect answers or inputs."""
  wrong: String
}

type Uni {
  """Capacity of the university in terms of number of students."""
  capacity: Int

  """Unique identifier for the university."""
  id: Int

  """The title or name of the university."""
  title: String
}

type Useful {
  """Text displayed on the associated button."""
  buttonText: String

  """Timestamp when the Useful entry was created."""
  createdAt: DateTime

  """Header text for the Useful entry."""
  header: String

  """Unique identifier for the Useful entry."""
  id: Int

  """Image URL associated with the Useful entry."""
  image: String

  """Link associated with the Useful entry."""
  link: String

  """Name of the Useful entry."""
  name: String

  """Timestamp when the Useful entry was last updated."""
  updatedAt: DateTime
}

type User {
  """Indicates if the user account is active."""
  active: Boolean

  """Authentication type for the user."""
  authType: String

  """List of certificates earned by the user."""
  certificates: [Certificate]

  """Challenge results associated with the user."""
  challengeResults: [ChallengeResult]

  """Course pages co-owned by the user."""
  co_coursePages: [CoursePage]

  """Additional comments or notes for the user."""
  comment: String

  """Comments made by the user."""
  comments: [Comment]

  """Company associated with the user."""
  company: Company

  """Country of residence of the user."""
  country: String

  """Course pages owned by the user."""
  coursePages: [CoursePage]

  """List of course visits made by the user."""
  courseVisits: [CourseVisit]

  """Timestamp when the user was created."""
  createdAt: DateTime

  """Description or bio of the user."""
  description: String

  """Email address of the user."""
  email: String

  """Unique identifier for the user."""
  id: String

  """Profile image URL of the user."""
  image: String

  """Indicates if the user is familiar with the terms and privacy policy."""
  isFamiliar: Boolean

  """Lesson results associated with the user."""
  lessonResults: [LessonResult]

  """Lessons associated with the user."""
  lessons: [Lesson]

  """User level or rank."""
  level: UserLevel

  """List of messages associated with the user."""
  messages: [Message]

  """Teams where the user is a member."""
  myTeams: [Team]

  """First name of the user."""
  name: String

  """List of new subjects associated with the user."""
  new_subjects: [CoursePage]

  """Contact number of the user."""
  number: String

  """List of orders placed by the user."""
  orders: [Order]

  """Password for the user account."""
  password: String

  """Permissions assigned to the user."""
  permissions: [String]

  """List of ratings given by the user."""
  ratings: [Rating]

  """Resume or CV of the user."""
  resume: String

  """Score associated with the user."""
  score: Float

  """Status or role of the user."""
  status: String

  """Feedback given to students by the user."""
  studentFeedback: [Feedback]

  """List of subscriptions associated with the user."""
  subscriptions: [Subscription]

  """Surname of the user."""
  surname: String

  """Tags associated with the user."""
  tags: [String]

  """Feedback received from teachers."""
  teacherFeedback: [Feedback]

  """Results of team quests associated with the user."""
  teamQuestResults: [TeamQuestResult]

  """List of team quests associated with the user."""
  teamQuests: [TeamQuest]

  """Teams associated with the user."""
  teams: [Team]

  """Sources of traffic associated with the user."""
  traffic_sources: [String]

  """Timestamp when the user was last updated."""
  updatedAt: DateTime

  """Work or profession of the user."""
  work: String
}

type UserLevel {
  """Timestamp when the user level was created."""
  createdAt: DateTime

  """Unique identifier for the user level."""
  id: String

  """Indicates if the user's progress is public."""
  isProgressPublic: Boolean

  """Learning streak of the user."""
  learningStreak: String

  """Level or rank of the user."""
  level: String

  """Timestamp when the user level was last updated."""
  updatedAt: DateTime

  """Details of the associated user."""
  user: User
}

input Visit {
  """Date of the visit."""
  date: String

  """UTM campaign associated with the visit."""
  utm_campaign: String

  """UTM medium associated with the visit."""
  utm_medium: String

  """UTM source associated with the visit."""
  utm_source: String
}

input Visits {
  """List of visits made by the user."""
  visitsList: [Visit]
}