# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  createCoursePage(
    title: String!
    description: String!
    image: String
    news: String
    courseType: CourseType
    price: Int
    audience: String
    result: String
    tariffs: String
    methods: String
    video: String
    discountPrice: Int
    uniID: ID
    published: Boolean
  ): CoursePage!
  updateCoursePage(
    id: ID!
    title: String
    description: String
    news: String
    audience: String
    result: String
    tariffs: String
    methods: String
    video: String
    image: String
    banner: String
    courseType: CourseType
    published: Boolean
  ): CoursePage
  createLesson(
    name: String!
    number: Int
    text: String!
    description: String
    coursePageID: ID!
  ): Lesson!
  updateLesson(
    id: ID!
    name: String
    number: Int
    text: String
    description: String
    type: Type
    map: [Json]
  ): Lesson
  updatePublished(id: ID!, published: Boolean): Lesson
  updateUni(id: ID!, capacity: Int, paidMonths: Int): Uni
  deleteLesson(id: ID!): Lesson
  createPointA(description: String, coursePageID: ID!): PointA!
  updatePointA(id: ID!, description: String): PointA
  createTest(
    question: String!
    answer1: String!
    answer1Correct: String!
    answer2: String!
    answer2Correct: String!
    answer3: String
    answer3Correct: String
    answer4: String
    answer4Correct: String
    lessonID: ID
  ): Test!
  createNewTest(
    question: [String!]
    answers: [String!]
    correct: [Boolean!]
    lessonID: ID
  ): NewTest!
  updateNewTest(
    id: ID!
    question: [String!]
    answers: [String!]
    correct: [Boolean!]
    next: Json
  ): NewTest
  createLessonResult(visitsNumber: Int, lessonID: ID): LessonResult!
  updateLessonResult(id: ID!, visitsNumber: Int): LessonResult!
  createTestResult(
    answer: String
    attempts: Int
    lessonID: ID
    testID: ID
  ): TestResult!
  createQuizResult(
    answer: String
    attempts: Int
    lessonID: ID
    quiz: ID
  ): QuizResult!
  createProblemResult(
    answer: String
    revealed: [String!]
    lessonID: ID
    problemID: ID
  ): ProblemResult!
  createTextEditorResult(
    attempts: Int
    wrong: String!
    correct: String!
    guess: String!
    lesson: ID
    textEditor: ID
  ): TextEditorResult!
  updateTextEditor(
    id: ID!
    name: String
    text: String
    totalMistakes: Int
  ): TextEditor!
  createConstructionResult(
    answer: String
    attempts: Int
    lessonID: ID
    inputs: [String]
    constructionID: ID
  ): ConstructionResult!
  deleteNewTest(id: ID!): NewTest
  createQuiz(question: String!, answer: String, lessonID: ID): Quiz!
  updateQuiz(id: ID!, question: String, answer: String, next: Json): Quiz!
  deleteQuiz(id: ID!): Quiz
  createPointATest(
    question: String!
    answer1: String!
    answer1Correct: String!
    answer2: String!
    answer2Correct: String!
    answer3: String
    answer3Correct: String
    answer4: String
    answer4Correct: String
    coursePageID: ID
  ): PointATest!
  deletePointATest(id: ID!): PointATest
  createProblem(
    text: String!
    lessonID: ID!
    nodeID: ID
    nodeType: String
  ): Test!
  updateProblem(text: String, nodeID: ID, nodeType: String): Test!
  deleteProblem(id: ID!): Problem
  createConstruction(
    name: String!
    variants: [String!]
    answer: [String!]
    hint: String
    type: String!
    lessonID: ID!
  ): Construction!
  deleteConstruction(id: ID!): Construction
  createSandbox(
    text: String!
    video: String
    link: String
    sandboxPageID: ID!
  ): Sandbox!
  deleteSandbox(id: ID!): Sandbox
  createSandboxPageGoal(goal: String!, sandboxPageID: ID!): SandboxPageGoal!
  createTextEditor(
    name: String!
    text: String!
    totalMistakes: Int
    lessonID: ID!
  ): TextEditor!
  deleteTextEditor(id: ID!): TextEditor
  createApplication(
    applicantId: ID!
    applicantName: String!
    message: String
    coursePageID: ID!
  ): Application!
  deleteApplication(id: ID!): Application
  signup(
    email: String!
    password: String!
    name: String!
    surname: String
    status: Status
    uniID: ID
    company: ID
    careerTrackID: ID
    isFamiliar: Boolean!
  ): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  updatePermissions(permissions: [Permission], userId: ID!): User
  familiarize(id: ID!): User
  likePost(id: ID!, likes: Int): Sandbox
  addToFavourites(id: ID!, favourites: [ID]): User
  enrollOnCourse(id: ID!, subjects: [ID], coursePageID: ID): User
  addUserToCoursePage(id: ID!, students: [ID]): CoursePage
  updateUser(
    id: ID!
    name: String
    email: String
    careerTrackID: ID
    uniID: ID
    resume: String
    company: ID
    coverLetter: String
    status: Status
    visitedLessons: [String]
    isFamiliar: Boolean
  ): User
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  createOrder(coursePageID: ID!, userID: ID, price: Int!): Order!
  deleteOrder(id: ID!): Order
  createExamAnswer(examQuestionID: ID!, answer: String!): ExamAnswer!
  createExamQuestion(coursePageID: ID!, question: String!): ExamQuestion!
  updateExamQuestion(id: ID!, question: String): ExamQuestion
  createLegalPortfolio(
    cv: String
    portfolioIDs: [ID]
    resume: String
  ): LegalPortfolio!
  createArticle(
    tag: String
    title: String
    text: String
    coursePageIDs: [ID]
  ): Article!
  createShot(
    title: String!
    parts: [String!]
    comments: [String!]
    lessonID: ID
  ): Shot!
  createShotResult(answer: String!, shotID: ID, lessonID: ID): Shot!
  deleteShot(id: ID!): Shot
  updateShots(
    id: ID!
    title: String!
    parts: [String!]
    comments: [String!]
  ): CoursePage
  createNote(text: String, lessonID: ID): Note!
  updateNote(id: ID!, text: String, next: Json): Note
  deleteNote(id: ID!): Note
  createFeedback(text: String!, lesson: ID, student: ID): Feedback!
  createCourseVisit(visitsNumber: Int, coursePage: ID): CourseVisit!
  updateCourseVisit(id: ID!, visitsNumber: Int): CourseVisit!
  createExam(
    lesson: ID
    name: String
    question: String
    nodeID: ID
    nodeType: String
  ): Exam!
  updateExam(id: ID!, nodeID: ID, nodeType: String): Exam
  deleteExam(id: ID!): Exam
  createExamResult(lesson: ID, exam: ID, answers: [String]): ExamResult!
  createDocument(title: String!, lesson: ID): Document!
  deleteDocument(id: ID!): Document!
  createClause(
    commentary: String
    sample: String
    number: Int
    keywords: [String]
    document: ID
  ): Clause!
  deleteClause(id: ID!): Clause!
  createDocumentResult(
    answers: [String]
    drafts: [String]
    lesson: ID
    document: ID
  ): DocumentResult!
}

type Query {
  coursePages(
    where: CoursePageWhereInput
    orderBy: CoursePageOrderByInput
    skip: Int
    first: Int
  ): [CoursePage]!
  coursePage(where: CoursePageWhereUniqueInput!): CoursePage
  pointA(where: PointAWhereUniqueInput!): PointA
  pointAs(
    where: PointAWhereInput
    orderBy: PointAOrderByInput
    skip: Int
    first: Int
  ): [PointA]!
  pointATest(where: PointATestWhereUniqueInput!): PointATest
  pointATests(
    where: PointATestWhereInput
    orderBy: PointATestOrderByInput
    skip: Int
    first: Int
  ): [PointATest]!
  sandboxPages(
    where: SandboxPageWhereInput
    orderBy: SandboxPageOrderByInput
    skip: Int
    first: Int
  ): [SandboxPage]!
  sandboxPagesConnection(where: SandboxPageWhereInput): SandboxPageConnection!
  sandboxPageGoals(
    where: SandboxPageGoalWhereInput
    orderBy: SandboxPageGoalOrderByInput
    skip: Int
    first: Int
  ): [SandboxPageGoal]!
  sandboxPage(where: SandboxPageWhereUniqueInput!): SandboxPage
  sandboxes(
    where: SandboxWhereInput
    orderBy: SandboxOrderByInput
    skip: Int
    first: Int
  ): [Sandbox]!
  sandbox(where: SandboxWhereUniqueInput!): Sandbox
  sandboxesConnection(where: SandboxWhereInput): SandboxConnection!
  lessons(
    where: LessonWhereInput
    orderBy: LessonOrderByInput
    skip: Int
    first: Int
  ): [Lesson]!
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessonResults(
    where: LessonResultWhereInput
    orderBy: LessonResultOrderByInput
  ): [LessonResult]!
  textEditor(where: TextEditorWhereUniqueInput!): TextEditor
  textEditors(
    where: TextEditorWhereInput
    orderBy: TextEditorOrderByInput
    skip: Int
    first: Int
  ): [TextEditor]!
  applications(
    where: ApplicationWhereInput
    orderBy: ApplicationOrderByInput
    skip: Int
    first: Int
  ): [Application]!
  coursePagesConnection(where: CoursePageWhereInput): CoursePageConnection!
  lessonsConnection(where: LessonWhereInput): LessonConnection!
  testsConnection(where: TestWhereInput): TestConnection!
  tests(
    where: TestWhereInput
    orderBy: TestOrderByInput
    skip: Int
    first: Int
  ): [Test]!
  test(where: TestWhereUniqueInput!): Test
  construction(where: ConstructionWhereUniqueInput!): Construction
  constructions(
    where: ConstructionWhereInput
    orderBy: ConstructionOrderByInput
    skip: Int
    first: Int
  ): [Construction]!
  problems(
    where: ProblemWhereInput
    orderBy: ProblemOrderByInput
    skip: Int
    first: Int
  ): [Problem]!
  problem(where: ProblemWhereUniqueInput!): Problem
  problemsConnection(where: ProblemWhereInput): ProblemConnection!
  me: User
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput!): [User]!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput): [Order]!
  careerTrack(where: CareerTrackWhereUniqueInput!): CareerTrack
  careerTracks(
    where: CareerTrackWhereInput
    orderBy: CareerTrackOrderByInput
    skip: Int
    first: Int
  ): [CareerTrack]!
  newTest(where: NewTestWhereUniqueInput!): NewTest
  newTests(
    where: NewTestWhereInput
    orderBy: NewTestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [NewTest]!
  quiz(where: QuizWhereUniqueInput!): Quiz
  quizzes(
    where: QuizWhereInput
    orderBy: QuizOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Quiz]!
  examQuestions(
    where: ExamQuestionWhereInput
    orderBy: ExamQuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ExamQuestion]!
  article(where: ArticleWhereUniqueInput!): Article
  articles(
    where: ArticleWhereInput
    orderBy: ArticleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Article]!
  courseVisits(
    where: CourseVisitWhereInput
    orderBy: CourseVisitOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CourseVisit]!
  note(where: NoteWhereUniqueInput!): Note
  exams(
    where: ExamWhereInput
    orderBy: ExamOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Exam]!
  documents(
    where: ExamWhereInput
    orderBy: ExamOrderByInput
    skip: Int
  ): [Document]!
  clause(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int): [Clause]!
  documentResults(
    where: DocumentResultWhereInput
    orderBy: DocumentResultOrderByInput
    skip: Int
  ): [DocumentResult!]
  testResults(
    where: TestResultWhereInput
    orderBy: TestResultOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [TestResult!]
  quizResults(
    where: QuizResultWhereInput
    orderBy: QuizResultOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [QuizResult!]
}

type User {
  id: ID!
  name: String!
  surname: String
  email: String!
  description: String
  permissions: [Permission!]!
  isFamiliar: Boolean!
  favourites: [ID]
  subjects: [ID]
  new_subjects: [CoursePage]
  coursePages: [CoursePage]
  lessons: [Lesson]!
  orders: [Order]!
  careerTrack: CareerTrack
  visitedLessons: [String]
  careerTrackID: ID
  status: Status
  coverLetter: String
  resume: String
  uni: Uni
  uniID: ID
  company: Company
  testResults: [TestResult]
  quizResults: [QuizResult]
  problemResults: [ProblemResult]
  textEditorResults: [TextEditorResult]
  lessonResults: [LessonResult]
  examAnswers: [ExamAnswer]
  studentFeedback: [Feedback]
  teacherFeedback: [Feedback]
}
