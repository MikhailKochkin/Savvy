type AggregateApplication {
  count: Int!
}

type AggregateConstruction {
  count: Int!
}

type AggregateCoursePage {
  count: Int!
}

type AggregateLesson {
  count: Int!
}

type AggregateProblem {
  count: Int!
}

type AggregateSandbox {
  count: Int!
}

type AggregateSandboxPage {
  count: Int!
}

type AggregateSandboxPageGoal {
  count: Int!
}

type AggregateTest {
  count: Int!
}

type AggregateTextEditor {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application {
  id: ID!
  applicantId: ID!
  applicantName: String!
  message: String
  coursePage: CoursePage!
  coursePageID: ID!
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  applicantId: ID!
  applicantName: String!
  message: String
  coursePage: CoursePageCreateOneWithoutApplicationsInput!
  coursePageID: ID!
}

input ApplicationCreateManyWithoutCoursePageInput {
  create: [ApplicationCreateWithoutCoursePageInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutCoursePageInput {
  applicantId: ID!
  applicantName: String!
  message: String
  coursePageID: ID!
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  applicantId_ASC
  applicantId_DESC
  applicantName_ASC
  applicantName_DESC
  message_ASC
  message_DESC
  coursePageID_ASC
  coursePageID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ApplicationPreviousValues {
  id: ID!
  applicantId: ID!
  applicantName: String!
  message: String
  coursePageID: ID!
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePage: CoursePageUpdateOneRequiredWithoutApplicationsInput
  coursePageID: ID
}

input ApplicationUpdateManyWithoutCoursePageInput {
  create: [ApplicationCreateWithoutCoursePageInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutCoursePageInput!]
}

input ApplicationUpdateWithoutCoursePageDataInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePageID: ID
}

input ApplicationUpdateWithWhereUniqueWithoutCoursePageInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutCoursePageDataInput!
}

input ApplicationUpsertWithWhereUniqueWithoutCoursePageInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutCoursePageDataInput!
  create: ApplicationCreateWithoutCoursePageInput!
}

input ApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  applicantId: ID
  applicantId_not: ID
  applicantId_in: [ID!]
  applicantId_not_in: [ID!]
  applicantId_lt: ID
  applicantId_lte: ID
  applicantId_gt: ID
  applicantId_gte: ID
  applicantId_contains: ID
  applicantId_not_contains: ID
  applicantId_starts_with: ID
  applicantId_not_starts_with: ID
  applicantId_ends_with: ID
  applicantId_not_ends_with: ID
  applicantName: String
  applicantName_not: String
  applicantName_in: [String!]
  applicantName_not_in: [String!]
  applicantName_lt: String
  applicantName_lte: String
  applicantName_gt: String
  applicantName_gte: String
  applicantName_contains: String
  applicantName_not_contains: String
  applicantName_starts_with: String
  applicantName_not_starts_with: String
  applicantName_ends_with: String
  applicantName_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  coursePage: CoursePageWhereInput
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Construction {
  id: ID!
  name: String!
  dbPart1: Json!
  dbPart2: Json!
  dbPart3: Json!
  dbPart4: Json!
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  user: User!
  lesson: Lesson!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConstructionConnection {
  pageInfo: PageInfo!
  edges: [ConstructionEdge]!
  aggregate: AggregateConstruction!
}

input ConstructionCreateInput {
  name: String!
  dbPart1: Json!
  dbPart2: Json!
  dbPart3: Json!
  dbPart4: Json!
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  user: UserCreateOneWithoutConstructionInput!
  lesson: LessonCreateOneWithoutConstructionsInput!
  lessonID: ID!
}

input ConstructionCreateManyWithoutLessonInput {
  create: [ConstructionCreateWithoutLessonInput!]
  connect: [ConstructionWhereUniqueInput!]
}

input ConstructionCreateManyWithoutUserInput {
  create: [ConstructionCreateWithoutUserInput!]
  connect: [ConstructionWhereUniqueInput!]
}

input ConstructionCreateWithoutLessonInput {
  name: String!
  dbPart1: Json!
  dbPart2: Json!
  dbPart3: Json!
  dbPart4: Json!
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  user: UserCreateOneWithoutConstructionInput!
  lessonID: ID!
}

input ConstructionCreateWithoutUserInput {
  name: String!
  dbPart1: Json!
  dbPart2: Json!
  dbPart3: Json!
  dbPart4: Json!
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  lesson: LessonCreateOneWithoutConstructionsInput!
  lessonID: ID!
}

type ConstructionEdge {
  node: Construction!
  cursor: String!
}

enum ConstructionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  dbPart1_ASC
  dbPart1_DESC
  dbPart2_ASC
  dbPart2_DESC
  dbPart3_ASC
  dbPart3_DESC
  dbPart4_ASC
  dbPart4_DESC
  dbPart5_ASC
  dbPart5_DESC
  dbPart6_ASC
  dbPart6_DESC
  dbPart7_ASC
  dbPart7_DESC
  dbPart8_ASC
  dbPart8_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConstructionPreviousValues {
  id: ID!
  name: String!
  dbPart1: Json!
  dbPart2: Json!
  dbPart3: Json!
  dbPart4: Json!
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConstructionSubscriptionPayload {
  mutation: MutationType!
  node: Construction
  updatedFields: [String!]
  previousValues: ConstructionPreviousValues
}

input ConstructionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConstructionWhereInput
  AND: [ConstructionSubscriptionWhereInput!]
  OR: [ConstructionSubscriptionWhereInput!]
  NOT: [ConstructionSubscriptionWhereInput!]
}

input ConstructionUpdateInput {
  name: String
  dbPart1: Json
  dbPart2: Json
  dbPart3: Json
  dbPart4: Json
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  user: UserUpdateOneRequiredWithoutConstructionInput
  lesson: LessonUpdateOneRequiredWithoutConstructionsInput
  lessonID: ID
}

input ConstructionUpdateManyWithoutLessonInput {
  create: [ConstructionCreateWithoutLessonInput!]
  delete: [ConstructionWhereUniqueInput!]
  connect: [ConstructionWhereUniqueInput!]
  disconnect: [ConstructionWhereUniqueInput!]
  update: [ConstructionUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ConstructionUpsertWithWhereUniqueWithoutLessonInput!]
}

input ConstructionUpdateManyWithoutUserInput {
  create: [ConstructionCreateWithoutUserInput!]
  delete: [ConstructionWhereUniqueInput!]
  connect: [ConstructionWhereUniqueInput!]
  disconnect: [ConstructionWhereUniqueInput!]
  update: [ConstructionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ConstructionUpsertWithWhereUniqueWithoutUserInput!]
}

input ConstructionUpdateWithoutLessonDataInput {
  name: String
  dbPart1: Json
  dbPart2: Json
  dbPart3: Json
  dbPart4: Json
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  user: UserUpdateOneRequiredWithoutConstructionInput
  lessonID: ID
}

input ConstructionUpdateWithoutUserDataInput {
  name: String
  dbPart1: Json
  dbPart2: Json
  dbPart3: Json
  dbPart4: Json
  dbPart5: Json
  dbPart6: Json
  dbPart7: Json
  dbPart8: Json
  lesson: LessonUpdateOneRequiredWithoutConstructionsInput
  lessonID: ID
}

input ConstructionUpdateWithWhereUniqueWithoutLessonInput {
  where: ConstructionWhereUniqueInput!
  data: ConstructionUpdateWithoutLessonDataInput!
}

input ConstructionUpdateWithWhereUniqueWithoutUserInput {
  where: ConstructionWhereUniqueInput!
  data: ConstructionUpdateWithoutUserDataInput!
}

input ConstructionUpsertWithWhereUniqueWithoutLessonInput {
  where: ConstructionWhereUniqueInput!
  update: ConstructionUpdateWithoutLessonDataInput!
  create: ConstructionCreateWithoutLessonInput!
}

input ConstructionUpsertWithWhereUniqueWithoutUserInput {
  where: ConstructionWhereUniqueInput!
  update: ConstructionUpdateWithoutUserDataInput!
  create: ConstructionCreateWithoutUserInput!
}

input ConstructionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConstructionWhereInput!]
  OR: [ConstructionWhereInput!]
  NOT: [ConstructionWhereInput!]
}

input ConstructionWhereUniqueInput {
  id: ID
}

type CoursePage {
  id: ID!
  title: String!
  description: String!
  image: String!
  user: User!
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  tags: [String!]!
  courseType: CourseType
  students: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CoursePageConnection {
  pageInfo: PageInfo!
  edges: [CoursePageEdge]!
  aggregate: AggregateCoursePage!
}

input CoursePageCreateInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
}

input CoursePageCreateManyWithoutUserInput {
  create: [CoursePageCreateWithoutUserInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateOneWithoutApplicationsInput {
  create: CoursePageCreateWithoutApplicationsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreateOneWithoutLessonsInput {
  create: CoursePageCreateWithoutLessonsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreatestudentsInput {
  set: [ID!]
}

input CoursePageCreatetagsInput {
  set: [String!]
}

input CoursePageCreateWithoutApplicationsInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
}

input CoursePageCreateWithoutLessonsInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  applications: ApplicationCreateManyWithoutCoursePageInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
}

input CoursePageCreateWithoutUserInput {
  title: String!
  description: String!
  image: String!
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
}

type CoursePageEdge {
  node: CoursePage!
  cursor: String!
}

enum CoursePageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  courseType_ASC
  courseType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CoursePagePreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String!
  tags: [String!]!
  courseType: CourseType
  students: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CoursePageSubscriptionPayload {
  mutation: MutationType!
  node: CoursePage
  updatedFields: [String!]
  previousValues: CoursePagePreviousValues
}

input CoursePageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CoursePageWhereInput
  AND: [CoursePageSubscriptionWhereInput!]
  OR: [CoursePageSubscriptionWhereInput!]
  NOT: [CoursePageSubscriptionWhereInput!]
}

input CoursePageUpdateInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
}

input CoursePageUpdateManyWithoutUserInput {
  create: [CoursePageCreateWithoutUserInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutUserInput!]
}

input CoursePageUpdateOneRequiredWithoutApplicationsInput {
  create: CoursePageCreateWithoutApplicationsInput
  update: CoursePageUpdateWithoutApplicationsDataInput
  upsert: CoursePageUpsertWithoutApplicationsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdateOneRequiredWithoutLessonsInput {
  create: CoursePageCreateWithoutLessonsInput
  update: CoursePageUpdateWithoutLessonsDataInput
  upsert: CoursePageUpsertWithoutLessonsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdatestudentsInput {
  set: [ID!]
}

input CoursePageUpdatetagsInput {
  set: [String!]
}

input CoursePageUpdateWithoutApplicationsDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
}

input CoursePageUpdateWithoutLessonsDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
}

input CoursePageUpdateWithoutUserDataInput {
  title: String
  description: String
  image: String
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
}

input CoursePageUpdateWithWhereUniqueWithoutUserInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutUserDataInput!
}

input CoursePageUpsertWithoutApplicationsInput {
  update: CoursePageUpdateWithoutApplicationsDataInput!
  create: CoursePageCreateWithoutApplicationsInput!
}

input CoursePageUpsertWithoutLessonsInput {
  update: CoursePageUpdateWithoutLessonsDataInput!
  create: CoursePageCreateWithoutLessonsInput!
}

input CoursePageUpsertWithWhereUniqueWithoutUserInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutUserDataInput!
  create: CoursePageCreateWithoutUserInput!
}

input CoursePageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  user: UserWhereInput
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  courseType: CourseType
  courseType_not: CourseType
  courseType_in: [CourseType!]
  courseType_not_in: [CourseType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CoursePageWhereInput!]
  OR: [CoursePageWhereInput!]
  NOT: [CoursePageWhereInput!]
}

input CoursePageWhereUniqueInput {
  id: ID
}

enum CourseType {
  PUBLIC
  PRIVATE
}

scalar DateTime

scalar Json

type Lesson {
  id: ID!
  name: String!
  number: Int
  text: String!
  video: String
  user: User!
  coursePage: CoursePage!
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem!]
  constructions(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction!]
  texteditors(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor!]
  coursePageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LessonConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge]!
  aggregate: AggregateLesson!
}

input LessonCreateInput {
  name: String!
  number: Int
  text: String!
  video: String
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  coursePageID: ID!
}

input LessonCreateManyWithoutCoursePageInput {
  create: [LessonCreateWithoutCoursePageInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateManyWithoutUserInput {
  create: [LessonCreateWithoutUserInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateOneWithoutConstructionsInput {
  create: LessonCreateWithoutConstructionsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutProblemsInput {
  create: LessonCreateWithoutProblemsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTestsInput {
  create: LessonCreateWithoutTestsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTexteditorsInput {
  create: LessonCreateWithoutTexteditorsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateWithoutConstructionsInput {
  name: String!
  number: Int
  text: String!
  video: String
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  coursePageID: ID!
}

input LessonCreateWithoutCoursePageInput {
  name: String!
  number: Int
  text: String!
  video: String
  user: UserCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  coursePageID: ID!
}

input LessonCreateWithoutProblemsInput {
  name: String!
  number: Int
  text: String!
  video: String
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  coursePageID: ID!
}

input LessonCreateWithoutTestsInput {
  name: String!
  number: Int
  text: String!
  video: String
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  coursePageID: ID!
}

input LessonCreateWithoutTexteditorsInput {
  name: String!
  number: Int
  text: String!
  video: String
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  coursePageID: ID!
}

input LessonCreateWithoutUserInput {
  name: String!
  number: Int
  text: String!
  video: String
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  coursePageID: ID!
}

type LessonEdge {
  node: Lesson!
  cursor: String!
}

enum LessonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  number_ASC
  number_DESC
  text_ASC
  text_DESC
  video_ASC
  video_DESC
  coursePageID_ASC
  coursePageID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LessonPreviousValues {
  id: ID!
  name: String!
  number: Int
  text: String!
  video: String
  coursePageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LessonSubscriptionPayload {
  mutation: MutationType!
  node: Lesson
  updatedFields: [String!]
  previousValues: LessonPreviousValues
}

input LessonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LessonWhereInput
  AND: [LessonSubscriptionWhereInput!]
  OR: [LessonSubscriptionWhereInput!]
  NOT: [LessonSubscriptionWhereInput!]
}

input LessonUpdateInput {
  name: String
  number: Int
  text: String
  video: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  coursePageID: ID
}

input LessonUpdateManyWithoutCoursePageInput {
  create: [LessonCreateWithoutCoursePageInput!]
  delete: [LessonWhereUniqueInput!]
  connect: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutCoursePageInput!]
}

input LessonUpdateManyWithoutUserInput {
  create: [LessonCreateWithoutUserInput!]
  delete: [LessonWhereUniqueInput!]
  connect: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutUserInput!]
}

input LessonUpdateOneRequiredWithoutConstructionsInput {
  create: LessonCreateWithoutConstructionsInput
  update: LessonUpdateWithoutConstructionsDataInput
  upsert: LessonUpsertWithoutConstructionsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutProblemsInput {
  create: LessonCreateWithoutProblemsInput
  update: LessonUpdateWithoutProblemsDataInput
  upsert: LessonUpsertWithoutProblemsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutTestsInput {
  create: LessonCreateWithoutTestsInput
  update: LessonUpdateWithoutTestsDataInput
  upsert: LessonUpsertWithoutTestsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutTexteditorsInput {
  create: LessonCreateWithoutTexteditorsInput
  update: LessonUpdateWithoutTexteditorsDataInput
  upsert: LessonUpsertWithoutTexteditorsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateWithoutConstructionsDataInput {
  name: String
  number: Int
  text: String
  video: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  coursePageID: ID
}

input LessonUpdateWithoutCoursePageDataInput {
  name: String
  number: Int
  text: String
  video: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  coursePageID: ID
}

input LessonUpdateWithoutProblemsDataInput {
  name: String
  number: Int
  text: String
  video: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  coursePageID: ID
}

input LessonUpdateWithoutTestsDataInput {
  name: String
  number: Int
  text: String
  video: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  coursePageID: ID
}

input LessonUpdateWithoutTexteditorsDataInput {
  name: String
  number: Int
  text: String
  video: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  coursePageID: ID
}

input LessonUpdateWithoutUserDataInput {
  name: String
  number: Int
  text: String
  video: String
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  coursePageID: ID
}

input LessonUpdateWithWhereUniqueWithoutCoursePageInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutCoursePageDataInput!
}

input LessonUpdateWithWhereUniqueWithoutUserInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutUserDataInput!
}

input LessonUpsertWithoutConstructionsInput {
  update: LessonUpdateWithoutConstructionsDataInput!
  create: LessonCreateWithoutConstructionsInput!
}

input LessonUpsertWithoutProblemsInput {
  update: LessonUpdateWithoutProblemsDataInput!
  create: LessonCreateWithoutProblemsInput!
}

input LessonUpsertWithoutTestsInput {
  update: LessonUpdateWithoutTestsDataInput!
  create: LessonCreateWithoutTestsInput!
}

input LessonUpsertWithoutTexteditorsInput {
  update: LessonUpdateWithoutTexteditorsDataInput!
  create: LessonCreateWithoutTexteditorsInput!
}

input LessonUpsertWithWhereUniqueWithoutCoursePageInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutCoursePageDataInput!
  create: LessonCreateWithoutCoursePageInput!
}

input LessonUpsertWithWhereUniqueWithoutUserInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutUserDataInput!
  create: LessonCreateWithoutUserInput!
}

input LessonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  video: String
  video_not: String
  video_in: [String!]
  video_not_in: [String!]
  video_lt: String
  video_lte: String
  video_gt: String
  video_gte: String
  video_contains: String
  video_not_contains: String
  video_starts_with: String
  video_not_starts_with: String
  video_ends_with: String
  video_not_ends_with: String
  user: UserWhereInput
  coursePage: CoursePageWhereInput
  tests_every: TestWhereInput
  tests_some: TestWhereInput
  tests_none: TestWhereInput
  problems_every: ProblemWhereInput
  problems_some: ProblemWhereInput
  problems_none: ProblemWhereInput
  constructions_every: ConstructionWhereInput
  constructions_some: ConstructionWhereInput
  constructions_none: ConstructionWhereInput
  texteditors_every: TextEditorWhereInput
  texteditors_some: TextEditorWhereInput
  texteditors_none: TextEditorWhereInput
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
}

input LessonWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateManyApplications(data: ApplicationUpdateInput!, where: ApplicationWhereInput): BatchPayload!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createConstruction(data: ConstructionCreateInput!): Construction!
  updateConstruction(data: ConstructionUpdateInput!, where: ConstructionWhereUniqueInput!): Construction
  updateManyConstructions(data: ConstructionUpdateInput!, where: ConstructionWhereInput): BatchPayload!
  upsertConstruction(where: ConstructionWhereUniqueInput!, create: ConstructionCreateInput!, update: ConstructionUpdateInput!): Construction!
  deleteConstruction(where: ConstructionWhereUniqueInput!): Construction
  deleteManyConstructions(where: ConstructionWhereInput): BatchPayload!
  createCoursePage(data: CoursePageCreateInput!): CoursePage!
  updateCoursePage(data: CoursePageUpdateInput!, where: CoursePageWhereUniqueInput!): CoursePage
  updateManyCoursePages(data: CoursePageUpdateInput!, where: CoursePageWhereInput): BatchPayload!
  upsertCoursePage(where: CoursePageWhereUniqueInput!, create: CoursePageCreateInput!, update: CoursePageUpdateInput!): CoursePage!
  deleteCoursePage(where: CoursePageWhereUniqueInput!): CoursePage
  deleteManyCoursePages(where: CoursePageWhereInput): BatchPayload!
  createLesson(data: LessonCreateInput!): Lesson!
  updateLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateManyLessons(data: LessonUpdateInput!, where: LessonWhereInput): BatchPayload!
  upsertLesson(where: LessonWhereUniqueInput!, create: LessonCreateInput!, update: LessonUpdateInput!): Lesson!
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteManyLessons(where: LessonWhereInput): BatchPayload!
  createProblem(data: ProblemCreateInput!): Problem!
  updateProblem(data: ProblemUpdateInput!, where: ProblemWhereUniqueInput!): Problem
  updateManyProblems(data: ProblemUpdateInput!, where: ProblemWhereInput): BatchPayload!
  upsertProblem(where: ProblemWhereUniqueInput!, create: ProblemCreateInput!, update: ProblemUpdateInput!): Problem!
  deleteProblem(where: ProblemWhereUniqueInput!): Problem
  deleteManyProblems(where: ProblemWhereInput): BatchPayload!
  createSandbox(data: SandboxCreateInput!): Sandbox!
  updateSandbox(data: SandboxUpdateInput!, where: SandboxWhereUniqueInput!): Sandbox
  updateManySandboxes(data: SandboxUpdateInput!, where: SandboxWhereInput): BatchPayload!
  upsertSandbox(where: SandboxWhereUniqueInput!, create: SandboxCreateInput!, update: SandboxUpdateInput!): Sandbox!
  deleteSandbox(where: SandboxWhereUniqueInput!): Sandbox
  deleteManySandboxes(where: SandboxWhereInput): BatchPayload!
  createSandboxPage(data: SandboxPageCreateInput!): SandboxPage!
  updateSandboxPage(data: SandboxPageUpdateInput!, where: SandboxPageWhereUniqueInput!): SandboxPage
  updateManySandboxPages(data: SandboxPageUpdateInput!, where: SandboxPageWhereInput): BatchPayload!
  upsertSandboxPage(where: SandboxPageWhereUniqueInput!, create: SandboxPageCreateInput!, update: SandboxPageUpdateInput!): SandboxPage!
  deleteSandboxPage(where: SandboxPageWhereUniqueInput!): SandboxPage
  deleteManySandboxPages(where: SandboxPageWhereInput): BatchPayload!
  createSandboxPageGoal(data: SandboxPageGoalCreateInput!): SandboxPageGoal!
  updateSandboxPageGoal(data: SandboxPageGoalUpdateInput!, where: SandboxPageGoalWhereUniqueInput!): SandboxPageGoal
  updateManySandboxPageGoals(data: SandboxPageGoalUpdateInput!, where: SandboxPageGoalWhereInput): BatchPayload!
  upsertSandboxPageGoal(where: SandboxPageGoalWhereUniqueInput!, create: SandboxPageGoalCreateInput!, update: SandboxPageGoalUpdateInput!): SandboxPageGoal!
  deleteSandboxPageGoal(where: SandboxPageGoalWhereUniqueInput!): SandboxPageGoal
  deleteManySandboxPageGoals(where: SandboxPageGoalWhereInput): BatchPayload!
  createTest(data: TestCreateInput!): Test!
  updateTest(data: TestUpdateInput!, where: TestWhereUniqueInput!): Test
  updateManyTests(data: TestUpdateInput!, where: TestWhereInput): BatchPayload!
  upsertTest(where: TestWhereUniqueInput!, create: TestCreateInput!, update: TestUpdateInput!): Test!
  deleteTest(where: TestWhereUniqueInput!): Test
  deleteManyTests(where: TestWhereInput): BatchPayload!
  createTextEditor(data: TextEditorCreateInput!): TextEditor!
  updateTextEditor(data: TextEditorUpdateInput!, where: TextEditorWhereUniqueInput!): TextEditor
  updateManyTextEditors(data: TextEditorUpdateInput!, where: TextEditorWhereInput): BatchPayload!
  upsertTextEditor(where: TextEditorWhereUniqueInput!, create: TextEditorCreateInput!, update: TextEditorUpdateInput!): TextEditor!
  deleteTextEditor(where: TextEditorWhereUniqueInput!): TextEditor
  deleteManyTextEditors(where: TextEditorWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  CASECREATE
  CASEUPDATE
  CASEDELETE
  PERMISSIONUPDATE
}

type Problem {
  id: ID!
  text: String!
  hints: String
  solution: String
  answer: String!
  user: User!
  lesson: Lesson!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProblemConnection {
  pageInfo: PageInfo!
  edges: [ProblemEdge]!
  aggregate: AggregateProblem!
}

input ProblemCreateInput {
  text: String!
  hints: String
  solution: String
  answer: String!
  user: UserCreateOneWithoutProblemsInput!
  lesson: LessonCreateOneWithoutProblemsInput!
  lessonID: ID!
}

input ProblemCreateManyWithoutLessonInput {
  create: [ProblemCreateWithoutLessonInput!]
  connect: [ProblemWhereUniqueInput!]
}

input ProblemCreateManyWithoutUserInput {
  create: [ProblemCreateWithoutUserInput!]
  connect: [ProblemWhereUniqueInput!]
}

input ProblemCreateWithoutLessonInput {
  text: String!
  hints: String
  solution: String
  answer: String!
  user: UserCreateOneWithoutProblemsInput!
  lessonID: ID!
}

input ProblemCreateWithoutUserInput {
  text: String!
  hints: String
  solution: String
  answer: String!
  lesson: LessonCreateOneWithoutProblemsInput!
  lessonID: ID!
}

type ProblemEdge {
  node: Problem!
  cursor: String!
}

enum ProblemOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  hints_ASC
  hints_DESC
  solution_ASC
  solution_DESC
  answer_ASC
  answer_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProblemPreviousValues {
  id: ID!
  text: String!
  hints: String
  solution: String
  answer: String!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProblemSubscriptionPayload {
  mutation: MutationType!
  node: Problem
  updatedFields: [String!]
  previousValues: ProblemPreviousValues
}

input ProblemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProblemWhereInput
  AND: [ProblemSubscriptionWhereInput!]
  OR: [ProblemSubscriptionWhereInput!]
  NOT: [ProblemSubscriptionWhereInput!]
}

input ProblemUpdateInput {
  text: String
  hints: String
  solution: String
  answer: String
  user: UserUpdateOneRequiredWithoutProblemsInput
  lesson: LessonUpdateOneRequiredWithoutProblemsInput
  lessonID: ID
}

input ProblemUpdateManyWithoutLessonInput {
  create: [ProblemCreateWithoutLessonInput!]
  delete: [ProblemWhereUniqueInput!]
  connect: [ProblemWhereUniqueInput!]
  disconnect: [ProblemWhereUniqueInput!]
  update: [ProblemUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ProblemUpsertWithWhereUniqueWithoutLessonInput!]
}

input ProblemUpdateManyWithoutUserInput {
  create: [ProblemCreateWithoutUserInput!]
  delete: [ProblemWhereUniqueInput!]
  connect: [ProblemWhereUniqueInput!]
  disconnect: [ProblemWhereUniqueInput!]
  update: [ProblemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProblemUpsertWithWhereUniqueWithoutUserInput!]
}

input ProblemUpdateWithoutLessonDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  user: UserUpdateOneRequiredWithoutProblemsInput
  lessonID: ID
}

input ProblemUpdateWithoutUserDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  lesson: LessonUpdateOneRequiredWithoutProblemsInput
  lessonID: ID
}

input ProblemUpdateWithWhereUniqueWithoutLessonInput {
  where: ProblemWhereUniqueInput!
  data: ProblemUpdateWithoutLessonDataInput!
}

input ProblemUpdateWithWhereUniqueWithoutUserInput {
  where: ProblemWhereUniqueInput!
  data: ProblemUpdateWithoutUserDataInput!
}

input ProblemUpsertWithWhereUniqueWithoutLessonInput {
  where: ProblemWhereUniqueInput!
  update: ProblemUpdateWithoutLessonDataInput!
  create: ProblemCreateWithoutLessonInput!
}

input ProblemUpsertWithWhereUniqueWithoutUserInput {
  where: ProblemWhereUniqueInput!
  update: ProblemUpdateWithoutUserDataInput!
  create: ProblemCreateWithoutUserInput!
}

input ProblemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  hints: String
  hints_not: String
  hints_in: [String!]
  hints_not_in: [String!]
  hints_lt: String
  hints_lte: String
  hints_gt: String
  hints_gte: String
  hints_contains: String
  hints_not_contains: String
  hints_starts_with: String
  hints_not_starts_with: String
  hints_ends_with: String
  hints_not_ends_with: String
  solution: String
  solution_not: String
  solution_in: [String!]
  solution_not_in: [String!]
  solution_lt: String
  solution_lte: String
  solution_gt: String
  solution_gte: String
  solution_contains: String
  solution_not_contains: String
  solution_starts_with: String
  solution_not_starts_with: String
  solution_ends_with: String
  solution_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProblemWhereInput!]
  OR: [ProblemWhereInput!]
  NOT: [ProblemWhereInput!]
}

input ProblemWhereUniqueInput {
  id: ID
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  construction(where: ConstructionWhereUniqueInput!): Construction
  constructions(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction]!
  constructionsConnection(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConstructionConnection!
  coursePage(where: CoursePageWhereUniqueInput!): CoursePage
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage]!
  coursePagesConnection(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoursePageConnection!
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson]!
  lessonsConnection(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonConnection!
  problem(where: ProblemWhereUniqueInput!): Problem
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem]!
  problemsConnection(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemConnection!
  sandbox(where: SandboxWhereUniqueInput!): Sandbox
  sandboxes(where: SandboxWhereInput, orderBy: SandboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sandbox]!
  sandboxesConnection(where: SandboxWhereInput, orderBy: SandboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SandboxConnection!
  sandboxPage(where: SandboxPageWhereUniqueInput!): SandboxPage
  sandboxPages(where: SandboxPageWhereInput, orderBy: SandboxPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPage]!
  sandboxPagesConnection(where: SandboxPageWhereInput, orderBy: SandboxPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SandboxPageConnection!
  sandboxPageGoal(where: SandboxPageGoalWhereUniqueInput!): SandboxPageGoal
  sandboxPageGoals(where: SandboxPageGoalWhereInput, orderBy: SandboxPageGoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPageGoal]!
  sandboxPageGoalsConnection(where: SandboxPageGoalWhereInput, orderBy: SandboxPageGoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SandboxPageGoalConnection!
  test(where: TestWhereUniqueInput!): Test
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test]!
  testsConnection(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestConnection!
  textEditor(where: TextEditorWhereUniqueInput!): TextEditor
  textEditors(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor]!
  textEditorsConnection(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextEditorConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Sandbox {
  id: ID!
  text: String!
  video: String
  user: User!
  sandboxPage: SandboxPage!
  sandboxPageID: ID!
  link: String
  createdAt: DateTime!
  updatedAt: DateTime!
  likes: Int
}

type SandboxConnection {
  pageInfo: PageInfo!
  edges: [SandboxEdge]!
  aggregate: AggregateSandbox!
}

input SandboxCreateInput {
  text: String!
  video: String
  user: UserCreateOneInput!
  sandboxPage: SandboxPageCreateOneWithoutSandboxesInput!
  sandboxPageID: ID!
  link: String
  likes: Int
}

input SandboxCreateManyWithoutSandboxPageInput {
  create: [SandboxCreateWithoutSandboxPageInput!]
  connect: [SandboxWhereUniqueInput!]
}

input SandboxCreateWithoutSandboxPageInput {
  text: String!
  video: String
  user: UserCreateOneInput!
  sandboxPageID: ID!
  link: String
  likes: Int
}

type SandboxEdge {
  node: Sandbox!
  cursor: String!
}

enum SandboxOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  video_ASC
  video_DESC
  sandboxPageID_ASC
  sandboxPageID_DESC
  link_ASC
  link_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  likes_ASC
  likes_DESC
}

type SandboxPage {
  id: ID!
  title: String!
  description: String!
  image: String!
  user: User!
  sandboxes(where: SandboxWhereInput, orderBy: SandboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sandbox!]
  sandboxPageGoals(where: SandboxPageGoalWhereInput, orderBy: SandboxPageGoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPageGoal!]
  students: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SandboxPageConnection {
  pageInfo: PageInfo!
  edges: [SandboxPageEdge]!
  aggregate: AggregateSandboxPage!
}

input SandboxPageCreateInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutSandboxPagesInput!
  sandboxes: SandboxCreateManyWithoutSandboxPageInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutSandboxPageInput
  students: SandboxPageCreatestudentsInput
}

input SandboxPageCreateManyWithoutUserInput {
  create: [SandboxPageCreateWithoutUserInput!]
  connect: [SandboxPageWhereUniqueInput!]
}

input SandboxPageCreateOneWithoutSandboxesInput {
  create: SandboxPageCreateWithoutSandboxesInput
  connect: SandboxPageWhereUniqueInput
}

input SandboxPageCreateOneWithoutSandboxPageGoalsInput {
  create: SandboxPageCreateWithoutSandboxPageGoalsInput
  connect: SandboxPageWhereUniqueInput
}

input SandboxPageCreatestudentsInput {
  set: [ID!]
}

input SandboxPageCreateWithoutSandboxesInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutSandboxPagesInput!
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutSandboxPageInput
  students: SandboxPageCreatestudentsInput
}

input SandboxPageCreateWithoutSandboxPageGoalsInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutSandboxPagesInput!
  sandboxes: SandboxCreateManyWithoutSandboxPageInput
  students: SandboxPageCreatestudentsInput
}

input SandboxPageCreateWithoutUserInput {
  title: String!
  description: String!
  image: String!
  sandboxes: SandboxCreateManyWithoutSandboxPageInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutSandboxPageInput
  students: SandboxPageCreatestudentsInput
}

type SandboxPageEdge {
  node: SandboxPage!
  cursor: String!
}

type SandboxPageGoal {
  id: ID!
  goal: String!
  user: User!
  completed: Boolean!
  sandboxPage: SandboxPage
  sandboxPageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SandboxPageGoalConnection {
  pageInfo: PageInfo!
  edges: [SandboxPageGoalEdge]!
  aggregate: AggregateSandboxPageGoal!
}

input SandboxPageGoalCreateInput {
  goal: String!
  user: UserCreateOneWithoutSandboxPageGoalsInput!
  completed: Boolean
  sandboxPage: SandboxPageCreateOneWithoutSandboxPageGoalsInput
  sandboxPageID: ID!
}

input SandboxPageGoalCreateManyWithoutSandboxPageInput {
  create: [SandboxPageGoalCreateWithoutSandboxPageInput!]
  connect: [SandboxPageGoalWhereUniqueInput!]
}

input SandboxPageGoalCreateManyWithoutUserInput {
  create: [SandboxPageGoalCreateWithoutUserInput!]
  connect: [SandboxPageGoalWhereUniqueInput!]
}

input SandboxPageGoalCreateWithoutSandboxPageInput {
  goal: String!
  user: UserCreateOneWithoutSandboxPageGoalsInput!
  completed: Boolean
  sandboxPageID: ID!
}

input SandboxPageGoalCreateWithoutUserInput {
  goal: String!
  completed: Boolean
  sandboxPage: SandboxPageCreateOneWithoutSandboxPageGoalsInput
  sandboxPageID: ID!
}

type SandboxPageGoalEdge {
  node: SandboxPageGoal!
  cursor: String!
}

enum SandboxPageGoalOrderByInput {
  id_ASC
  id_DESC
  goal_ASC
  goal_DESC
  completed_ASC
  completed_DESC
  sandboxPageID_ASC
  sandboxPageID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SandboxPageGoalPreviousValues {
  id: ID!
  goal: String!
  completed: Boolean!
  sandboxPageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SandboxPageGoalSubscriptionPayload {
  mutation: MutationType!
  node: SandboxPageGoal
  updatedFields: [String!]
  previousValues: SandboxPageGoalPreviousValues
}

input SandboxPageGoalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SandboxPageGoalWhereInput
  AND: [SandboxPageGoalSubscriptionWhereInput!]
  OR: [SandboxPageGoalSubscriptionWhereInput!]
  NOT: [SandboxPageGoalSubscriptionWhereInput!]
}

input SandboxPageGoalUpdateInput {
  goal: String
  user: UserUpdateOneRequiredWithoutSandboxPageGoalsInput
  completed: Boolean
  sandboxPage: SandboxPageUpdateOneWithoutSandboxPageGoalsInput
  sandboxPageID: ID
}

input SandboxPageGoalUpdateManyWithoutSandboxPageInput {
  create: [SandboxPageGoalCreateWithoutSandboxPageInput!]
  delete: [SandboxPageGoalWhereUniqueInput!]
  connect: [SandboxPageGoalWhereUniqueInput!]
  disconnect: [SandboxPageGoalWhereUniqueInput!]
  update: [SandboxPageGoalUpdateWithWhereUniqueWithoutSandboxPageInput!]
  upsert: [SandboxPageGoalUpsertWithWhereUniqueWithoutSandboxPageInput!]
}

input SandboxPageGoalUpdateManyWithoutUserInput {
  create: [SandboxPageGoalCreateWithoutUserInput!]
  delete: [SandboxPageGoalWhereUniqueInput!]
  connect: [SandboxPageGoalWhereUniqueInput!]
  disconnect: [SandboxPageGoalWhereUniqueInput!]
  update: [SandboxPageGoalUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SandboxPageGoalUpsertWithWhereUniqueWithoutUserInput!]
}

input SandboxPageGoalUpdateWithoutSandboxPageDataInput {
  goal: String
  user: UserUpdateOneRequiredWithoutSandboxPageGoalsInput
  completed: Boolean
  sandboxPageID: ID
}

input SandboxPageGoalUpdateWithoutUserDataInput {
  goal: String
  completed: Boolean
  sandboxPage: SandboxPageUpdateOneWithoutSandboxPageGoalsInput
  sandboxPageID: ID
}

input SandboxPageGoalUpdateWithWhereUniqueWithoutSandboxPageInput {
  where: SandboxPageGoalWhereUniqueInput!
  data: SandboxPageGoalUpdateWithoutSandboxPageDataInput!
}

input SandboxPageGoalUpdateWithWhereUniqueWithoutUserInput {
  where: SandboxPageGoalWhereUniqueInput!
  data: SandboxPageGoalUpdateWithoutUserDataInput!
}

input SandboxPageGoalUpsertWithWhereUniqueWithoutSandboxPageInput {
  where: SandboxPageGoalWhereUniqueInput!
  update: SandboxPageGoalUpdateWithoutSandboxPageDataInput!
  create: SandboxPageGoalCreateWithoutSandboxPageInput!
}

input SandboxPageGoalUpsertWithWhereUniqueWithoutUserInput {
  where: SandboxPageGoalWhereUniqueInput!
  update: SandboxPageGoalUpdateWithoutUserDataInput!
  create: SandboxPageGoalCreateWithoutUserInput!
}

input SandboxPageGoalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  goal: String
  goal_not: String
  goal_in: [String!]
  goal_not_in: [String!]
  goal_lt: String
  goal_lte: String
  goal_gt: String
  goal_gte: String
  goal_contains: String
  goal_not_contains: String
  goal_starts_with: String
  goal_not_starts_with: String
  goal_ends_with: String
  goal_not_ends_with: String
  user: UserWhereInput
  completed: Boolean
  completed_not: Boolean
  sandboxPage: SandboxPageWhereInput
  sandboxPageID: ID
  sandboxPageID_not: ID
  sandboxPageID_in: [ID!]
  sandboxPageID_not_in: [ID!]
  sandboxPageID_lt: ID
  sandboxPageID_lte: ID
  sandboxPageID_gt: ID
  sandboxPageID_gte: ID
  sandboxPageID_contains: ID
  sandboxPageID_not_contains: ID
  sandboxPageID_starts_with: ID
  sandboxPageID_not_starts_with: ID
  sandboxPageID_ends_with: ID
  sandboxPageID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SandboxPageGoalWhereInput!]
  OR: [SandboxPageGoalWhereInput!]
  NOT: [SandboxPageGoalWhereInput!]
}

input SandboxPageGoalWhereUniqueInput {
  id: ID
}

enum SandboxPageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SandboxPagePreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String!
  students: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SandboxPageSubscriptionPayload {
  mutation: MutationType!
  node: SandboxPage
  updatedFields: [String!]
  previousValues: SandboxPagePreviousValues
}

input SandboxPageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SandboxPageWhereInput
  AND: [SandboxPageSubscriptionWhereInput!]
  OR: [SandboxPageSubscriptionWhereInput!]
  NOT: [SandboxPageSubscriptionWhereInput!]
}

input SandboxPageUpdateInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutSandboxPagesInput
  sandboxes: SandboxUpdateManyWithoutSandboxPageInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutSandboxPageInput
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateManyWithoutUserInput {
  create: [SandboxPageCreateWithoutUserInput!]
  delete: [SandboxPageWhereUniqueInput!]
  connect: [SandboxPageWhereUniqueInput!]
  disconnect: [SandboxPageWhereUniqueInput!]
  update: [SandboxPageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SandboxPageUpsertWithWhereUniqueWithoutUserInput!]
}

input SandboxPageUpdateOneRequiredWithoutSandboxesInput {
  create: SandboxPageCreateWithoutSandboxesInput
  update: SandboxPageUpdateWithoutSandboxesDataInput
  upsert: SandboxPageUpsertWithoutSandboxesInput
  connect: SandboxPageWhereUniqueInput
}

input SandboxPageUpdateOneWithoutSandboxPageGoalsInput {
  create: SandboxPageCreateWithoutSandboxPageGoalsInput
  update: SandboxPageUpdateWithoutSandboxPageGoalsDataInput
  upsert: SandboxPageUpsertWithoutSandboxPageGoalsInput
  delete: Boolean
  disconnect: Boolean
  connect: SandboxPageWhereUniqueInput
}

input SandboxPageUpdatestudentsInput {
  set: [ID!]
}

input SandboxPageUpdateWithoutSandboxesDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutSandboxPagesInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutSandboxPageInput
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateWithoutSandboxPageGoalsDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutSandboxPagesInput
  sandboxes: SandboxUpdateManyWithoutSandboxPageInput
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateWithoutUserDataInput {
  title: String
  description: String
  image: String
  sandboxes: SandboxUpdateManyWithoutSandboxPageInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutSandboxPageInput
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateWithWhereUniqueWithoutUserInput {
  where: SandboxPageWhereUniqueInput!
  data: SandboxPageUpdateWithoutUserDataInput!
}

input SandboxPageUpsertWithoutSandboxesInput {
  update: SandboxPageUpdateWithoutSandboxesDataInput!
  create: SandboxPageCreateWithoutSandboxesInput!
}

input SandboxPageUpsertWithoutSandboxPageGoalsInput {
  update: SandboxPageUpdateWithoutSandboxPageGoalsDataInput!
  create: SandboxPageCreateWithoutSandboxPageGoalsInput!
}

input SandboxPageUpsertWithWhereUniqueWithoutUserInput {
  where: SandboxPageWhereUniqueInput!
  update: SandboxPageUpdateWithoutUserDataInput!
  create: SandboxPageCreateWithoutUserInput!
}

input SandboxPageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  user: UserWhereInput
  sandboxes_every: SandboxWhereInput
  sandboxes_some: SandboxWhereInput
  sandboxes_none: SandboxWhereInput
  sandboxPageGoals_every: SandboxPageGoalWhereInput
  sandboxPageGoals_some: SandboxPageGoalWhereInput
  sandboxPageGoals_none: SandboxPageGoalWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SandboxPageWhereInput!]
  OR: [SandboxPageWhereInput!]
  NOT: [SandboxPageWhereInput!]
}

input SandboxPageWhereUniqueInput {
  id: ID
}

type SandboxPreviousValues {
  id: ID!
  text: String!
  video: String
  sandboxPageID: ID!
  link: String
  createdAt: DateTime!
  updatedAt: DateTime!
  likes: Int
}

type SandboxSubscriptionPayload {
  mutation: MutationType!
  node: Sandbox
  updatedFields: [String!]
  previousValues: SandboxPreviousValues
}

input SandboxSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SandboxWhereInput
  AND: [SandboxSubscriptionWhereInput!]
  OR: [SandboxSubscriptionWhereInput!]
  NOT: [SandboxSubscriptionWhereInput!]
}

input SandboxUpdateInput {
  text: String
  video: String
  user: UserUpdateOneRequiredInput
  sandboxPage: SandboxPageUpdateOneRequiredWithoutSandboxesInput
  sandboxPageID: ID
  link: String
  likes: Int
}

input SandboxUpdateManyWithoutSandboxPageInput {
  create: [SandboxCreateWithoutSandboxPageInput!]
  delete: [SandboxWhereUniqueInput!]
  connect: [SandboxWhereUniqueInput!]
  disconnect: [SandboxWhereUniqueInput!]
  update: [SandboxUpdateWithWhereUniqueWithoutSandboxPageInput!]
  upsert: [SandboxUpsertWithWhereUniqueWithoutSandboxPageInput!]
}

input SandboxUpdateWithoutSandboxPageDataInput {
  text: String
  video: String
  user: UserUpdateOneRequiredInput
  sandboxPageID: ID
  link: String
  likes: Int
}

input SandboxUpdateWithWhereUniqueWithoutSandboxPageInput {
  where: SandboxWhereUniqueInput!
  data: SandboxUpdateWithoutSandboxPageDataInput!
}

input SandboxUpsertWithWhereUniqueWithoutSandboxPageInput {
  where: SandboxWhereUniqueInput!
  update: SandboxUpdateWithoutSandboxPageDataInput!
  create: SandboxCreateWithoutSandboxPageInput!
}

input SandboxWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  video: String
  video_not: String
  video_in: [String!]
  video_not_in: [String!]
  video_lt: String
  video_lte: String
  video_gt: String
  video_gte: String
  video_contains: String
  video_not_contains: String
  video_starts_with: String
  video_not_starts_with: String
  video_ends_with: String
  video_not_ends_with: String
  user: UserWhereInput
  sandboxPage: SandboxPageWhereInput
  sandboxPageID: ID
  sandboxPageID_not: ID
  sandboxPageID_in: [ID!]
  sandboxPageID_not_in: [ID!]
  sandboxPageID_lt: ID
  sandboxPageID_lte: ID
  sandboxPageID_gt: ID
  sandboxPageID_gte: ID
  sandboxPageID_contains: ID
  sandboxPageID_not_contains: ID
  sandboxPageID_starts_with: ID
  sandboxPageID_not_starts_with: ID
  sandboxPageID_ends_with: ID
  sandboxPageID_not_ends_with: ID
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  AND: [SandboxWhereInput!]
  OR: [SandboxWhereInput!]
  NOT: [SandboxWhereInput!]
}

input SandboxWhereUniqueInput {
  id: ID
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  construction(where: ConstructionSubscriptionWhereInput): ConstructionSubscriptionPayload
  coursePage(where: CoursePageSubscriptionWhereInput): CoursePageSubscriptionPayload
  lesson(where: LessonSubscriptionWhereInput): LessonSubscriptionPayload
  problem(where: ProblemSubscriptionWhereInput): ProblemSubscriptionPayload
  sandbox(where: SandboxSubscriptionWhereInput): SandboxSubscriptionPayload
  sandboxPage(where: SandboxPageSubscriptionWhereInput): SandboxPageSubscriptionPayload
  sandboxPageGoal(where: SandboxPageGoalSubscriptionWhereInput): SandboxPageGoalSubscriptionPayload
  test(where: TestSubscriptionWhereInput): TestSubscriptionPayload
  textEditor(where: TextEditorSubscriptionWhereInput): TextEditorSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Test {
  id: ID!
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: User!
  lesson: Lesson!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TestConnection {
  pageInfo: PageInfo!
  edges: [TestEdge]!
  aggregate: AggregateTest!
}

input TestCreateInput {
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserCreateOneWithoutTestsInput!
  lesson: LessonCreateOneWithoutTestsInput!
  lessonID: ID!
}

input TestCreateManyWithoutLessonInput {
  create: [TestCreateWithoutLessonInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateManyWithoutUserInput {
  create: [TestCreateWithoutUserInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateWithoutLessonInput {
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserCreateOneWithoutTestsInput!
  lessonID: ID!
}

input TestCreateWithoutUserInput {
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  lesson: LessonCreateOneWithoutTestsInput!
  lessonID: ID!
}

type TestEdge {
  node: Test!
  cursor: String!
}

enum TestOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  answer1_ASC
  answer1_DESC
  answer1Correct_ASC
  answer1Correct_DESC
  answer2_ASC
  answer2_DESC
  answer2Correct_ASC
  answer2Correct_DESC
  answer3_ASC
  answer3_DESC
  answer3Correct_ASC
  answer3Correct_DESC
  answer4_ASC
  answer4_DESC
  answer4Correct_ASC
  answer4Correct_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TestPreviousValues {
  id: ID!
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TestSubscriptionPayload {
  mutation: MutationType!
  node: Test
  updatedFields: [String!]
  previousValues: TestPreviousValues
}

input TestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestWhereInput
  AND: [TestSubscriptionWhereInput!]
  OR: [TestSubscriptionWhereInput!]
  NOT: [TestSubscriptionWhereInput!]
}

input TestUpdateInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserUpdateOneRequiredWithoutTestsInput
  lesson: LessonUpdateOneRequiredWithoutTestsInput
  lessonID: ID
}

input TestUpdateManyWithoutLessonInput {
  create: [TestCreateWithoutLessonInput!]
  delete: [TestWhereUniqueInput!]
  connect: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutLessonInput!]
}

input TestUpdateManyWithoutUserInput {
  create: [TestCreateWithoutUserInput!]
  delete: [TestWhereUniqueInput!]
  connect: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutUserInput!]
}

input TestUpdateWithoutLessonDataInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserUpdateOneRequiredWithoutTestsInput
  lessonID: ID
}

input TestUpdateWithoutUserDataInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  lesson: LessonUpdateOneRequiredWithoutTestsInput
  lessonID: ID
}

input TestUpdateWithWhereUniqueWithoutLessonInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutLessonDataInput!
}

input TestUpdateWithWhereUniqueWithoutUserInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutUserDataInput!
}

input TestUpsertWithWhereUniqueWithoutLessonInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutLessonDataInput!
  create: TestCreateWithoutLessonInput!
}

input TestUpsertWithWhereUniqueWithoutUserInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutUserDataInput!
  create: TestCreateWithoutUserInput!
}

input TestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer1: String
  answer1_not: String
  answer1_in: [String!]
  answer1_not_in: [String!]
  answer1_lt: String
  answer1_lte: String
  answer1_gt: String
  answer1_gte: String
  answer1_contains: String
  answer1_not_contains: String
  answer1_starts_with: String
  answer1_not_starts_with: String
  answer1_ends_with: String
  answer1_not_ends_with: String
  answer1Correct: String
  answer1Correct_not: String
  answer1Correct_in: [String!]
  answer1Correct_not_in: [String!]
  answer1Correct_lt: String
  answer1Correct_lte: String
  answer1Correct_gt: String
  answer1Correct_gte: String
  answer1Correct_contains: String
  answer1Correct_not_contains: String
  answer1Correct_starts_with: String
  answer1Correct_not_starts_with: String
  answer1Correct_ends_with: String
  answer1Correct_not_ends_with: String
  answer2: String
  answer2_not: String
  answer2_in: [String!]
  answer2_not_in: [String!]
  answer2_lt: String
  answer2_lte: String
  answer2_gt: String
  answer2_gte: String
  answer2_contains: String
  answer2_not_contains: String
  answer2_starts_with: String
  answer2_not_starts_with: String
  answer2_ends_with: String
  answer2_not_ends_with: String
  answer2Correct: String
  answer2Correct_not: String
  answer2Correct_in: [String!]
  answer2Correct_not_in: [String!]
  answer2Correct_lt: String
  answer2Correct_lte: String
  answer2Correct_gt: String
  answer2Correct_gte: String
  answer2Correct_contains: String
  answer2Correct_not_contains: String
  answer2Correct_starts_with: String
  answer2Correct_not_starts_with: String
  answer2Correct_ends_with: String
  answer2Correct_not_ends_with: String
  answer3: String
  answer3_not: String
  answer3_in: [String!]
  answer3_not_in: [String!]
  answer3_lt: String
  answer3_lte: String
  answer3_gt: String
  answer3_gte: String
  answer3_contains: String
  answer3_not_contains: String
  answer3_starts_with: String
  answer3_not_starts_with: String
  answer3_ends_with: String
  answer3_not_ends_with: String
  answer3Correct: String
  answer3Correct_not: String
  answer3Correct_in: [String!]
  answer3Correct_not_in: [String!]
  answer3Correct_lt: String
  answer3Correct_lte: String
  answer3Correct_gt: String
  answer3Correct_gte: String
  answer3Correct_contains: String
  answer3Correct_not_contains: String
  answer3Correct_starts_with: String
  answer3Correct_not_starts_with: String
  answer3Correct_ends_with: String
  answer3Correct_not_ends_with: String
  answer4: String
  answer4_not: String
  answer4_in: [String!]
  answer4_not_in: [String!]
  answer4_lt: String
  answer4_lte: String
  answer4_gt: String
  answer4_gte: String
  answer4_contains: String
  answer4_not_contains: String
  answer4_starts_with: String
  answer4_not_starts_with: String
  answer4_ends_with: String
  answer4_not_ends_with: String
  answer4Correct: String
  answer4Correct_not: String
  answer4Correct_in: [String!]
  answer4Correct_not_in: [String!]
  answer4Correct_lt: String
  answer4Correct_lte: String
  answer4Correct_gt: String
  answer4Correct_gte: String
  answer4Correct_contains: String
  answer4Correct_not_contains: String
  answer4Correct_starts_with: String
  answer4Correct_not_starts_with: String
  answer4Correct_ends_with: String
  answer4Correct_not_ends_with: String
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TestWhereInput!]
  OR: [TestWhereInput!]
  NOT: [TestWhereInput!]
}

input TestWhereUniqueInput {
  id: ID
}

type TextEditor {
  id: ID!
  name: String!
  text: String!
  totalMistakes: String
  user: User!
  lesson: Lesson!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextEditorConnection {
  pageInfo: PageInfo!
  edges: [TextEditorEdge]!
  aggregate: AggregateTextEditor!
}

input TextEditorCreateInput {
  name: String!
  text: String!
  totalMistakes: String
  user: UserCreateOneWithoutTextEditorInput!
  lesson: LessonCreateOneWithoutTexteditorsInput!
  lessonID: ID!
}

input TextEditorCreateManyWithoutLessonInput {
  create: [TextEditorCreateWithoutLessonInput!]
  connect: [TextEditorWhereUniqueInput!]
}

input TextEditorCreateManyWithoutUserInput {
  create: [TextEditorCreateWithoutUserInput!]
  connect: [TextEditorWhereUniqueInput!]
}

input TextEditorCreateWithoutLessonInput {
  name: String!
  text: String!
  totalMistakes: String
  user: UserCreateOneWithoutTextEditorInput!
  lessonID: ID!
}

input TextEditorCreateWithoutUserInput {
  name: String!
  text: String!
  totalMistakes: String
  lesson: LessonCreateOneWithoutTexteditorsInput!
  lessonID: ID!
}

type TextEditorEdge {
  node: TextEditor!
  cursor: String!
}

enum TextEditorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  text_ASC
  text_DESC
  totalMistakes_ASC
  totalMistakes_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TextEditorPreviousValues {
  id: ID!
  name: String!
  text: String!
  totalMistakes: String
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextEditorSubscriptionPayload {
  mutation: MutationType!
  node: TextEditor
  updatedFields: [String!]
  previousValues: TextEditorPreviousValues
}

input TextEditorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TextEditorWhereInput
  AND: [TextEditorSubscriptionWhereInput!]
  OR: [TextEditorSubscriptionWhereInput!]
  NOT: [TextEditorSubscriptionWhereInput!]
}

input TextEditorUpdateInput {
  name: String
  text: String
  totalMistakes: String
  user: UserUpdateOneRequiredWithoutTextEditorInput
  lesson: LessonUpdateOneRequiredWithoutTexteditorsInput
  lessonID: ID
}

input TextEditorUpdateManyWithoutLessonInput {
  create: [TextEditorCreateWithoutLessonInput!]
  delete: [TextEditorWhereUniqueInput!]
  connect: [TextEditorWhereUniqueInput!]
  disconnect: [TextEditorWhereUniqueInput!]
  update: [TextEditorUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TextEditorUpsertWithWhereUniqueWithoutLessonInput!]
}

input TextEditorUpdateManyWithoutUserInput {
  create: [TextEditorCreateWithoutUserInput!]
  delete: [TextEditorWhereUniqueInput!]
  connect: [TextEditorWhereUniqueInput!]
  disconnect: [TextEditorWhereUniqueInput!]
  update: [TextEditorUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TextEditorUpsertWithWhereUniqueWithoutUserInput!]
}

input TextEditorUpdateWithoutLessonDataInput {
  name: String
  text: String
  totalMistakes: String
  user: UserUpdateOneRequiredWithoutTextEditorInput
  lessonID: ID
}

input TextEditorUpdateWithoutUserDataInput {
  name: String
  text: String
  totalMistakes: String
  lesson: LessonUpdateOneRequiredWithoutTexteditorsInput
  lessonID: ID
}

input TextEditorUpdateWithWhereUniqueWithoutLessonInput {
  where: TextEditorWhereUniqueInput!
  data: TextEditorUpdateWithoutLessonDataInput!
}

input TextEditorUpdateWithWhereUniqueWithoutUserInput {
  where: TextEditorWhereUniqueInput!
  data: TextEditorUpdateWithoutUserDataInput!
}

input TextEditorUpsertWithWhereUniqueWithoutLessonInput {
  where: TextEditorWhereUniqueInput!
  update: TextEditorUpdateWithoutLessonDataInput!
  create: TextEditorCreateWithoutLessonInput!
}

input TextEditorUpsertWithWhereUniqueWithoutUserInput {
  where: TextEditorWhereUniqueInput!
  update: TextEditorUpdateWithoutUserDataInput!
  create: TextEditorCreateWithoutUserInput!
}

input TextEditorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  totalMistakes: String
  totalMistakes_not: String
  totalMistakes_in: [String!]
  totalMistakes_not_in: [String!]
  totalMistakes_lt: String
  totalMistakes_lte: String
  totalMistakes_gt: String
  totalMistakes_gte: String
  totalMistakes_contains: String
  totalMistakes_not_contains: String
  totalMistakes_starts_with: String
  totalMistakes_not_starts_with: String
  totalMistakes_ends_with: String
  totalMistakes_not_ends_with: String
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextEditorWhereInput!]
  OR: [TextEditorWhereInput!]
  NOT: [TextEditorWhereInput!]
}

input TextEditorWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: [ID!]!
  subjects: [ID!]!
  sandboxes: [ID!]!
  permissions: [Permission!]!
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  sandboxPages(where: SandboxPageWhereInput, orderBy: SandboxPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPage!]
  sandboxPageGoals(where: SandboxPageGoalWhereInput, orderBy: SandboxPageGoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPageGoal!]
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem!]
  construction(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction!]
  textEditor(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor!]
  isFamiliar: Boolean!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreatefavouritesInput {
  set: [ID!]
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConstructionInput {
  create: UserCreateWithoutConstructionInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCoursePagesInput {
  create: UserCreateWithoutCoursePagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLessonsInput {
  create: UserCreateWithoutLessonsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProblemsInput {
  create: UserCreateWithoutProblemsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSandboxPageGoalsInput {
  create: UserCreateWithoutSandboxPageGoalsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSandboxPagesInput {
  create: UserCreateWithoutSandboxPagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTestsInput {
  create: UserCreateWithoutTestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTextEditorInput {
  create: UserCreateWithoutTextEditorInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreatesandboxesInput {
  set: [ID!]
}

input UserCreatesubjectsInput {
  set: [ID!]
}

input UserCreateWithoutConstructionInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutCoursePagesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutLessonsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutProblemsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutSandboxPageGoalsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutSandboxPagesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutTestsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutTextEditorInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  isFamiliar: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  isFamiliar_ASC
  isFamiliar_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  favourites: [ID!]!
  subjects: [ID!]!
  sandboxes: [ID!]!
  permissions: [Permission!]!
  isFamiliar: Boolean!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdatefavouritesInput {
  set: [ID!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutConstructionInput {
  create: UserCreateWithoutConstructionInput
  update: UserUpdateWithoutConstructionDataInput
  upsert: UserUpsertWithoutConstructionInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCoursePagesInput {
  create: UserCreateWithoutCoursePagesInput
  update: UserUpdateWithoutCoursePagesDataInput
  upsert: UserUpsertWithoutCoursePagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLessonsInput {
  create: UserCreateWithoutLessonsInput
  update: UserUpdateWithoutLessonsDataInput
  upsert: UserUpsertWithoutLessonsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProblemsInput {
  create: UserCreateWithoutProblemsInput
  update: UserUpdateWithoutProblemsDataInput
  upsert: UserUpsertWithoutProblemsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSandboxPageGoalsInput {
  create: UserCreateWithoutSandboxPageGoalsInput
  update: UserUpdateWithoutSandboxPageGoalsDataInput
  upsert: UserUpsertWithoutSandboxPageGoalsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSandboxPagesInput {
  create: UserCreateWithoutSandboxPagesInput
  update: UserUpdateWithoutSandboxPagesDataInput
  upsert: UserUpsertWithoutSandboxPagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTestsInput {
  create: UserCreateWithoutTestsInput
  update: UserUpdateWithoutTestsDataInput
  upsert: UserUpsertWithoutTestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTextEditorInput {
  create: UserCreateWithoutTextEditorInput
  update: UserUpdateWithoutTextEditorDataInput
  upsert: UserUpsertWithoutTextEditorInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdatesandboxesInput {
  set: [ID!]
}

input UserUpdatesubjectsInput {
  set: [ID!]
}

input UserUpdateWithoutConstructionDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutCoursePagesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutLessonsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutProblemsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutSandboxPageGoalsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutSandboxPagesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutTestsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutTextEditorDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutConstructionInput {
  update: UserUpdateWithoutConstructionDataInput!
  create: UserCreateWithoutConstructionInput!
}

input UserUpsertWithoutCoursePagesInput {
  update: UserUpdateWithoutCoursePagesDataInput!
  create: UserCreateWithoutCoursePagesInput!
}

input UserUpsertWithoutLessonsInput {
  update: UserUpdateWithoutLessonsDataInput!
  create: UserCreateWithoutLessonsInput!
}

input UserUpsertWithoutProblemsInput {
  update: UserUpdateWithoutProblemsDataInput!
  create: UserCreateWithoutProblemsInput!
}

input UserUpsertWithoutSandboxPageGoalsInput {
  update: UserUpdateWithoutSandboxPageGoalsDataInput!
  create: UserCreateWithoutSandboxPageGoalsInput!
}

input UserUpsertWithoutSandboxPagesInput {
  update: UserUpdateWithoutSandboxPagesDataInput!
  create: UserCreateWithoutSandboxPagesInput!
}

input UserUpsertWithoutTestsInput {
  update: UserUpdateWithoutTestsDataInput!
  create: UserCreateWithoutTestsInput!
}

input UserUpsertWithoutTextEditorInput {
  update: UserUpdateWithoutTextEditorDataInput!
  create: UserCreateWithoutTextEditorInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  sandboxPages_every: SandboxPageWhereInput
  sandboxPages_some: SandboxPageWhereInput
  sandboxPages_none: SandboxPageWhereInput
  sandboxPageGoals_every: SandboxPageGoalWhereInput
  sandboxPageGoals_some: SandboxPageGoalWhereInput
  sandboxPageGoals_none: SandboxPageGoalWhereInput
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  tests_every: TestWhereInput
  tests_some: TestWhereInput
  tests_none: TestWhereInput
  problems_every: ProblemWhereInput
  problems_some: ProblemWhereInput
  problems_none: ProblemWhereInput
  construction_every: ConstructionWhereInput
  construction_some: ConstructionWhereInput
  construction_none: ConstructionWhereInput
  textEditor_every: TextEditorWhereInput
  textEditor_some: TextEditorWhereInput
  textEditor_none: TextEditorWhereInput
  isFamiliar: Boolean
  isFamiliar_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
