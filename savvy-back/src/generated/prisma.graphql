type AggregateApplication {
  count: Int!
}

type AggregateCareerTrack {
  count: Int!
}

type AggregateCareerTrackUnit {
  count: Int!
}

type AggregateConstruction {
  count: Int!
}

type AggregateConstructionResult {
  count: Int!
}

type AggregateCoursePage {
  count: Int!
}

type AggregateLesson {
  count: Int!
}

type AggregateLessonResult {
  count: Int!
}

type AggregateNewTest {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregatePointA {
  count: Int!
}

type AggregatePointATest {
  count: Int!
}

type AggregateProblem {
  count: Int!
}

type AggregateProblemResult {
  count: Int!
}

type AggregateQuiz {
  count: Int!
}

type AggregateQuizResult {
  count: Int!
}

type AggregateSandbox {
  count: Int!
}

type AggregateSandboxPage {
  count: Int!
}

type AggregateSandboxPageGoal {
  count: Int!
}

type AggregateTest {
  count: Int!
}

type AggregateTestResult {
  count: Int!
}

type AggregateTextEditor {
  count: Int!
}

type AggregateTextEditorResult {
  count: Int!
}

type AggregateUni {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application {
  id: ID!
  applicantId: ID!
  applicantName: String!
  message: String
  coursePage: CoursePage!
  coursePageID: ID!
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  applicantId: ID!
  applicantName: String!
  message: String
  coursePage: CoursePageCreateOneWithoutApplicationsInput!
  coursePageID: ID!
}

input ApplicationCreateManyWithoutCoursePageInput {
  create: [ApplicationCreateWithoutCoursePageInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutCoursePageInput {
  applicantId: ID!
  applicantName: String!
  message: String
  coursePageID: ID!
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  applicantId_ASC
  applicantId_DESC
  applicantName_ASC
  applicantName_DESC
  message_ASC
  message_DESC
  coursePageID_ASC
  coursePageID_DESC
}

type ApplicationPreviousValues {
  id: ID!
  applicantId: ID!
  applicantName: String!
  message: String
  coursePageID: ID!
}

input ApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  applicantId: ID
  applicantId_not: ID
  applicantId_in: [ID!]
  applicantId_not_in: [ID!]
  applicantId_lt: ID
  applicantId_lte: ID
  applicantId_gt: ID
  applicantId_gte: ID
  applicantId_contains: ID
  applicantId_not_contains: ID
  applicantId_starts_with: ID
  applicantId_not_starts_with: ID
  applicantId_ends_with: ID
  applicantId_not_ends_with: ID
  applicantName: String
  applicantName_not: String
  applicantName_in: [String!]
  applicantName_not_in: [String!]
  applicantName_lt: String
  applicantName_lte: String
  applicantName_gt: String
  applicantName_gte: String
  applicantName_contains: String
  applicantName_not_contains: String
  applicantName_starts_with: String
  applicantName_not_starts_with: String
  applicantName_ends_with: String
  applicantName_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  AND: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePage: CoursePageUpdateOneRequiredWithoutApplicationsInput
  coursePageID: ID
}

input ApplicationUpdateManyDataInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePageID: ID
}

input ApplicationUpdateManyMutationInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePageID: ID
}

input ApplicationUpdateManyWithoutCoursePageInput {
  create: [ApplicationCreateWithoutCoursePageInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyDataInput!
}

input ApplicationUpdateWithoutCoursePageDataInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePageID: ID
}

input ApplicationUpdateWithWhereUniqueWithoutCoursePageInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutCoursePageDataInput!
}

input ApplicationUpsertWithWhereUniqueWithoutCoursePageInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutCoursePageDataInput!
  create: ApplicationCreateWithoutCoursePageInput!
}

input ApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  applicantId: ID
  applicantId_not: ID
  applicantId_in: [ID!]
  applicantId_not_in: [ID!]
  applicantId_lt: ID
  applicantId_lte: ID
  applicantId_gt: ID
  applicantId_gte: ID
  applicantId_contains: ID
  applicantId_not_contains: ID
  applicantId_starts_with: ID
  applicantId_not_starts_with: ID
  applicantId_ends_with: ID
  applicantId_not_ends_with: ID
  applicantName: String
  applicantName_not: String
  applicantName_in: [String!]
  applicantName_not_in: [String!]
  applicantName_lt: String
  applicantName_lte: String
  applicantName_gt: String
  applicantName_gte: String
  applicantName_contains: String
  applicantName_not_contains: String
  applicantName_starts_with: String
  applicantName_not_starts_with: String
  applicantName_ends_with: String
  applicantName_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  coursePage: CoursePageWhereInput
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type CareerTrack {
  id: ID!
  name: String!
  members: User
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  careerTrackUnits(where: CareerTrackUnitWhereInput, orderBy: CareerTrackUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareerTrackUnit!]
}

type CareerTrackConnection {
  pageInfo: PageInfo!
  edges: [CareerTrackEdge]!
  aggregate: AggregateCareerTrack!
}

input CareerTrackCreateInput {
  name: String!
  members: UserCreateOneWithoutCareerTrackInput
  coursePages: CoursePageCreateManyWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitCreateManyWithoutCareerTrackInput
}

input CareerTrackCreateManyWithoutCoursePagesInput {
  create: [CareerTrackCreateWithoutCoursePagesInput!]
  connect: [CareerTrackWhereUniqueInput!]
}

input CareerTrackCreateOneWithoutCareerTrackUnitsInput {
  create: CareerTrackCreateWithoutCareerTrackUnitsInput
  connect: CareerTrackWhereUniqueInput
}

input CareerTrackCreateOneWithoutMembersInput {
  create: CareerTrackCreateWithoutMembersInput
  connect: CareerTrackWhereUniqueInput
}

input CareerTrackCreateWithoutCareerTrackUnitsInput {
  name: String!
  members: UserCreateOneWithoutCareerTrackInput
  coursePages: CoursePageCreateManyWithoutCareerTrackInput
}

input CareerTrackCreateWithoutCoursePagesInput {
  name: String!
  members: UserCreateOneWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitCreateManyWithoutCareerTrackInput
}

input CareerTrackCreateWithoutMembersInput {
  name: String!
  coursePages: CoursePageCreateManyWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitCreateManyWithoutCareerTrackInput
}

type CareerTrackEdge {
  node: CareerTrack!
  cursor: String!
}

enum CareerTrackOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CareerTrackPreviousValues {
  id: ID!
  name: String!
}

input CareerTrackScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CareerTrackScalarWhereInput!]
  OR: [CareerTrackScalarWhereInput!]
  NOT: [CareerTrackScalarWhereInput!]
}

type CareerTrackSubscriptionPayload {
  mutation: MutationType!
  node: CareerTrack
  updatedFields: [String!]
  previousValues: CareerTrackPreviousValues
}

input CareerTrackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CareerTrackWhereInput
  AND: [CareerTrackSubscriptionWhereInput!]
  OR: [CareerTrackSubscriptionWhereInput!]
  NOT: [CareerTrackSubscriptionWhereInput!]
}

type CareerTrackUnit {
  id: ID!
  title: String!
  number: Int
  topics: [String!]!
  articles: [String!]!
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  careerTrack: CareerTrack!
}

type CareerTrackUnitConnection {
  pageInfo: PageInfo!
  edges: [CareerTrackUnitEdge]!
  aggregate: AggregateCareerTrackUnit!
}

input CareerTrackUnitCreatearticlesInput {
  set: [String!]
}

input CareerTrackUnitCreateInput {
  title: String!
  number: Int
  topics: CareerTrackUnitCreatetopicsInput
  articles: CareerTrackUnitCreatearticlesInput
  coursePages: CoursePageCreateManyInput
  careerTrack: CareerTrackCreateOneWithoutCareerTrackUnitsInput!
}

input CareerTrackUnitCreateManyWithoutCareerTrackInput {
  create: [CareerTrackUnitCreateWithoutCareerTrackInput!]
  connect: [CareerTrackUnitWhereUniqueInput!]
}

input CareerTrackUnitCreatetopicsInput {
  set: [String!]
}

input CareerTrackUnitCreateWithoutCareerTrackInput {
  title: String!
  number: Int
  topics: CareerTrackUnitCreatetopicsInput
  articles: CareerTrackUnitCreatearticlesInput
  coursePages: CoursePageCreateManyInput
}

type CareerTrackUnitEdge {
  node: CareerTrackUnit!
  cursor: String!
}

enum CareerTrackUnitOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  number_ASC
  number_DESC
}

type CareerTrackUnitPreviousValues {
  id: ID!
  title: String!
  number: Int
  topics: [String!]!
  articles: [String!]!
}

input CareerTrackUnitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  AND: [CareerTrackUnitScalarWhereInput!]
  OR: [CareerTrackUnitScalarWhereInput!]
  NOT: [CareerTrackUnitScalarWhereInput!]
}

type CareerTrackUnitSubscriptionPayload {
  mutation: MutationType!
  node: CareerTrackUnit
  updatedFields: [String!]
  previousValues: CareerTrackUnitPreviousValues
}

input CareerTrackUnitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CareerTrackUnitWhereInput
  AND: [CareerTrackUnitSubscriptionWhereInput!]
  OR: [CareerTrackUnitSubscriptionWhereInput!]
  NOT: [CareerTrackUnitSubscriptionWhereInput!]
}

input CareerTrackUnitUpdatearticlesInput {
  set: [String!]
}

input CareerTrackUnitUpdateInput {
  title: String
  number: Int
  topics: CareerTrackUnitUpdatetopicsInput
  articles: CareerTrackUnitUpdatearticlesInput
  coursePages: CoursePageUpdateManyInput
  careerTrack: CareerTrackUpdateOneRequiredWithoutCareerTrackUnitsInput
}

input CareerTrackUnitUpdateManyDataInput {
  title: String
  number: Int
  topics: CareerTrackUnitUpdatetopicsInput
  articles: CareerTrackUnitUpdatearticlesInput
}

input CareerTrackUnitUpdateManyMutationInput {
  title: String
  number: Int
  topics: CareerTrackUnitUpdatetopicsInput
  articles: CareerTrackUnitUpdatearticlesInput
}

input CareerTrackUnitUpdateManyWithoutCareerTrackInput {
  create: [CareerTrackUnitCreateWithoutCareerTrackInput!]
  delete: [CareerTrackUnitWhereUniqueInput!]
  connect: [CareerTrackUnitWhereUniqueInput!]
  set: [CareerTrackUnitWhereUniqueInput!]
  disconnect: [CareerTrackUnitWhereUniqueInput!]
  update: [CareerTrackUnitUpdateWithWhereUniqueWithoutCareerTrackInput!]
  upsert: [CareerTrackUnitUpsertWithWhereUniqueWithoutCareerTrackInput!]
  deleteMany: [CareerTrackUnitScalarWhereInput!]
  updateMany: [CareerTrackUnitUpdateManyWithWhereNestedInput!]
}

input CareerTrackUnitUpdateManyWithWhereNestedInput {
  where: CareerTrackUnitScalarWhereInput!
  data: CareerTrackUnitUpdateManyDataInput!
}

input CareerTrackUnitUpdatetopicsInput {
  set: [String!]
}

input CareerTrackUnitUpdateWithoutCareerTrackDataInput {
  title: String
  number: Int
  topics: CareerTrackUnitUpdatetopicsInput
  articles: CareerTrackUnitUpdatearticlesInput
  coursePages: CoursePageUpdateManyInput
}

input CareerTrackUnitUpdateWithWhereUniqueWithoutCareerTrackInput {
  where: CareerTrackUnitWhereUniqueInput!
  data: CareerTrackUnitUpdateWithoutCareerTrackDataInput!
}

input CareerTrackUnitUpsertWithWhereUniqueWithoutCareerTrackInput {
  where: CareerTrackUnitWhereUniqueInput!
  update: CareerTrackUnitUpdateWithoutCareerTrackDataInput!
  create: CareerTrackUnitCreateWithoutCareerTrackInput!
}

input CareerTrackUnitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  careerTrack: CareerTrackWhereInput
  AND: [CareerTrackUnitWhereInput!]
  OR: [CareerTrackUnitWhereInput!]
  NOT: [CareerTrackUnitWhereInput!]
}

input CareerTrackUnitWhereUniqueInput {
  id: ID
}

input CareerTrackUpdateInput {
  name: String
  members: UserUpdateOneWithoutCareerTrackInput
  coursePages: CoursePageUpdateManyWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitUpdateManyWithoutCareerTrackInput
}

input CareerTrackUpdateManyDataInput {
  name: String
}

input CareerTrackUpdateManyMutationInput {
  name: String
}

input CareerTrackUpdateManyWithoutCoursePagesInput {
  create: [CareerTrackCreateWithoutCoursePagesInput!]
  delete: [CareerTrackWhereUniqueInput!]
  connect: [CareerTrackWhereUniqueInput!]
  set: [CareerTrackWhereUniqueInput!]
  disconnect: [CareerTrackWhereUniqueInput!]
  update: [CareerTrackUpdateWithWhereUniqueWithoutCoursePagesInput!]
  upsert: [CareerTrackUpsertWithWhereUniqueWithoutCoursePagesInput!]
  deleteMany: [CareerTrackScalarWhereInput!]
  updateMany: [CareerTrackUpdateManyWithWhereNestedInput!]
}

input CareerTrackUpdateManyWithWhereNestedInput {
  where: CareerTrackScalarWhereInput!
  data: CareerTrackUpdateManyDataInput!
}

input CareerTrackUpdateOneRequiredWithoutCareerTrackUnitsInput {
  create: CareerTrackCreateWithoutCareerTrackUnitsInput
  update: CareerTrackUpdateWithoutCareerTrackUnitsDataInput
  upsert: CareerTrackUpsertWithoutCareerTrackUnitsInput
  connect: CareerTrackWhereUniqueInput
}

input CareerTrackUpdateOneWithoutMembersInput {
  create: CareerTrackCreateWithoutMembersInput
  update: CareerTrackUpdateWithoutMembersDataInput
  upsert: CareerTrackUpsertWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: CareerTrackWhereUniqueInput
}

input CareerTrackUpdateWithoutCareerTrackUnitsDataInput {
  name: String
  members: UserUpdateOneWithoutCareerTrackInput
  coursePages: CoursePageUpdateManyWithoutCareerTrackInput
}

input CareerTrackUpdateWithoutCoursePagesDataInput {
  name: String
  members: UserUpdateOneWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitUpdateManyWithoutCareerTrackInput
}

input CareerTrackUpdateWithoutMembersDataInput {
  name: String
  coursePages: CoursePageUpdateManyWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitUpdateManyWithoutCareerTrackInput
}

input CareerTrackUpdateWithWhereUniqueWithoutCoursePagesInput {
  where: CareerTrackWhereUniqueInput!
  data: CareerTrackUpdateWithoutCoursePagesDataInput!
}

input CareerTrackUpsertWithoutCareerTrackUnitsInput {
  update: CareerTrackUpdateWithoutCareerTrackUnitsDataInput!
  create: CareerTrackCreateWithoutCareerTrackUnitsInput!
}

input CareerTrackUpsertWithoutMembersInput {
  update: CareerTrackUpdateWithoutMembersDataInput!
  create: CareerTrackCreateWithoutMembersInput!
}

input CareerTrackUpsertWithWhereUniqueWithoutCoursePagesInput {
  where: CareerTrackWhereUniqueInput!
  update: CareerTrackUpdateWithoutCoursePagesDataInput!
  create: CareerTrackCreateWithoutCoursePagesInput!
}

input CareerTrackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members: UserWhereInput
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  careerTrackUnits_every: CareerTrackUnitWhereInput
  careerTrackUnits_some: CareerTrackUnitWhereInput
  careerTrackUnits_none: CareerTrackUnitWhereInput
  AND: [CareerTrackWhereInput!]
  OR: [CareerTrackWhereInput!]
  NOT: [CareerTrackWhereInput!]
}

input CareerTrackWhereUniqueInput {
  id: ID
}

type Construction {
  id: ID!
  name: String!
  variants: [String!]!
  answer: [String!]!
  hint: String
  type: String!
  constructionResults(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConstructionResult!]
  user: User!
  lesson: Lesson!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConstructionConnection {
  pageInfo: PageInfo!
  edges: [ConstructionEdge]!
  aggregate: AggregateConstruction!
}

input ConstructionCreateanswerInput {
  set: [String!]
}

input ConstructionCreateInput {
  name: String!
  variants: ConstructionCreatevariantsInput
  answer: ConstructionCreateanswerInput
  hint: String
  type: String!
  constructionResults: ConstructionResultCreateManyWithoutConstructionInput
  user: UserCreateOneWithoutConstructionInput!
  lesson: LessonCreateOneWithoutConstructionsInput!
  lessonID: ID!
}

input ConstructionCreateManyWithoutLessonInput {
  create: [ConstructionCreateWithoutLessonInput!]
  connect: [ConstructionWhereUniqueInput!]
}

input ConstructionCreateManyWithoutUserInput {
  create: [ConstructionCreateWithoutUserInput!]
  connect: [ConstructionWhereUniqueInput!]
}

input ConstructionCreateOneWithoutConstructionResultsInput {
  create: ConstructionCreateWithoutConstructionResultsInput
  connect: ConstructionWhereUniqueInput
}

input ConstructionCreatevariantsInput {
  set: [String!]
}

input ConstructionCreateWithoutConstructionResultsInput {
  name: String!
  variants: ConstructionCreatevariantsInput
  answer: ConstructionCreateanswerInput
  hint: String
  type: String!
  user: UserCreateOneWithoutConstructionInput!
  lesson: LessonCreateOneWithoutConstructionsInput!
  lessonID: ID!
}

input ConstructionCreateWithoutLessonInput {
  name: String!
  variants: ConstructionCreatevariantsInput
  answer: ConstructionCreateanswerInput
  hint: String
  type: String!
  constructionResults: ConstructionResultCreateManyWithoutConstructionInput
  user: UserCreateOneWithoutConstructionInput!
  lessonID: ID!
}

input ConstructionCreateWithoutUserInput {
  name: String!
  variants: ConstructionCreatevariantsInput
  answer: ConstructionCreateanswerInput
  hint: String
  type: String!
  constructionResults: ConstructionResultCreateManyWithoutConstructionInput
  lesson: LessonCreateOneWithoutConstructionsInput!
  lessonID: ID!
}

type ConstructionEdge {
  node: Construction!
  cursor: String!
}

enum ConstructionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  hint_ASC
  hint_DESC
  type_ASC
  type_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConstructionPreviousValues {
  id: ID!
  name: String!
  variants: [String!]!
  answer: [String!]!
  hint: String
  type: String!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConstructionResult {
  id: ID!
  student: User!
  answer: String
  attempts: Int
  construction: Construction
  constructionID: ID
  lesson: Lesson
  lessonID: ID
}

type ConstructionResultConnection {
  pageInfo: PageInfo!
  edges: [ConstructionResultEdge]!
  aggregate: AggregateConstructionResult!
}

input ConstructionResultCreateInput {
  student: UserCreateOneWithoutConstructionResultsInput!
  answer: String
  attempts: Int
  construction: ConstructionCreateOneWithoutConstructionResultsInput
  constructionID: ID
  lesson: LessonCreateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultCreateManyWithoutConstructionInput {
  create: [ConstructionResultCreateWithoutConstructionInput!]
  connect: [ConstructionResultWhereUniqueInput!]
}

input ConstructionResultCreateManyWithoutLessonInput {
  create: [ConstructionResultCreateWithoutLessonInput!]
  connect: [ConstructionResultWhereUniqueInput!]
}

input ConstructionResultCreateManyWithoutStudentInput {
  create: [ConstructionResultCreateWithoutStudentInput!]
  connect: [ConstructionResultWhereUniqueInput!]
}

input ConstructionResultCreateWithoutConstructionInput {
  student: UserCreateOneWithoutConstructionResultsInput!
  answer: String
  attempts: Int
  constructionID: ID
  lesson: LessonCreateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultCreateWithoutLessonInput {
  student: UserCreateOneWithoutConstructionResultsInput!
  answer: String
  attempts: Int
  construction: ConstructionCreateOneWithoutConstructionResultsInput
  constructionID: ID
  lessonID: ID
}

input ConstructionResultCreateWithoutStudentInput {
  answer: String
  attempts: Int
  construction: ConstructionCreateOneWithoutConstructionResultsInput
  constructionID: ID
  lesson: LessonCreateOneWithoutConstructionResultsInput
  lessonID: ID
}

type ConstructionResultEdge {
  node: ConstructionResult!
  cursor: String!
}

enum ConstructionResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  attempts_ASC
  attempts_DESC
  constructionID_ASC
  constructionID_DESC
  lessonID_ASC
  lessonID_DESC
}

type ConstructionResultPreviousValues {
  id: ID!
  answer: String
  attempts: Int
  constructionID: ID
  lessonID: ID
}

input ConstructionResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  constructionID: ID
  constructionID_not: ID
  constructionID_in: [ID!]
  constructionID_not_in: [ID!]
  constructionID_lt: ID
  constructionID_lte: ID
  constructionID_gt: ID
  constructionID_gte: ID
  constructionID_contains: ID
  constructionID_not_contains: ID
  constructionID_starts_with: ID
  constructionID_not_starts_with: ID
  constructionID_ends_with: ID
  constructionID_not_ends_with: ID
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  AND: [ConstructionResultScalarWhereInput!]
  OR: [ConstructionResultScalarWhereInput!]
  NOT: [ConstructionResultScalarWhereInput!]
}

type ConstructionResultSubscriptionPayload {
  mutation: MutationType!
  node: ConstructionResult
  updatedFields: [String!]
  previousValues: ConstructionResultPreviousValues
}

input ConstructionResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConstructionResultWhereInput
  AND: [ConstructionResultSubscriptionWhereInput!]
  OR: [ConstructionResultSubscriptionWhereInput!]
  NOT: [ConstructionResultSubscriptionWhereInput!]
}

input ConstructionResultUpdateInput {
  student: UserUpdateOneRequiredWithoutConstructionResultsInput
  answer: String
  attempts: Int
  construction: ConstructionUpdateOneWithoutConstructionResultsInput
  constructionID: ID
  lesson: LessonUpdateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultUpdateManyDataInput {
  answer: String
  attempts: Int
  constructionID: ID
  lessonID: ID
}

input ConstructionResultUpdateManyMutationInput {
  answer: String
  attempts: Int
  constructionID: ID
  lessonID: ID
}

input ConstructionResultUpdateManyWithoutConstructionInput {
  create: [ConstructionResultCreateWithoutConstructionInput!]
  delete: [ConstructionResultWhereUniqueInput!]
  connect: [ConstructionResultWhereUniqueInput!]
  set: [ConstructionResultWhereUniqueInput!]
  disconnect: [ConstructionResultWhereUniqueInput!]
  update: [ConstructionResultUpdateWithWhereUniqueWithoutConstructionInput!]
  upsert: [ConstructionResultUpsertWithWhereUniqueWithoutConstructionInput!]
  deleteMany: [ConstructionResultScalarWhereInput!]
  updateMany: [ConstructionResultUpdateManyWithWhereNestedInput!]
}

input ConstructionResultUpdateManyWithoutLessonInput {
  create: [ConstructionResultCreateWithoutLessonInput!]
  delete: [ConstructionResultWhereUniqueInput!]
  connect: [ConstructionResultWhereUniqueInput!]
  set: [ConstructionResultWhereUniqueInput!]
  disconnect: [ConstructionResultWhereUniqueInput!]
  update: [ConstructionResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ConstructionResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ConstructionResultScalarWhereInput!]
  updateMany: [ConstructionResultUpdateManyWithWhereNestedInput!]
}

input ConstructionResultUpdateManyWithoutStudentInput {
  create: [ConstructionResultCreateWithoutStudentInput!]
  delete: [ConstructionResultWhereUniqueInput!]
  connect: [ConstructionResultWhereUniqueInput!]
  set: [ConstructionResultWhereUniqueInput!]
  disconnect: [ConstructionResultWhereUniqueInput!]
  update: [ConstructionResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [ConstructionResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [ConstructionResultScalarWhereInput!]
  updateMany: [ConstructionResultUpdateManyWithWhereNestedInput!]
}

input ConstructionResultUpdateManyWithWhereNestedInput {
  where: ConstructionResultScalarWhereInput!
  data: ConstructionResultUpdateManyDataInput!
}

input ConstructionResultUpdateWithoutConstructionDataInput {
  student: UserUpdateOneRequiredWithoutConstructionResultsInput
  answer: String
  attempts: Int
  constructionID: ID
  lesson: LessonUpdateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutConstructionResultsInput
  answer: String
  attempts: Int
  construction: ConstructionUpdateOneWithoutConstructionResultsInput
  constructionID: ID
  lessonID: ID
}

input ConstructionResultUpdateWithoutStudentDataInput {
  answer: String
  attempts: Int
  construction: ConstructionUpdateOneWithoutConstructionResultsInput
  constructionID: ID
  lesson: LessonUpdateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultUpdateWithWhereUniqueWithoutConstructionInput {
  where: ConstructionResultWhereUniqueInput!
  data: ConstructionResultUpdateWithoutConstructionDataInput!
}

input ConstructionResultUpdateWithWhereUniqueWithoutLessonInput {
  where: ConstructionResultWhereUniqueInput!
  data: ConstructionResultUpdateWithoutLessonDataInput!
}

input ConstructionResultUpdateWithWhereUniqueWithoutStudentInput {
  where: ConstructionResultWhereUniqueInput!
  data: ConstructionResultUpdateWithoutStudentDataInput!
}

input ConstructionResultUpsertWithWhereUniqueWithoutConstructionInput {
  where: ConstructionResultWhereUniqueInput!
  update: ConstructionResultUpdateWithoutConstructionDataInput!
  create: ConstructionResultCreateWithoutConstructionInput!
}

input ConstructionResultUpsertWithWhereUniqueWithoutLessonInput {
  where: ConstructionResultWhereUniqueInput!
  update: ConstructionResultUpdateWithoutLessonDataInput!
  create: ConstructionResultCreateWithoutLessonInput!
}

input ConstructionResultUpsertWithWhereUniqueWithoutStudentInput {
  where: ConstructionResultWhereUniqueInput!
  update: ConstructionResultUpdateWithoutStudentDataInput!
  create: ConstructionResultCreateWithoutStudentInput!
}

input ConstructionResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  construction: ConstructionWhereInput
  constructionID: ID
  constructionID_not: ID
  constructionID_in: [ID!]
  constructionID_not_in: [ID!]
  constructionID_lt: ID
  constructionID_lte: ID
  constructionID_gt: ID
  constructionID_gte: ID
  constructionID_contains: ID
  constructionID_not_contains: ID
  constructionID_starts_with: ID
  constructionID_not_starts_with: ID
  constructionID_ends_with: ID
  constructionID_not_ends_with: ID
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  AND: [ConstructionResultWhereInput!]
  OR: [ConstructionResultWhereInput!]
  NOT: [ConstructionResultWhereInput!]
}

input ConstructionResultWhereUniqueInput {
  id: ID
}

input ConstructionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hint: String
  hint_not: String
  hint_in: [String!]
  hint_not_in: [String!]
  hint_lt: String
  hint_lte: String
  hint_gt: String
  hint_gte: String
  hint_contains: String
  hint_not_contains: String
  hint_starts_with: String
  hint_not_starts_with: String
  hint_ends_with: String
  hint_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConstructionScalarWhereInput!]
  OR: [ConstructionScalarWhereInput!]
  NOT: [ConstructionScalarWhereInput!]
}

type ConstructionSubscriptionPayload {
  mutation: MutationType!
  node: Construction
  updatedFields: [String!]
  previousValues: ConstructionPreviousValues
}

input ConstructionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConstructionWhereInput
  AND: [ConstructionSubscriptionWhereInput!]
  OR: [ConstructionSubscriptionWhereInput!]
  NOT: [ConstructionSubscriptionWhereInput!]
}

input ConstructionUpdateanswerInput {
  set: [String!]
}

input ConstructionUpdateInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  constructionResults: ConstructionResultUpdateManyWithoutConstructionInput
  user: UserUpdateOneRequiredWithoutConstructionInput
  lesson: LessonUpdateOneRequiredWithoutConstructionsInput
  lessonID: ID
}

input ConstructionUpdateManyDataInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  lessonID: ID
}

input ConstructionUpdateManyMutationInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  lessonID: ID
}

input ConstructionUpdateManyWithoutLessonInput {
  create: [ConstructionCreateWithoutLessonInput!]
  delete: [ConstructionWhereUniqueInput!]
  connect: [ConstructionWhereUniqueInput!]
  set: [ConstructionWhereUniqueInput!]
  disconnect: [ConstructionWhereUniqueInput!]
  update: [ConstructionUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ConstructionUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ConstructionScalarWhereInput!]
  updateMany: [ConstructionUpdateManyWithWhereNestedInput!]
}

input ConstructionUpdateManyWithoutUserInput {
  create: [ConstructionCreateWithoutUserInput!]
  delete: [ConstructionWhereUniqueInput!]
  connect: [ConstructionWhereUniqueInput!]
  set: [ConstructionWhereUniqueInput!]
  disconnect: [ConstructionWhereUniqueInput!]
  update: [ConstructionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ConstructionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ConstructionScalarWhereInput!]
  updateMany: [ConstructionUpdateManyWithWhereNestedInput!]
}

input ConstructionUpdateManyWithWhereNestedInput {
  where: ConstructionScalarWhereInput!
  data: ConstructionUpdateManyDataInput!
}

input ConstructionUpdateOneWithoutConstructionResultsInput {
  create: ConstructionCreateWithoutConstructionResultsInput
  update: ConstructionUpdateWithoutConstructionResultsDataInput
  upsert: ConstructionUpsertWithoutConstructionResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: ConstructionWhereUniqueInput
}

input ConstructionUpdatevariantsInput {
  set: [String!]
}

input ConstructionUpdateWithoutConstructionResultsDataInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  user: UserUpdateOneRequiredWithoutConstructionInput
  lesson: LessonUpdateOneRequiredWithoutConstructionsInput
  lessonID: ID
}

input ConstructionUpdateWithoutLessonDataInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  constructionResults: ConstructionResultUpdateManyWithoutConstructionInput
  user: UserUpdateOneRequiredWithoutConstructionInput
  lessonID: ID
}

input ConstructionUpdateWithoutUserDataInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  constructionResults: ConstructionResultUpdateManyWithoutConstructionInput
  lesson: LessonUpdateOneRequiredWithoutConstructionsInput
  lessonID: ID
}

input ConstructionUpdateWithWhereUniqueWithoutLessonInput {
  where: ConstructionWhereUniqueInput!
  data: ConstructionUpdateWithoutLessonDataInput!
}

input ConstructionUpdateWithWhereUniqueWithoutUserInput {
  where: ConstructionWhereUniqueInput!
  data: ConstructionUpdateWithoutUserDataInput!
}

input ConstructionUpsertWithoutConstructionResultsInput {
  update: ConstructionUpdateWithoutConstructionResultsDataInput!
  create: ConstructionCreateWithoutConstructionResultsInput!
}

input ConstructionUpsertWithWhereUniqueWithoutLessonInput {
  where: ConstructionWhereUniqueInput!
  update: ConstructionUpdateWithoutLessonDataInput!
  create: ConstructionCreateWithoutLessonInput!
}

input ConstructionUpsertWithWhereUniqueWithoutUserInput {
  where: ConstructionWhereUniqueInput!
  update: ConstructionUpdateWithoutUserDataInput!
  create: ConstructionCreateWithoutUserInput!
}

input ConstructionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hint: String
  hint_not: String
  hint_in: [String!]
  hint_not_in: [String!]
  hint_lt: String
  hint_lte: String
  hint_gt: String
  hint_gte: String
  hint_contains: String
  hint_not_contains: String
  hint_starts_with: String
  hint_not_starts_with: String
  hint_ends_with: String
  hint_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  constructionResults_every: ConstructionResultWhereInput
  constructionResults_some: ConstructionResultWhereInput
  constructionResults_none: ConstructionResultWhereInput
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConstructionWhereInput!]
  OR: [ConstructionWhereInput!]
  NOT: [ConstructionWhereInput!]
}

input ConstructionWhereUniqueInput {
  id: ID
}

type CoursePage {
  id: ID!
  title: String!
  description: String!
  image: String!
  user: User!
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  pointsA(where: PointAWhereInput, orderBy: PointAOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PointA!]
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  pointATests(where: PointATestWhereInput, orderBy: PointATestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PointATest!]
  careerTrack(where: CareerTrackWhereInput, orderBy: CareerTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareerTrack!]
  numInCareerTrack: Int
  published: Boolean
  uni: Uni
  uniID: ID
  tags: [String!]!
  courseType: CourseType
  students: [ID!]!
  new_students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  price: Int
  discountPrice: Int
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CoursePageConnection {
  pageInfo: PageInfo!
  edges: [CoursePageEdge]!
  aggregate: AggregateCoursePage!
}

input CoursePageCreateInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  pointsA: PointACreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

input CoursePageCreateManyInput {
  create: [CoursePageCreateInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutCareerTrackInput {
  create: [CoursePageCreateWithoutCareerTrackInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutNew_studentsInput {
  create: [CoursePageCreateWithoutNew_studentsInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutUniInput {
  create: [CoursePageCreateWithoutUniInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutUserInput {
  create: [CoursePageCreateWithoutUserInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateOneWithoutApplicationsInput {
  create: CoursePageCreateWithoutApplicationsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreateOneWithoutLessonsInput {
  create: CoursePageCreateWithoutLessonsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreateOneWithoutOrdersInput {
  create: CoursePageCreateWithoutOrdersInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreateOneWithoutPointATestsInput {
  create: CoursePageCreateWithoutPointATestsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreateOneWithoutPointsAInput {
  create: CoursePageCreateWithoutPointsAInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreatestudentsInput {
  set: [ID!]
}

input CoursePageCreatetagsInput {
  set: [String!]
}

input CoursePageCreateWithoutApplicationsInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  pointsA: PointACreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

input CoursePageCreateWithoutCareerTrackInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  pointsA: PointACreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

input CoursePageCreateWithoutLessonsInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  pointsA: PointACreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

input CoursePageCreateWithoutNew_studentsInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  pointsA: PointACreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

input CoursePageCreateWithoutOrdersInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  pointsA: PointACreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
}

input CoursePageCreateWithoutPointATestsInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  pointsA: PointACreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

input CoursePageCreateWithoutPointsAInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

input CoursePageCreateWithoutUniInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  pointsA: PointACreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

input CoursePageCreateWithoutUserInput {
  title: String!
  description: String!
  image: String!
  lessons: LessonCreateManyWithoutCoursePageInput
  pointsA: PointACreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  pointATests: PointATestCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
}

type CoursePageEdge {
  node: CoursePage!
  cursor: String!
}

enum CoursePageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  numInCareerTrack_ASC
  numInCareerTrack_DESC
  published_ASC
  published_DESC
  uniID_ASC
  uniID_DESC
  courseType_ASC
  courseType_DESC
  price_ASC
  price_DESC
  discountPrice_ASC
  discountPrice_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CoursePagePreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String!
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  tags: [String!]!
  courseType: CourseType
  students: [ID!]!
  price: Int
  discountPrice: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CoursePageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  numInCareerTrack: Int
  numInCareerTrack_not: Int
  numInCareerTrack_in: [Int!]
  numInCareerTrack_not_in: [Int!]
  numInCareerTrack_lt: Int
  numInCareerTrack_lte: Int
  numInCareerTrack_gt: Int
  numInCareerTrack_gte: Int
  published: Boolean
  published_not: Boolean
  uniID: ID
  uniID_not: ID
  uniID_in: [ID!]
  uniID_not_in: [ID!]
  uniID_lt: ID
  uniID_lte: ID
  uniID_gt: ID
  uniID_gte: ID
  uniID_contains: ID
  uniID_not_contains: ID
  uniID_starts_with: ID
  uniID_not_starts_with: ID
  uniID_ends_with: ID
  uniID_not_ends_with: ID
  courseType: CourseType
  courseType_not: CourseType
  courseType_in: [CourseType!]
  courseType_not_in: [CourseType!]
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  discountPrice: Int
  discountPrice_not: Int
  discountPrice_in: [Int!]
  discountPrice_not_in: [Int!]
  discountPrice_lt: Int
  discountPrice_lte: Int
  discountPrice_gt: Int
  discountPrice_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CoursePageScalarWhereInput!]
  OR: [CoursePageScalarWhereInput!]
  NOT: [CoursePageScalarWhereInput!]
}

type CoursePageSubscriptionPayload {
  mutation: MutationType!
  node: CoursePage
  updatedFields: [String!]
  previousValues: CoursePagePreviousValues
}

input CoursePageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CoursePageWhereInput
  AND: [CoursePageSubscriptionWhereInput!]
  OR: [CoursePageSubscriptionWhereInput!]
  NOT: [CoursePageSubscriptionWhereInput!]
}

input CoursePageUpdateDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateManyDataInput {
  title: String
  description: String
  image: String
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  price: Int
  discountPrice: Int
}

input CoursePageUpdateManyInput {
  create: [CoursePageCreateInput!]
  update: [CoursePageUpdateWithWhereUniqueNestedInput!]
  upsert: [CoursePageUpsertWithWhereUniqueNestedInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyMutationInput {
  title: String
  description: String
  image: String
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  price: Int
  discountPrice: Int
}

input CoursePageUpdateManyWithoutCareerTrackInput {
  create: [CoursePageCreateWithoutCareerTrackInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutCareerTrackInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutCareerTrackInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutNew_studentsInput {
  create: [CoursePageCreateWithoutNew_studentsInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutNew_studentsInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutNew_studentsInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutUniInput {
  create: [CoursePageCreateWithoutUniInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutUniInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutUniInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutUserInput {
  create: [CoursePageCreateWithoutUserInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithWhereNestedInput {
  where: CoursePageScalarWhereInput!
  data: CoursePageUpdateManyDataInput!
}

input CoursePageUpdateOneRequiredWithoutApplicationsInput {
  create: CoursePageCreateWithoutApplicationsInput
  update: CoursePageUpdateWithoutApplicationsDataInput
  upsert: CoursePageUpsertWithoutApplicationsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdateOneRequiredWithoutLessonsInput {
  create: CoursePageCreateWithoutLessonsInput
  update: CoursePageUpdateWithoutLessonsDataInput
  upsert: CoursePageUpsertWithoutLessonsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdateOneRequiredWithoutOrdersInput {
  create: CoursePageCreateWithoutOrdersInput
  update: CoursePageUpdateWithoutOrdersDataInput
  upsert: CoursePageUpsertWithoutOrdersInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdateOneRequiredWithoutPointsAInput {
  create: CoursePageCreateWithoutPointsAInput
  update: CoursePageUpdateWithoutPointsADataInput
  upsert: CoursePageUpsertWithoutPointsAInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdateOneWithoutPointATestsInput {
  create: CoursePageCreateWithoutPointATestsInput
  update: CoursePageUpdateWithoutPointATestsDataInput
  upsert: CoursePageUpsertWithoutPointATestsInput
  delete: Boolean
  disconnect: Boolean
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdatestudentsInput {
  set: [ID!]
}

input CoursePageUpdatetagsInput {
  set: [String!]
}

input CoursePageUpdateWithoutApplicationsDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateWithoutCareerTrackDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateWithoutLessonsDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateWithoutNew_studentsDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateWithoutOrdersDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
}

input CoursePageUpdateWithoutPointATestsDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateWithoutPointsADataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateWithoutUniDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateWithoutUserDataInput {
  title: String
  description: String
  image: String
  lessons: LessonUpdateManyWithoutCoursePageInput
  pointsA: PointAUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  pointATests: PointATestUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
}

input CoursePageUpdateWithWhereUniqueNestedInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutCareerTrackInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutCareerTrackDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutNew_studentsInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutNew_studentsDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutUniInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutUniDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutUserInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutUserDataInput!
}

input CoursePageUpsertWithoutApplicationsInput {
  update: CoursePageUpdateWithoutApplicationsDataInput!
  create: CoursePageCreateWithoutApplicationsInput!
}

input CoursePageUpsertWithoutLessonsInput {
  update: CoursePageUpdateWithoutLessonsDataInput!
  create: CoursePageCreateWithoutLessonsInput!
}

input CoursePageUpsertWithoutOrdersInput {
  update: CoursePageUpdateWithoutOrdersDataInput!
  create: CoursePageCreateWithoutOrdersInput!
}

input CoursePageUpsertWithoutPointATestsInput {
  update: CoursePageUpdateWithoutPointATestsDataInput!
  create: CoursePageCreateWithoutPointATestsInput!
}

input CoursePageUpsertWithoutPointsAInput {
  update: CoursePageUpdateWithoutPointsADataInput!
  create: CoursePageCreateWithoutPointsAInput!
}

input CoursePageUpsertWithWhereUniqueNestedInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateDataInput!
  create: CoursePageCreateInput!
}

input CoursePageUpsertWithWhereUniqueWithoutCareerTrackInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutCareerTrackDataInput!
  create: CoursePageCreateWithoutCareerTrackInput!
}

input CoursePageUpsertWithWhereUniqueWithoutNew_studentsInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutNew_studentsDataInput!
  create: CoursePageCreateWithoutNew_studentsInput!
}

input CoursePageUpsertWithWhereUniqueWithoutUniInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutUniDataInput!
  create: CoursePageCreateWithoutUniInput!
}

input CoursePageUpsertWithWhereUniqueWithoutUserInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutUserDataInput!
  create: CoursePageCreateWithoutUserInput!
}

input CoursePageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  user: UserWhereInput
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  pointsA_every: PointAWhereInput
  pointsA_some: PointAWhereInput
  pointsA_none: PointAWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  pointATests_every: PointATestWhereInput
  pointATests_some: PointATestWhereInput
  pointATests_none: PointATestWhereInput
  careerTrack_every: CareerTrackWhereInput
  careerTrack_some: CareerTrackWhereInput
  careerTrack_none: CareerTrackWhereInput
  numInCareerTrack: Int
  numInCareerTrack_not: Int
  numInCareerTrack_in: [Int!]
  numInCareerTrack_not_in: [Int!]
  numInCareerTrack_lt: Int
  numInCareerTrack_lte: Int
  numInCareerTrack_gt: Int
  numInCareerTrack_gte: Int
  published: Boolean
  published_not: Boolean
  uni: UniWhereInput
  uniID: ID
  uniID_not: ID
  uniID_in: [ID!]
  uniID_not_in: [ID!]
  uniID_lt: ID
  uniID_lte: ID
  uniID_gt: ID
  uniID_gte: ID
  uniID_contains: ID
  uniID_not_contains: ID
  uniID_starts_with: ID
  uniID_not_starts_with: ID
  uniID_ends_with: ID
  uniID_not_ends_with: ID
  courseType: CourseType
  courseType_not: CourseType
  courseType_in: [CourseType!]
  courseType_not_in: [CourseType!]
  new_students_every: UserWhereInput
  new_students_some: UserWhereInput
  new_students_none: UserWhereInput
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  discountPrice: Int
  discountPrice_not: Int
  discountPrice_in: [Int!]
  discountPrice_not_in: [Int!]
  discountPrice_lt: Int
  discountPrice_lte: Int
  discountPrice_gt: Int
  discountPrice_gte: Int
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CoursePageWhereInput!]
  OR: [CoursePageWhereInput!]
  NOT: [CoursePageWhereInput!]
}

input CoursePageWhereUniqueInput {
  id: ID
}

enum CourseType {
  PUBLIC
  PRIVATE
  FORMONEY
  UNI
}

scalar DateTime

type Lesson {
  id: ID!
  name: String!
  number: Int
  text: String!
  user: User!
  coursePage: CoursePage!
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  newTests(where: NewTestWhereInput, orderBy: NewTestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NewTest!]
  quizes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem!]
  constructions(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction!]
  texteditors(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor!]
  lessonResults(where: LessonResultWhereInput, orderBy: LessonResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LessonResult!]
  testResults(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestResult!]
  quizResults(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizResult!]
  textEditorResults(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditorResult!]
  problemResults(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemResult!]
  constructionResults(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConstructionResult!]
  open: Boolean
  coursePageID: ID!
  published: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LessonConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge]!
  aggregate: AggregateLesson!
}

input LessonCreateInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateManyWithoutCoursePageInput {
  create: [LessonCreateWithoutCoursePageInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateManyWithoutUserInput {
  create: [LessonCreateWithoutUserInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateOneWithoutConstructionResultsInput {
  create: LessonCreateWithoutConstructionResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutConstructionsInput {
  create: LessonCreateWithoutConstructionsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutLessonResultsInput {
  create: LessonCreateWithoutLessonResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutNewTestsInput {
  create: LessonCreateWithoutNewTestsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutProblemResultsInput {
  create: LessonCreateWithoutProblemResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutProblemsInput {
  create: LessonCreateWithoutProblemsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutQuizesInput {
  create: LessonCreateWithoutQuizesInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutQuizResultsInput {
  create: LessonCreateWithoutQuizResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTestResultsInput {
  create: LessonCreateWithoutTestResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTestsInput {
  create: LessonCreateWithoutTestsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTextEditorResultsInput {
  create: LessonCreateWithoutTextEditorResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTexteditorsInput {
  create: LessonCreateWithoutTexteditorsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateWithoutConstructionResultsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutConstructionsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutCoursePageInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutLessonResultsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutNewTestsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutProblemResultsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutProblemsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutQuizesInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutQuizResultsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutTestResultsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutTestsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutTextEditorResultsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutTexteditorsInput {
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

input LessonCreateWithoutUserInput {
  name: String!
  number: Int
  text: String!
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  tests: TestCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
}

type LessonEdge {
  node: Lesson!
  cursor: String!
}

enum LessonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  number_ASC
  number_DESC
  text_ASC
  text_DESC
  open_ASC
  open_DESC
  coursePageID_ASC
  coursePageID_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LessonPreviousValues {
  id: ID!
  name: String!
  number: Int
  text: String!
  open: Boolean
  coursePageID: ID!
  published: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LessonResult {
  id: ID!
  student: User!
  visitsNumber: Int
  lesson: Lesson!
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LessonResultConnection {
  pageInfo: PageInfo!
  edges: [LessonResultEdge]!
  aggregate: AggregateLessonResult!
}

input LessonResultCreateInput {
  student: UserCreateOneWithoutLessonResultsInput!
  visitsNumber: Int
  lesson: LessonCreateOneWithoutLessonResultsInput!
  lessonID: ID
}

input LessonResultCreateManyWithoutLessonInput {
  create: [LessonResultCreateWithoutLessonInput!]
  connect: [LessonResultWhereUniqueInput!]
}

input LessonResultCreateManyWithoutStudentInput {
  create: [LessonResultCreateWithoutStudentInput!]
  connect: [LessonResultWhereUniqueInput!]
}

input LessonResultCreateWithoutLessonInput {
  student: UserCreateOneWithoutLessonResultsInput!
  visitsNumber: Int
  lessonID: ID
}

input LessonResultCreateWithoutStudentInput {
  visitsNumber: Int
  lesson: LessonCreateOneWithoutLessonResultsInput!
  lessonID: ID
}

type LessonResultEdge {
  node: LessonResult!
  cursor: String!
}

enum LessonResultOrderByInput {
  id_ASC
  id_DESC
  visitsNumber_ASC
  visitsNumber_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LessonResultPreviousValues {
  id: ID!
  visitsNumber: Int
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LessonResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  visitsNumber: Int
  visitsNumber_not: Int
  visitsNumber_in: [Int!]
  visitsNumber_not_in: [Int!]
  visitsNumber_lt: Int
  visitsNumber_lte: Int
  visitsNumber_gt: Int
  visitsNumber_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonResultScalarWhereInput!]
  OR: [LessonResultScalarWhereInput!]
  NOT: [LessonResultScalarWhereInput!]
}

type LessonResultSubscriptionPayload {
  mutation: MutationType!
  node: LessonResult
  updatedFields: [String!]
  previousValues: LessonResultPreviousValues
}

input LessonResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LessonResultWhereInput
  AND: [LessonResultSubscriptionWhereInput!]
  OR: [LessonResultSubscriptionWhereInput!]
  NOT: [LessonResultSubscriptionWhereInput!]
}

input LessonResultUpdateInput {
  student: UserUpdateOneRequiredWithoutLessonResultsInput
  visitsNumber: Int
  lesson: LessonUpdateOneRequiredWithoutLessonResultsInput
  lessonID: ID
}

input LessonResultUpdateManyDataInput {
  visitsNumber: Int
  lessonID: ID
}

input LessonResultUpdateManyMutationInput {
  visitsNumber: Int
  lessonID: ID
}

input LessonResultUpdateManyWithoutLessonInput {
  create: [LessonResultCreateWithoutLessonInput!]
  delete: [LessonResultWhereUniqueInput!]
  connect: [LessonResultWhereUniqueInput!]
  set: [LessonResultWhereUniqueInput!]
  disconnect: [LessonResultWhereUniqueInput!]
  update: [LessonResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [LessonResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [LessonResultScalarWhereInput!]
  updateMany: [LessonResultUpdateManyWithWhereNestedInput!]
}

input LessonResultUpdateManyWithoutStudentInput {
  create: [LessonResultCreateWithoutStudentInput!]
  delete: [LessonResultWhereUniqueInput!]
  connect: [LessonResultWhereUniqueInput!]
  set: [LessonResultWhereUniqueInput!]
  disconnect: [LessonResultWhereUniqueInput!]
  update: [LessonResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [LessonResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [LessonResultScalarWhereInput!]
  updateMany: [LessonResultUpdateManyWithWhereNestedInput!]
}

input LessonResultUpdateManyWithWhereNestedInput {
  where: LessonResultScalarWhereInput!
  data: LessonResultUpdateManyDataInput!
}

input LessonResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutLessonResultsInput
  visitsNumber: Int
  lessonID: ID
}

input LessonResultUpdateWithoutStudentDataInput {
  visitsNumber: Int
  lesson: LessonUpdateOneRequiredWithoutLessonResultsInput
  lessonID: ID
}

input LessonResultUpdateWithWhereUniqueWithoutLessonInput {
  where: LessonResultWhereUniqueInput!
  data: LessonResultUpdateWithoutLessonDataInput!
}

input LessonResultUpdateWithWhereUniqueWithoutStudentInput {
  where: LessonResultWhereUniqueInput!
  data: LessonResultUpdateWithoutStudentDataInput!
}

input LessonResultUpsertWithWhereUniqueWithoutLessonInput {
  where: LessonResultWhereUniqueInput!
  update: LessonResultUpdateWithoutLessonDataInput!
  create: LessonResultCreateWithoutLessonInput!
}

input LessonResultUpsertWithWhereUniqueWithoutStudentInput {
  where: LessonResultWhereUniqueInput!
  update: LessonResultUpdateWithoutStudentDataInput!
  create: LessonResultCreateWithoutStudentInput!
}

input LessonResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  visitsNumber: Int
  visitsNumber_not: Int
  visitsNumber_in: [Int!]
  visitsNumber_not_in: [Int!]
  visitsNumber_lt: Int
  visitsNumber_lte: Int
  visitsNumber_gt: Int
  visitsNumber_gte: Int
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonResultWhereInput!]
  OR: [LessonResultWhereInput!]
  NOT: [LessonResultWhereInput!]
}

input LessonResultWhereUniqueInput {
  id: ID
}

input LessonScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  open: Boolean
  open_not: Boolean
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonScalarWhereInput!]
  OR: [LessonScalarWhereInput!]
  NOT: [LessonScalarWhereInput!]
}

type LessonSubscriptionPayload {
  mutation: MutationType!
  node: Lesson
  updatedFields: [String!]
  previousValues: LessonPreviousValues
}

input LessonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LessonWhereInput
  AND: [LessonSubscriptionWhereInput!]
  OR: [LessonSubscriptionWhereInput!]
  NOT: [LessonSubscriptionWhereInput!]
}

input LessonUpdateInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateManyDataInput {
  name: String
  number: Int
  text: String
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateManyMutationInput {
  name: String
  number: Int
  text: String
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateManyWithoutCoursePageInput {
  create: [LessonCreateWithoutCoursePageInput!]
  delete: [LessonWhereUniqueInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [LessonScalarWhereInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
}

input LessonUpdateManyWithoutUserInput {
  create: [LessonCreateWithoutUserInput!]
  delete: [LessonWhereUniqueInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LessonScalarWhereInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
}

input LessonUpdateManyWithWhereNestedInput {
  where: LessonScalarWhereInput!
  data: LessonUpdateManyDataInput!
}

input LessonUpdateOneRequiredWithoutConstructionsInput {
  create: LessonCreateWithoutConstructionsInput
  update: LessonUpdateWithoutConstructionsDataInput
  upsert: LessonUpsertWithoutConstructionsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutLessonResultsInput {
  create: LessonCreateWithoutLessonResultsInput
  update: LessonUpdateWithoutLessonResultsDataInput
  upsert: LessonUpsertWithoutLessonResultsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutProblemsInput {
  create: LessonCreateWithoutProblemsInput
  update: LessonUpdateWithoutProblemsDataInput
  upsert: LessonUpsertWithoutProblemsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutTexteditorsInput {
  create: LessonCreateWithoutTexteditorsInput
  update: LessonUpdateWithoutTexteditorsDataInput
  upsert: LessonUpsertWithoutTexteditorsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutConstructionResultsInput {
  create: LessonCreateWithoutConstructionResultsInput
  update: LessonUpdateWithoutConstructionResultsDataInput
  upsert: LessonUpsertWithoutConstructionResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutNewTestsInput {
  create: LessonCreateWithoutNewTestsInput
  update: LessonUpdateWithoutNewTestsDataInput
  upsert: LessonUpsertWithoutNewTestsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutProblemResultsInput {
  create: LessonCreateWithoutProblemResultsInput
  update: LessonUpdateWithoutProblemResultsDataInput
  upsert: LessonUpsertWithoutProblemResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutQuizesInput {
  create: LessonCreateWithoutQuizesInput
  update: LessonUpdateWithoutQuizesDataInput
  upsert: LessonUpsertWithoutQuizesInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutQuizResultsInput {
  create: LessonCreateWithoutQuizResultsInput
  update: LessonUpdateWithoutQuizResultsDataInput
  upsert: LessonUpsertWithoutQuizResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutTestResultsInput {
  create: LessonCreateWithoutTestResultsInput
  update: LessonUpdateWithoutTestResultsDataInput
  upsert: LessonUpsertWithoutTestResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutTestsInput {
  create: LessonCreateWithoutTestsInput
  update: LessonUpdateWithoutTestsDataInput
  upsert: LessonUpsertWithoutTestsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutTextEditorResultsInput {
  create: LessonCreateWithoutTextEditorResultsInput
  update: LessonUpdateWithoutTextEditorResultsDataInput
  upsert: LessonUpsertWithoutTextEditorResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateWithoutConstructionResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutConstructionsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutCoursePageDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutLessonResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutNewTestsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutProblemResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutProblemsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutQuizesDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutQuizResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutTestResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutTestsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutTextEditorResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutTexteditorsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithoutUserDataInput {
  name: String
  number: Int
  text: String
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  tests: TestUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
}

input LessonUpdateWithWhereUniqueWithoutCoursePageInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutCoursePageDataInput!
}

input LessonUpdateWithWhereUniqueWithoutUserInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutUserDataInput!
}

input LessonUpsertWithoutConstructionResultsInput {
  update: LessonUpdateWithoutConstructionResultsDataInput!
  create: LessonCreateWithoutConstructionResultsInput!
}

input LessonUpsertWithoutConstructionsInput {
  update: LessonUpdateWithoutConstructionsDataInput!
  create: LessonCreateWithoutConstructionsInput!
}

input LessonUpsertWithoutLessonResultsInput {
  update: LessonUpdateWithoutLessonResultsDataInput!
  create: LessonCreateWithoutLessonResultsInput!
}

input LessonUpsertWithoutNewTestsInput {
  update: LessonUpdateWithoutNewTestsDataInput!
  create: LessonCreateWithoutNewTestsInput!
}

input LessonUpsertWithoutProblemResultsInput {
  update: LessonUpdateWithoutProblemResultsDataInput!
  create: LessonCreateWithoutProblemResultsInput!
}

input LessonUpsertWithoutProblemsInput {
  update: LessonUpdateWithoutProblemsDataInput!
  create: LessonCreateWithoutProblemsInput!
}

input LessonUpsertWithoutQuizesInput {
  update: LessonUpdateWithoutQuizesDataInput!
  create: LessonCreateWithoutQuizesInput!
}

input LessonUpsertWithoutQuizResultsInput {
  update: LessonUpdateWithoutQuizResultsDataInput!
  create: LessonCreateWithoutQuizResultsInput!
}

input LessonUpsertWithoutTestResultsInput {
  update: LessonUpdateWithoutTestResultsDataInput!
  create: LessonCreateWithoutTestResultsInput!
}

input LessonUpsertWithoutTestsInput {
  update: LessonUpdateWithoutTestsDataInput!
  create: LessonCreateWithoutTestsInput!
}

input LessonUpsertWithoutTextEditorResultsInput {
  update: LessonUpdateWithoutTextEditorResultsDataInput!
  create: LessonCreateWithoutTextEditorResultsInput!
}

input LessonUpsertWithoutTexteditorsInput {
  update: LessonUpdateWithoutTexteditorsDataInput!
  create: LessonCreateWithoutTexteditorsInput!
}

input LessonUpsertWithWhereUniqueWithoutCoursePageInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutCoursePageDataInput!
  create: LessonCreateWithoutCoursePageInput!
}

input LessonUpsertWithWhereUniqueWithoutUserInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutUserDataInput!
  create: LessonCreateWithoutUserInput!
}

input LessonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  coursePage: CoursePageWhereInput
  tests_every: TestWhereInput
  tests_some: TestWhereInput
  tests_none: TestWhereInput
  newTests_every: NewTestWhereInput
  newTests_some: NewTestWhereInput
  newTests_none: NewTestWhereInput
  quizes_every: QuizWhereInput
  quizes_some: QuizWhereInput
  quizes_none: QuizWhereInput
  problems_every: ProblemWhereInput
  problems_some: ProblemWhereInput
  problems_none: ProblemWhereInput
  constructions_every: ConstructionWhereInput
  constructions_some: ConstructionWhereInput
  constructions_none: ConstructionWhereInput
  texteditors_every: TextEditorWhereInput
  texteditors_some: TextEditorWhereInput
  texteditors_none: TextEditorWhereInput
  lessonResults_every: LessonResultWhereInput
  lessonResults_some: LessonResultWhereInput
  lessonResults_none: LessonResultWhereInput
  testResults_every: TestResultWhereInput
  testResults_some: TestResultWhereInput
  testResults_none: TestResultWhereInput
  quizResults_every: QuizResultWhereInput
  quizResults_some: QuizResultWhereInput
  quizResults_none: QuizResultWhereInput
  textEditorResults_every: TextEditorResultWhereInput
  textEditorResults_some: TextEditorResultWhereInput
  textEditorResults_none: TextEditorResultWhereInput
  problemResults_every: ProblemResultWhereInput
  problemResults_some: ProblemResultWhereInput
  problemResults_none: ProblemResultWhereInput
  constructionResults_every: ConstructionResultWhereInput
  constructionResults_some: ConstructionResultWhereInput
  constructionResults_none: ConstructionResultWhereInput
  open: Boolean
  open_not: Boolean
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
}

input LessonWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateManyApplications(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): BatchPayload!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createCareerTrack(data: CareerTrackCreateInput!): CareerTrack!
  updateCareerTrack(data: CareerTrackUpdateInput!, where: CareerTrackWhereUniqueInput!): CareerTrack
  updateManyCareerTracks(data: CareerTrackUpdateManyMutationInput!, where: CareerTrackWhereInput): BatchPayload!
  upsertCareerTrack(where: CareerTrackWhereUniqueInput!, create: CareerTrackCreateInput!, update: CareerTrackUpdateInput!): CareerTrack!
  deleteCareerTrack(where: CareerTrackWhereUniqueInput!): CareerTrack
  deleteManyCareerTracks(where: CareerTrackWhereInput): BatchPayload!
  createCareerTrackUnit(data: CareerTrackUnitCreateInput!): CareerTrackUnit!
  updateCareerTrackUnit(data: CareerTrackUnitUpdateInput!, where: CareerTrackUnitWhereUniqueInput!): CareerTrackUnit
  updateManyCareerTrackUnits(data: CareerTrackUnitUpdateManyMutationInput!, where: CareerTrackUnitWhereInput): BatchPayload!
  upsertCareerTrackUnit(where: CareerTrackUnitWhereUniqueInput!, create: CareerTrackUnitCreateInput!, update: CareerTrackUnitUpdateInput!): CareerTrackUnit!
  deleteCareerTrackUnit(where: CareerTrackUnitWhereUniqueInput!): CareerTrackUnit
  deleteManyCareerTrackUnits(where: CareerTrackUnitWhereInput): BatchPayload!
  createConstruction(data: ConstructionCreateInput!): Construction!
  updateConstruction(data: ConstructionUpdateInput!, where: ConstructionWhereUniqueInput!): Construction
  updateManyConstructions(data: ConstructionUpdateManyMutationInput!, where: ConstructionWhereInput): BatchPayload!
  upsertConstruction(where: ConstructionWhereUniqueInput!, create: ConstructionCreateInput!, update: ConstructionUpdateInput!): Construction!
  deleteConstruction(where: ConstructionWhereUniqueInput!): Construction
  deleteManyConstructions(where: ConstructionWhereInput): BatchPayload!
  createConstructionResult(data: ConstructionResultCreateInput!): ConstructionResult!
  updateConstructionResult(data: ConstructionResultUpdateInput!, where: ConstructionResultWhereUniqueInput!): ConstructionResult
  updateManyConstructionResults(data: ConstructionResultUpdateManyMutationInput!, where: ConstructionResultWhereInput): BatchPayload!
  upsertConstructionResult(where: ConstructionResultWhereUniqueInput!, create: ConstructionResultCreateInput!, update: ConstructionResultUpdateInput!): ConstructionResult!
  deleteConstructionResult(where: ConstructionResultWhereUniqueInput!): ConstructionResult
  deleteManyConstructionResults(where: ConstructionResultWhereInput): BatchPayload!
  createCoursePage(data: CoursePageCreateInput!): CoursePage!
  updateCoursePage(data: CoursePageUpdateInput!, where: CoursePageWhereUniqueInput!): CoursePage
  updateManyCoursePages(data: CoursePageUpdateManyMutationInput!, where: CoursePageWhereInput): BatchPayload!
  upsertCoursePage(where: CoursePageWhereUniqueInput!, create: CoursePageCreateInput!, update: CoursePageUpdateInput!): CoursePage!
  deleteCoursePage(where: CoursePageWhereUniqueInput!): CoursePage
  deleteManyCoursePages(where: CoursePageWhereInput): BatchPayload!
  createLesson(data: LessonCreateInput!): Lesson!
  updateLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateManyLessons(data: LessonUpdateManyMutationInput!, where: LessonWhereInput): BatchPayload!
  upsertLesson(where: LessonWhereUniqueInput!, create: LessonCreateInput!, update: LessonUpdateInput!): Lesson!
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteManyLessons(where: LessonWhereInput): BatchPayload!
  createLessonResult(data: LessonResultCreateInput!): LessonResult!
  updateLessonResult(data: LessonResultUpdateInput!, where: LessonResultWhereUniqueInput!): LessonResult
  updateManyLessonResults(data: LessonResultUpdateManyMutationInput!, where: LessonResultWhereInput): BatchPayload!
  upsertLessonResult(where: LessonResultWhereUniqueInput!, create: LessonResultCreateInput!, update: LessonResultUpdateInput!): LessonResult!
  deleteLessonResult(where: LessonResultWhereUniqueInput!): LessonResult
  deleteManyLessonResults(where: LessonResultWhereInput): BatchPayload!
  createNewTest(data: NewTestCreateInput!): NewTest!
  updateNewTest(data: NewTestUpdateInput!, where: NewTestWhereUniqueInput!): NewTest
  updateManyNewTests(data: NewTestUpdateManyMutationInput!, where: NewTestWhereInput): BatchPayload!
  upsertNewTest(where: NewTestWhereUniqueInput!, create: NewTestCreateInput!, update: NewTestUpdateInput!): NewTest!
  deleteNewTest(where: NewTestWhereUniqueInput!): NewTest
  deleteManyNewTests(where: NewTestWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createPointA(data: PointACreateInput!): PointA!
  updatePointA(data: PointAUpdateInput!, where: PointAWhereUniqueInput!): PointA
  updateManyPointAs(data: PointAUpdateManyMutationInput!, where: PointAWhereInput): BatchPayload!
  upsertPointA(where: PointAWhereUniqueInput!, create: PointACreateInput!, update: PointAUpdateInput!): PointA!
  deletePointA(where: PointAWhereUniqueInput!): PointA
  deleteManyPointAs(where: PointAWhereInput): BatchPayload!
  createPointATest(data: PointATestCreateInput!): PointATest!
  updatePointATest(data: PointATestUpdateInput!, where: PointATestWhereUniqueInput!): PointATest
  updateManyPointATests(data: PointATestUpdateManyMutationInput!, where: PointATestWhereInput): BatchPayload!
  upsertPointATest(where: PointATestWhereUniqueInput!, create: PointATestCreateInput!, update: PointATestUpdateInput!): PointATest!
  deletePointATest(where: PointATestWhereUniqueInput!): PointATest
  deleteManyPointATests(where: PointATestWhereInput): BatchPayload!
  createProblem(data: ProblemCreateInput!): Problem!
  updateProblem(data: ProblemUpdateInput!, where: ProblemWhereUniqueInput!): Problem
  updateManyProblems(data: ProblemUpdateManyMutationInput!, where: ProblemWhereInput): BatchPayload!
  upsertProblem(where: ProblemWhereUniqueInput!, create: ProblemCreateInput!, update: ProblemUpdateInput!): Problem!
  deleteProblem(where: ProblemWhereUniqueInput!): Problem
  deleteManyProblems(where: ProblemWhereInput): BatchPayload!
  createProblemResult(data: ProblemResultCreateInput!): ProblemResult!
  updateProblemResult(data: ProblemResultUpdateInput!, where: ProblemResultWhereUniqueInput!): ProblemResult
  updateManyProblemResults(data: ProblemResultUpdateManyMutationInput!, where: ProblemResultWhereInput): BatchPayload!
  upsertProblemResult(where: ProblemResultWhereUniqueInput!, create: ProblemResultCreateInput!, update: ProblemResultUpdateInput!): ProblemResult!
  deleteProblemResult(where: ProblemResultWhereUniqueInput!): ProblemResult
  deleteManyProblemResults(where: ProblemResultWhereInput): BatchPayload!
  createQuiz(data: QuizCreateInput!): Quiz!
  updateQuiz(data: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz
  updateManyQuizzes(data: QuizUpdateManyMutationInput!, where: QuizWhereInput): BatchPayload!
  upsertQuiz(where: QuizWhereUniqueInput!, create: QuizCreateInput!, update: QuizUpdateInput!): Quiz!
  deleteQuiz(where: QuizWhereUniqueInput!): Quiz
  deleteManyQuizzes(where: QuizWhereInput): BatchPayload!
  createQuizResult(data: QuizResultCreateInput!): QuizResult!
  updateQuizResult(data: QuizResultUpdateInput!, where: QuizResultWhereUniqueInput!): QuizResult
  updateManyQuizResults(data: QuizResultUpdateManyMutationInput!, where: QuizResultWhereInput): BatchPayload!
  upsertQuizResult(where: QuizResultWhereUniqueInput!, create: QuizResultCreateInput!, update: QuizResultUpdateInput!): QuizResult!
  deleteQuizResult(where: QuizResultWhereUniqueInput!): QuizResult
  deleteManyQuizResults(where: QuizResultWhereInput): BatchPayload!
  createSandbox(data: SandboxCreateInput!): Sandbox!
  updateSandbox(data: SandboxUpdateInput!, where: SandboxWhereUniqueInput!): Sandbox
  updateManySandboxes(data: SandboxUpdateManyMutationInput!, where: SandboxWhereInput): BatchPayload!
  upsertSandbox(where: SandboxWhereUniqueInput!, create: SandboxCreateInput!, update: SandboxUpdateInput!): Sandbox!
  deleteSandbox(where: SandboxWhereUniqueInput!): Sandbox
  deleteManySandboxes(where: SandboxWhereInput): BatchPayload!
  createSandboxPage(data: SandboxPageCreateInput!): SandboxPage!
  updateSandboxPage(data: SandboxPageUpdateInput!, where: SandboxPageWhereUniqueInput!): SandboxPage
  updateManySandboxPages(data: SandboxPageUpdateManyMutationInput!, where: SandboxPageWhereInput): BatchPayload!
  upsertSandboxPage(where: SandboxPageWhereUniqueInput!, create: SandboxPageCreateInput!, update: SandboxPageUpdateInput!): SandboxPage!
  deleteSandboxPage(where: SandboxPageWhereUniqueInput!): SandboxPage
  deleteManySandboxPages(where: SandboxPageWhereInput): BatchPayload!
  createSandboxPageGoal(data: SandboxPageGoalCreateInput!): SandboxPageGoal!
  updateSandboxPageGoal(data: SandboxPageGoalUpdateInput!, where: SandboxPageGoalWhereUniqueInput!): SandboxPageGoal
  updateManySandboxPageGoals(data: SandboxPageGoalUpdateManyMutationInput!, where: SandboxPageGoalWhereInput): BatchPayload!
  upsertSandboxPageGoal(where: SandboxPageGoalWhereUniqueInput!, create: SandboxPageGoalCreateInput!, update: SandboxPageGoalUpdateInput!): SandboxPageGoal!
  deleteSandboxPageGoal(where: SandboxPageGoalWhereUniqueInput!): SandboxPageGoal
  deleteManySandboxPageGoals(where: SandboxPageGoalWhereInput): BatchPayload!
  createTest(data: TestCreateInput!): Test!
  updateTest(data: TestUpdateInput!, where: TestWhereUniqueInput!): Test
  updateManyTests(data: TestUpdateManyMutationInput!, where: TestWhereInput): BatchPayload!
  upsertTest(where: TestWhereUniqueInput!, create: TestCreateInput!, update: TestUpdateInput!): Test!
  deleteTest(where: TestWhereUniqueInput!): Test
  deleteManyTests(where: TestWhereInput): BatchPayload!
  createTestResult(data: TestResultCreateInput!): TestResult!
  updateTestResult(data: TestResultUpdateInput!, where: TestResultWhereUniqueInput!): TestResult
  updateManyTestResults(data: TestResultUpdateManyMutationInput!, where: TestResultWhereInput): BatchPayload!
  upsertTestResult(where: TestResultWhereUniqueInput!, create: TestResultCreateInput!, update: TestResultUpdateInput!): TestResult!
  deleteTestResult(where: TestResultWhereUniqueInput!): TestResult
  deleteManyTestResults(where: TestResultWhereInput): BatchPayload!
  createTextEditor(data: TextEditorCreateInput!): TextEditor!
  updateTextEditor(data: TextEditorUpdateInput!, where: TextEditorWhereUniqueInput!): TextEditor
  updateManyTextEditors(data: TextEditorUpdateManyMutationInput!, where: TextEditorWhereInput): BatchPayload!
  upsertTextEditor(where: TextEditorWhereUniqueInput!, create: TextEditorCreateInput!, update: TextEditorUpdateInput!): TextEditor!
  deleteTextEditor(where: TextEditorWhereUniqueInput!): TextEditor
  deleteManyTextEditors(where: TextEditorWhereInput): BatchPayload!
  createTextEditorResult(data: TextEditorResultCreateInput!): TextEditorResult!
  updateTextEditorResult(data: TextEditorResultUpdateInput!, where: TextEditorResultWhereUniqueInput!): TextEditorResult
  updateManyTextEditorResults(data: TextEditorResultUpdateManyMutationInput!, where: TextEditorResultWhereInput): BatchPayload!
  upsertTextEditorResult(where: TextEditorResultWhereUniqueInput!, create: TextEditorResultCreateInput!, update: TextEditorResultUpdateInput!): TextEditorResult!
  deleteTextEditorResult(where: TextEditorResultWhereUniqueInput!): TextEditorResult
  deleteManyTextEditorResults(where: TextEditorResultWhereInput): BatchPayload!
  createUni(data: UniCreateInput!): Uni!
  updateUni(data: UniUpdateInput!, where: UniWhereUniqueInput!): Uni
  updateManyUnis(data: UniUpdateManyMutationInput!, where: UniWhereInput): BatchPayload!
  upsertUni(where: UniWhereUniqueInput!, create: UniCreateInput!, update: UniUpdateInput!): Uni!
  deleteUni(where: UniWhereUniqueInput!): Uni
  deleteManyUnis(where: UniWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type NewTest {
  id: ID!
  question: [String!]!
  answers: [String!]!
  correct: [Boolean!]!
  user: User!
  lesson: Lesson
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NewTestConnection {
  pageInfo: PageInfo!
  edges: [NewTestEdge]!
  aggregate: AggregateNewTest!
}

input NewTestCreateanswersInput {
  set: [String!]
}

input NewTestCreatecorrectInput {
  set: [Boolean!]
}

input NewTestCreateInput {
  question: NewTestCreatequestionInput
  answers: NewTestCreateanswersInput
  correct: NewTestCreatecorrectInput
  user: UserCreateOneWithoutNewTestsInput!
  lesson: LessonCreateOneWithoutNewTestsInput
  lessonID: ID
}

input NewTestCreateManyWithoutLessonInput {
  create: [NewTestCreateWithoutLessonInput!]
  connect: [NewTestWhereUniqueInput!]
}

input NewTestCreateManyWithoutUserInput {
  create: [NewTestCreateWithoutUserInput!]
  connect: [NewTestWhereUniqueInput!]
}

input NewTestCreatequestionInput {
  set: [String!]
}

input NewTestCreateWithoutLessonInput {
  question: NewTestCreatequestionInput
  answers: NewTestCreateanswersInput
  correct: NewTestCreatecorrectInput
  user: UserCreateOneWithoutNewTestsInput!
  lessonID: ID
}

input NewTestCreateWithoutUserInput {
  question: NewTestCreatequestionInput
  answers: NewTestCreateanswersInput
  correct: NewTestCreatecorrectInput
  lesson: LessonCreateOneWithoutNewTestsInput
  lessonID: ID
}

type NewTestEdge {
  node: NewTest!
  cursor: String!
}

enum NewTestOrderByInput {
  id_ASC
  id_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NewTestPreviousValues {
  id: ID!
  question: [String!]!
  answers: [String!]!
  correct: [Boolean!]!
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NewTestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NewTestScalarWhereInput!]
  OR: [NewTestScalarWhereInput!]
  NOT: [NewTestScalarWhereInput!]
}

type NewTestSubscriptionPayload {
  mutation: MutationType!
  node: NewTest
  updatedFields: [String!]
  previousValues: NewTestPreviousValues
}

input NewTestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NewTestWhereInput
  AND: [NewTestSubscriptionWhereInput!]
  OR: [NewTestSubscriptionWhereInput!]
  NOT: [NewTestSubscriptionWhereInput!]
}

input NewTestUpdateanswersInput {
  set: [String!]
}

input NewTestUpdatecorrectInput {
  set: [Boolean!]
}

input NewTestUpdateInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  user: UserUpdateOneRequiredWithoutNewTestsInput
  lesson: LessonUpdateOneWithoutNewTestsInput
  lessonID: ID
}

input NewTestUpdateManyDataInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  lessonID: ID
}

input NewTestUpdateManyMutationInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  lessonID: ID
}

input NewTestUpdateManyWithoutLessonInput {
  create: [NewTestCreateWithoutLessonInput!]
  delete: [NewTestWhereUniqueInput!]
  connect: [NewTestWhereUniqueInput!]
  set: [NewTestWhereUniqueInput!]
  disconnect: [NewTestWhereUniqueInput!]
  update: [NewTestUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [NewTestUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [NewTestScalarWhereInput!]
  updateMany: [NewTestUpdateManyWithWhereNestedInput!]
}

input NewTestUpdateManyWithoutUserInput {
  create: [NewTestCreateWithoutUserInput!]
  delete: [NewTestWhereUniqueInput!]
  connect: [NewTestWhereUniqueInput!]
  set: [NewTestWhereUniqueInput!]
  disconnect: [NewTestWhereUniqueInput!]
  update: [NewTestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NewTestUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [NewTestScalarWhereInput!]
  updateMany: [NewTestUpdateManyWithWhereNestedInput!]
}

input NewTestUpdateManyWithWhereNestedInput {
  where: NewTestScalarWhereInput!
  data: NewTestUpdateManyDataInput!
}

input NewTestUpdatequestionInput {
  set: [String!]
}

input NewTestUpdateWithoutLessonDataInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  user: UserUpdateOneRequiredWithoutNewTestsInput
  lessonID: ID
}

input NewTestUpdateWithoutUserDataInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  lesson: LessonUpdateOneWithoutNewTestsInput
  lessonID: ID
}

input NewTestUpdateWithWhereUniqueWithoutLessonInput {
  where: NewTestWhereUniqueInput!
  data: NewTestUpdateWithoutLessonDataInput!
}

input NewTestUpdateWithWhereUniqueWithoutUserInput {
  where: NewTestWhereUniqueInput!
  data: NewTestUpdateWithoutUserDataInput!
}

input NewTestUpsertWithWhereUniqueWithoutLessonInput {
  where: NewTestWhereUniqueInput!
  update: NewTestUpdateWithoutLessonDataInput!
  create: NewTestCreateWithoutLessonInput!
}

input NewTestUpsertWithWhereUniqueWithoutUserInput {
  where: NewTestWhereUniqueInput!
  update: NewTestUpdateWithoutUserDataInput!
  create: NewTestCreateWithoutUserInput!
}

input NewTestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NewTestWhereInput!]
  OR: [NewTestWhereInput!]
  NOT: [NewTestWhereInput!]
}

input NewTestWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  paymentId: String
  coursePage: CoursePage!
  coursePageID: ID!
  price: Int!
  paid: Boolean
  user: User!
  userID: ID
  clientID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  paymentId: String
  coursePage: CoursePageCreateOneWithoutOrdersInput!
  coursePageID: ID!
  price: Int!
  paid: Boolean
  user: UserCreateOneWithoutOrdersInput!
  userID: ID
  clientID: ID
}

input OrderCreateManyWithoutCoursePageInput {
  create: [OrderCreateWithoutCoursePageInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutCoursePageInput {
  paymentId: String
  coursePageID: ID!
  price: Int!
  paid: Boolean
  user: UserCreateOneWithoutOrdersInput!
  userID: ID
  clientID: ID
}

input OrderCreateWithoutUserInput {
  paymentId: String
  coursePage: CoursePageCreateOneWithoutOrdersInput!
  coursePageID: ID!
  price: Int!
  paid: Boolean
  userID: ID
  clientID: ID
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  paymentId_ASC
  paymentId_DESC
  coursePageID_ASC
  coursePageID_DESC
  price_ASC
  price_DESC
  paid_ASC
  paid_DESC
  userID_ASC
  userID_DESC
  clientID_ASC
  clientID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  paymentId: String
  coursePageID: ID!
  price: Int!
  paid: Boolean
  userID: ID
  clientID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  paymentId: String
  paymentId_not: String
  paymentId_in: [String!]
  paymentId_not_in: [String!]
  paymentId_lt: String
  paymentId_lte: String
  paymentId_gt: String
  paymentId_gte: String
  paymentId_contains: String
  paymentId_not_contains: String
  paymentId_starts_with: String
  paymentId_not_starts_with: String
  paymentId_ends_with: String
  paymentId_not_ends_with: String
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  paid: Boolean
  paid_not: Boolean
  userID: ID
  userID_not: ID
  userID_in: [ID!]
  userID_not_in: [ID!]
  userID_lt: ID
  userID_lte: ID
  userID_gt: ID
  userID_gte: ID
  userID_contains: ID
  userID_not_contains: ID
  userID_starts_with: ID
  userID_not_starts_with: ID
  userID_ends_with: ID
  userID_not_ends_with: ID
  clientID: ID
  clientID_not: ID
  clientID_in: [ID!]
  clientID_not_in: [ID!]
  clientID_lt: ID
  clientID_lte: ID
  clientID_gt: ID
  clientID_gte: ID
  clientID_contains: ID
  clientID_not_contains: ID
  clientID_starts_with: ID
  clientID_not_starts_with: ID
  clientID_ends_with: ID
  clientID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  paymentId: String
  coursePage: CoursePageUpdateOneRequiredWithoutOrdersInput
  coursePageID: ID
  price: Int
  paid: Boolean
  user: UserUpdateOneRequiredWithoutOrdersInput
  userID: ID
  clientID: ID
}

input OrderUpdateManyDataInput {
  paymentId: String
  coursePageID: ID
  price: Int
  paid: Boolean
  userID: ID
  clientID: ID
}

input OrderUpdateManyMutationInput {
  paymentId: String
  coursePageID: ID
  price: Int
  paid: Boolean
  userID: ID
  clientID: ID
}

input OrderUpdateManyWithoutCoursePageInput {
  create: [OrderCreateWithoutCoursePageInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateWithoutCoursePageDataInput {
  paymentId: String
  coursePageID: ID
  price: Int
  paid: Boolean
  user: UserUpdateOneRequiredWithoutOrdersInput
  userID: ID
  clientID: ID
}

input OrderUpdateWithoutUserDataInput {
  paymentId: String
  coursePage: CoursePageUpdateOneRequiredWithoutOrdersInput
  coursePageID: ID
  price: Int
  paid: Boolean
  userID: ID
  clientID: ID
}

input OrderUpdateWithWhereUniqueWithoutCoursePageInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCoursePageDataInput!
}

input OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutUserDataInput!
}

input OrderUpsertWithWhereUniqueWithoutCoursePageInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCoursePageDataInput!
  create: OrderCreateWithoutCoursePageInput!
}

input OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutUserDataInput!
  create: OrderCreateWithoutUserInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  paymentId: String
  paymentId_not: String
  paymentId_in: [String!]
  paymentId_not_in: [String!]
  paymentId_lt: String
  paymentId_lte: String
  paymentId_gt: String
  paymentId_gte: String
  paymentId_contains: String
  paymentId_not_contains: String
  paymentId_starts_with: String
  paymentId_not_starts_with: String
  paymentId_ends_with: String
  paymentId_not_ends_with: String
  coursePage: CoursePageWhereInput
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  paid: Boolean
  paid_not: Boolean
  user: UserWhereInput
  userID: ID
  userID_not: ID
  userID_in: [ID!]
  userID_not_in: [ID!]
  userID_lt: ID
  userID_lte: ID
  userID_gt: ID
  userID_gte: ID
  userID_contains: ID
  userID_not_contains: ID
  userID_starts_with: ID
  userID_not_starts_with: ID
  userID_ends_with: ID
  userID_not_ends_with: ID
  clientID: ID
  clientID_not: ID
  clientID_in: [ID!]
  clientID_not_in: [ID!]
  clientID_lt: ID
  clientID_lte: ID
  clientID_gt: ID
  clientID_gte: ID
  clientID_contains: ID
  clientID_not_contains: ID
  clientID_starts_with: ID
  clientID_not_starts_with: ID
  clientID_ends_with: ID
  clientID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
}

type PointA {
  id: ID!
  description: String
  coursePage: CoursePage!
  coursePageID: ID
  user: User!
  pointATests(where: PointATestWhereInput, orderBy: PointATestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PointATest!]
}

type PointAConnection {
  pageInfo: PageInfo!
  edges: [PointAEdge]!
  aggregate: AggregatePointA!
}

input PointACreateInput {
  description: String
  coursePage: CoursePageCreateOneWithoutPointsAInput!
  coursePageID: ID
  user: UserCreateOneWithoutPointsAInput!
  pointATests: PointATestCreateManyInput
}

input PointACreateManyWithoutCoursePageInput {
  create: [PointACreateWithoutCoursePageInput!]
  connect: [PointAWhereUniqueInput!]
}

input PointACreateManyWithoutUserInput {
  create: [PointACreateWithoutUserInput!]
  connect: [PointAWhereUniqueInput!]
}

input PointACreateWithoutCoursePageInput {
  description: String
  coursePageID: ID
  user: UserCreateOneWithoutPointsAInput!
  pointATests: PointATestCreateManyInput
}

input PointACreateWithoutUserInput {
  description: String
  coursePage: CoursePageCreateOneWithoutPointsAInput!
  coursePageID: ID
  pointATests: PointATestCreateManyInput
}

type PointAEdge {
  node: PointA!
  cursor: String!
}

enum PointAOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  coursePageID_ASC
  coursePageID_DESC
}

type PointAPreviousValues {
  id: ID!
  description: String
  coursePageID: ID
}

input PointAScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  AND: [PointAScalarWhereInput!]
  OR: [PointAScalarWhereInput!]
  NOT: [PointAScalarWhereInput!]
}

type PointASubscriptionPayload {
  mutation: MutationType!
  node: PointA
  updatedFields: [String!]
  previousValues: PointAPreviousValues
}

input PointASubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PointAWhereInput
  AND: [PointASubscriptionWhereInput!]
  OR: [PointASubscriptionWhereInput!]
  NOT: [PointASubscriptionWhereInput!]
}

type PointATest {
  id: ID!
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: User!
  coursePage: CoursePage
  coursePageID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PointATestConnection {
  pageInfo: PageInfo!
  edges: [PointATestEdge]!
  aggregate: AggregatePointATest!
}

input PointATestCreateInput {
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserCreateOneInput!
  coursePage: CoursePageCreateOneWithoutPointATestsInput
  coursePageID: ID
}

input PointATestCreateManyInput {
  create: [PointATestCreateInput!]
  connect: [PointATestWhereUniqueInput!]
}

input PointATestCreateManyWithoutCoursePageInput {
  create: [PointATestCreateWithoutCoursePageInput!]
  connect: [PointATestWhereUniqueInput!]
}

input PointATestCreateWithoutCoursePageInput {
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserCreateOneInput!
  coursePageID: ID
}

type PointATestEdge {
  node: PointATest!
  cursor: String!
}

enum PointATestOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  answer1_ASC
  answer1_DESC
  answer1Correct_ASC
  answer1Correct_DESC
  answer2_ASC
  answer2_DESC
  answer2Correct_ASC
  answer2Correct_DESC
  answer3_ASC
  answer3_DESC
  answer3Correct_ASC
  answer3Correct_DESC
  answer4_ASC
  answer4_DESC
  answer4Correct_ASC
  answer4Correct_DESC
  coursePageID_ASC
  coursePageID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PointATestPreviousValues {
  id: ID!
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  coursePageID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PointATestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer1: String
  answer1_not: String
  answer1_in: [String!]
  answer1_not_in: [String!]
  answer1_lt: String
  answer1_lte: String
  answer1_gt: String
  answer1_gte: String
  answer1_contains: String
  answer1_not_contains: String
  answer1_starts_with: String
  answer1_not_starts_with: String
  answer1_ends_with: String
  answer1_not_ends_with: String
  answer1Correct: String
  answer1Correct_not: String
  answer1Correct_in: [String!]
  answer1Correct_not_in: [String!]
  answer1Correct_lt: String
  answer1Correct_lte: String
  answer1Correct_gt: String
  answer1Correct_gte: String
  answer1Correct_contains: String
  answer1Correct_not_contains: String
  answer1Correct_starts_with: String
  answer1Correct_not_starts_with: String
  answer1Correct_ends_with: String
  answer1Correct_not_ends_with: String
  answer2: String
  answer2_not: String
  answer2_in: [String!]
  answer2_not_in: [String!]
  answer2_lt: String
  answer2_lte: String
  answer2_gt: String
  answer2_gte: String
  answer2_contains: String
  answer2_not_contains: String
  answer2_starts_with: String
  answer2_not_starts_with: String
  answer2_ends_with: String
  answer2_not_ends_with: String
  answer2Correct: String
  answer2Correct_not: String
  answer2Correct_in: [String!]
  answer2Correct_not_in: [String!]
  answer2Correct_lt: String
  answer2Correct_lte: String
  answer2Correct_gt: String
  answer2Correct_gte: String
  answer2Correct_contains: String
  answer2Correct_not_contains: String
  answer2Correct_starts_with: String
  answer2Correct_not_starts_with: String
  answer2Correct_ends_with: String
  answer2Correct_not_ends_with: String
  answer3: String
  answer3_not: String
  answer3_in: [String!]
  answer3_not_in: [String!]
  answer3_lt: String
  answer3_lte: String
  answer3_gt: String
  answer3_gte: String
  answer3_contains: String
  answer3_not_contains: String
  answer3_starts_with: String
  answer3_not_starts_with: String
  answer3_ends_with: String
  answer3_not_ends_with: String
  answer3Correct: String
  answer3Correct_not: String
  answer3Correct_in: [String!]
  answer3Correct_not_in: [String!]
  answer3Correct_lt: String
  answer3Correct_lte: String
  answer3Correct_gt: String
  answer3Correct_gte: String
  answer3Correct_contains: String
  answer3Correct_not_contains: String
  answer3Correct_starts_with: String
  answer3Correct_not_starts_with: String
  answer3Correct_ends_with: String
  answer3Correct_not_ends_with: String
  answer4: String
  answer4_not: String
  answer4_in: [String!]
  answer4_not_in: [String!]
  answer4_lt: String
  answer4_lte: String
  answer4_gt: String
  answer4_gte: String
  answer4_contains: String
  answer4_not_contains: String
  answer4_starts_with: String
  answer4_not_starts_with: String
  answer4_ends_with: String
  answer4_not_ends_with: String
  answer4Correct: String
  answer4Correct_not: String
  answer4Correct_in: [String!]
  answer4Correct_not_in: [String!]
  answer4Correct_lt: String
  answer4Correct_lte: String
  answer4Correct_gt: String
  answer4Correct_gte: String
  answer4Correct_contains: String
  answer4Correct_not_contains: String
  answer4Correct_starts_with: String
  answer4Correct_not_starts_with: String
  answer4Correct_ends_with: String
  answer4Correct_not_ends_with: String
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PointATestScalarWhereInput!]
  OR: [PointATestScalarWhereInput!]
  NOT: [PointATestScalarWhereInput!]
}

type PointATestSubscriptionPayload {
  mutation: MutationType!
  node: PointATest
  updatedFields: [String!]
  previousValues: PointATestPreviousValues
}

input PointATestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PointATestWhereInput
  AND: [PointATestSubscriptionWhereInput!]
  OR: [PointATestSubscriptionWhereInput!]
  NOT: [PointATestSubscriptionWhereInput!]
}

input PointATestUpdateDataInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserUpdateOneRequiredInput
  coursePage: CoursePageUpdateOneWithoutPointATestsInput
  coursePageID: ID
}

input PointATestUpdateInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserUpdateOneRequiredInput
  coursePage: CoursePageUpdateOneWithoutPointATestsInput
  coursePageID: ID
}

input PointATestUpdateManyDataInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  coursePageID: ID
}

input PointATestUpdateManyInput {
  create: [PointATestCreateInput!]
  update: [PointATestUpdateWithWhereUniqueNestedInput!]
  upsert: [PointATestUpsertWithWhereUniqueNestedInput!]
  delete: [PointATestWhereUniqueInput!]
  connect: [PointATestWhereUniqueInput!]
  set: [PointATestWhereUniqueInput!]
  disconnect: [PointATestWhereUniqueInput!]
  deleteMany: [PointATestScalarWhereInput!]
  updateMany: [PointATestUpdateManyWithWhereNestedInput!]
}

input PointATestUpdateManyMutationInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  coursePageID: ID
}

input PointATestUpdateManyWithoutCoursePageInput {
  create: [PointATestCreateWithoutCoursePageInput!]
  delete: [PointATestWhereUniqueInput!]
  connect: [PointATestWhereUniqueInput!]
  set: [PointATestWhereUniqueInput!]
  disconnect: [PointATestWhereUniqueInput!]
  update: [PointATestUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [PointATestUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [PointATestScalarWhereInput!]
  updateMany: [PointATestUpdateManyWithWhereNestedInput!]
}

input PointATestUpdateManyWithWhereNestedInput {
  where: PointATestScalarWhereInput!
  data: PointATestUpdateManyDataInput!
}

input PointATestUpdateWithoutCoursePageDataInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserUpdateOneRequiredInput
  coursePageID: ID
}

input PointATestUpdateWithWhereUniqueNestedInput {
  where: PointATestWhereUniqueInput!
  data: PointATestUpdateDataInput!
}

input PointATestUpdateWithWhereUniqueWithoutCoursePageInput {
  where: PointATestWhereUniqueInput!
  data: PointATestUpdateWithoutCoursePageDataInput!
}

input PointATestUpsertWithWhereUniqueNestedInput {
  where: PointATestWhereUniqueInput!
  update: PointATestUpdateDataInput!
  create: PointATestCreateInput!
}

input PointATestUpsertWithWhereUniqueWithoutCoursePageInput {
  where: PointATestWhereUniqueInput!
  update: PointATestUpdateWithoutCoursePageDataInput!
  create: PointATestCreateWithoutCoursePageInput!
}

input PointATestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer1: String
  answer1_not: String
  answer1_in: [String!]
  answer1_not_in: [String!]
  answer1_lt: String
  answer1_lte: String
  answer1_gt: String
  answer1_gte: String
  answer1_contains: String
  answer1_not_contains: String
  answer1_starts_with: String
  answer1_not_starts_with: String
  answer1_ends_with: String
  answer1_not_ends_with: String
  answer1Correct: String
  answer1Correct_not: String
  answer1Correct_in: [String!]
  answer1Correct_not_in: [String!]
  answer1Correct_lt: String
  answer1Correct_lte: String
  answer1Correct_gt: String
  answer1Correct_gte: String
  answer1Correct_contains: String
  answer1Correct_not_contains: String
  answer1Correct_starts_with: String
  answer1Correct_not_starts_with: String
  answer1Correct_ends_with: String
  answer1Correct_not_ends_with: String
  answer2: String
  answer2_not: String
  answer2_in: [String!]
  answer2_not_in: [String!]
  answer2_lt: String
  answer2_lte: String
  answer2_gt: String
  answer2_gte: String
  answer2_contains: String
  answer2_not_contains: String
  answer2_starts_with: String
  answer2_not_starts_with: String
  answer2_ends_with: String
  answer2_not_ends_with: String
  answer2Correct: String
  answer2Correct_not: String
  answer2Correct_in: [String!]
  answer2Correct_not_in: [String!]
  answer2Correct_lt: String
  answer2Correct_lte: String
  answer2Correct_gt: String
  answer2Correct_gte: String
  answer2Correct_contains: String
  answer2Correct_not_contains: String
  answer2Correct_starts_with: String
  answer2Correct_not_starts_with: String
  answer2Correct_ends_with: String
  answer2Correct_not_ends_with: String
  answer3: String
  answer3_not: String
  answer3_in: [String!]
  answer3_not_in: [String!]
  answer3_lt: String
  answer3_lte: String
  answer3_gt: String
  answer3_gte: String
  answer3_contains: String
  answer3_not_contains: String
  answer3_starts_with: String
  answer3_not_starts_with: String
  answer3_ends_with: String
  answer3_not_ends_with: String
  answer3Correct: String
  answer3Correct_not: String
  answer3Correct_in: [String!]
  answer3Correct_not_in: [String!]
  answer3Correct_lt: String
  answer3Correct_lte: String
  answer3Correct_gt: String
  answer3Correct_gte: String
  answer3Correct_contains: String
  answer3Correct_not_contains: String
  answer3Correct_starts_with: String
  answer3Correct_not_starts_with: String
  answer3Correct_ends_with: String
  answer3Correct_not_ends_with: String
  answer4: String
  answer4_not: String
  answer4_in: [String!]
  answer4_not_in: [String!]
  answer4_lt: String
  answer4_lte: String
  answer4_gt: String
  answer4_gte: String
  answer4_contains: String
  answer4_not_contains: String
  answer4_starts_with: String
  answer4_not_starts_with: String
  answer4_ends_with: String
  answer4_not_ends_with: String
  answer4Correct: String
  answer4Correct_not: String
  answer4Correct_in: [String!]
  answer4Correct_not_in: [String!]
  answer4Correct_lt: String
  answer4Correct_lte: String
  answer4Correct_gt: String
  answer4Correct_gte: String
  answer4Correct_contains: String
  answer4Correct_not_contains: String
  answer4Correct_starts_with: String
  answer4Correct_not_starts_with: String
  answer4Correct_ends_with: String
  answer4Correct_not_ends_with: String
  user: UserWhereInput
  coursePage: CoursePageWhereInput
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PointATestWhereInput!]
  OR: [PointATestWhereInput!]
  NOT: [PointATestWhereInput!]
}

input PointATestWhereUniqueInput {
  id: ID
}

input PointAUpdateInput {
  description: String
  coursePage: CoursePageUpdateOneRequiredWithoutPointsAInput
  coursePageID: ID
  user: UserUpdateOneRequiredWithoutPointsAInput
  pointATests: PointATestUpdateManyInput
}

input PointAUpdateManyDataInput {
  description: String
  coursePageID: ID
}

input PointAUpdateManyMutationInput {
  description: String
  coursePageID: ID
}

input PointAUpdateManyWithoutCoursePageInput {
  create: [PointACreateWithoutCoursePageInput!]
  delete: [PointAWhereUniqueInput!]
  connect: [PointAWhereUniqueInput!]
  set: [PointAWhereUniqueInput!]
  disconnect: [PointAWhereUniqueInput!]
  update: [PointAUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [PointAUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [PointAScalarWhereInput!]
  updateMany: [PointAUpdateManyWithWhereNestedInput!]
}

input PointAUpdateManyWithoutUserInput {
  create: [PointACreateWithoutUserInput!]
  delete: [PointAWhereUniqueInput!]
  connect: [PointAWhereUniqueInput!]
  set: [PointAWhereUniqueInput!]
  disconnect: [PointAWhereUniqueInput!]
  update: [PointAUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PointAUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PointAScalarWhereInput!]
  updateMany: [PointAUpdateManyWithWhereNestedInput!]
}

input PointAUpdateManyWithWhereNestedInput {
  where: PointAScalarWhereInput!
  data: PointAUpdateManyDataInput!
}

input PointAUpdateWithoutCoursePageDataInput {
  description: String
  coursePageID: ID
  user: UserUpdateOneRequiredWithoutPointsAInput
  pointATests: PointATestUpdateManyInput
}

input PointAUpdateWithoutUserDataInput {
  description: String
  coursePage: CoursePageUpdateOneRequiredWithoutPointsAInput
  coursePageID: ID
  pointATests: PointATestUpdateManyInput
}

input PointAUpdateWithWhereUniqueWithoutCoursePageInput {
  where: PointAWhereUniqueInput!
  data: PointAUpdateWithoutCoursePageDataInput!
}

input PointAUpdateWithWhereUniqueWithoutUserInput {
  where: PointAWhereUniqueInput!
  data: PointAUpdateWithoutUserDataInput!
}

input PointAUpsertWithWhereUniqueWithoutCoursePageInput {
  where: PointAWhereUniqueInput!
  update: PointAUpdateWithoutCoursePageDataInput!
  create: PointACreateWithoutCoursePageInput!
}

input PointAUpsertWithWhereUniqueWithoutUserInput {
  where: PointAWhereUniqueInput!
  update: PointAUpdateWithoutUserDataInput!
  create: PointACreateWithoutUserInput!
}

input PointAWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  coursePage: CoursePageWhereInput
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  user: UserWhereInput
  pointATests_every: PointATestWhereInput
  pointATests_some: PointATestWhereInput
  pointATests_none: PointATestWhereInput
  AND: [PointAWhereInput!]
  OR: [PointAWhereInput!]
  NOT: [PointAWhereInput!]
}

input PointAWhereUniqueInput {
  id: ID
}

type Problem {
  id: ID!
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: [String!]!
  solutionList: [String!]!
  user: User!
  lesson: Lesson!
  problemResults(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemResult!]
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProblemConnection {
  pageInfo: PageInfo!
  edges: [ProblemEdge]!
  aggregate: AggregateProblem!
}

input ProblemCreatehintsListInput {
  set: [String!]
}

input ProblemCreateInput {
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: ProblemCreatehintsListInput
  solutionList: ProblemCreatesolutionListInput
  user: UserCreateOneWithoutProblemsInput!
  lesson: LessonCreateOneWithoutProblemsInput!
  problemResults: ProblemResultCreateManyWithoutProblemInput
  lessonID: ID!
}

input ProblemCreateManyWithoutLessonInput {
  create: [ProblemCreateWithoutLessonInput!]
  connect: [ProblemWhereUniqueInput!]
}

input ProblemCreateManyWithoutUserInput {
  create: [ProblemCreateWithoutUserInput!]
  connect: [ProblemWhereUniqueInput!]
}

input ProblemCreateOneWithoutProblemResultsInput {
  create: ProblemCreateWithoutProblemResultsInput
  connect: ProblemWhereUniqueInput
}

input ProblemCreatesolutionListInput {
  set: [String!]
}

input ProblemCreateWithoutLessonInput {
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: ProblemCreatehintsListInput
  solutionList: ProblemCreatesolutionListInput
  user: UserCreateOneWithoutProblemsInput!
  problemResults: ProblemResultCreateManyWithoutProblemInput
  lessonID: ID!
}

input ProblemCreateWithoutProblemResultsInput {
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: ProblemCreatehintsListInput
  solutionList: ProblemCreatesolutionListInput
  user: UserCreateOneWithoutProblemsInput!
  lesson: LessonCreateOneWithoutProblemsInput!
  lessonID: ID!
}

input ProblemCreateWithoutUserInput {
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: ProblemCreatehintsListInput
  solutionList: ProblemCreatesolutionListInput
  lesson: LessonCreateOneWithoutProblemsInput!
  problemResults: ProblemResultCreateManyWithoutProblemInput
  lessonID: ID!
}

type ProblemEdge {
  node: Problem!
  cursor: String!
}

enum ProblemOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  hints_ASC
  hints_DESC
  solution_ASC
  solution_DESC
  answer_ASC
  answer_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProblemPreviousValues {
  id: ID!
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: [String!]!
  solutionList: [String!]!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProblemResult {
  id: ID!
  student: User!
  answer: String
  revealed: [String!]!
  lesson: Lesson
  lessonID: ID
  problem: Problem
  problemID: ID
}

type ProblemResultConnection {
  pageInfo: PageInfo!
  edges: [ProblemResultEdge]!
  aggregate: AggregateProblemResult!
}

input ProblemResultCreateInput {
  student: UserCreateOneWithoutProblemResultsInput!
  answer: String
  revealed: ProblemResultCreaterevealedInput
  lesson: LessonCreateOneWithoutProblemResultsInput
  lessonID: ID
  problem: ProblemCreateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultCreateManyWithoutLessonInput {
  create: [ProblemResultCreateWithoutLessonInput!]
  connect: [ProblemResultWhereUniqueInput!]
}

input ProblemResultCreateManyWithoutProblemInput {
  create: [ProblemResultCreateWithoutProblemInput!]
  connect: [ProblemResultWhereUniqueInput!]
}

input ProblemResultCreateManyWithoutStudentInput {
  create: [ProblemResultCreateWithoutStudentInput!]
  connect: [ProblemResultWhereUniqueInput!]
}

input ProblemResultCreaterevealedInput {
  set: [String!]
}

input ProblemResultCreateWithoutLessonInput {
  student: UserCreateOneWithoutProblemResultsInput!
  answer: String
  revealed: ProblemResultCreaterevealedInput
  lessonID: ID
  problem: ProblemCreateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultCreateWithoutProblemInput {
  student: UserCreateOneWithoutProblemResultsInput!
  answer: String
  revealed: ProblemResultCreaterevealedInput
  lesson: LessonCreateOneWithoutProblemResultsInput
  lessonID: ID
  problemID: ID
}

input ProblemResultCreateWithoutStudentInput {
  answer: String
  revealed: ProblemResultCreaterevealedInput
  lesson: LessonCreateOneWithoutProblemResultsInput
  lessonID: ID
  problem: ProblemCreateOneWithoutProblemResultsInput
  problemID: ID
}

type ProblemResultEdge {
  node: ProblemResult!
  cursor: String!
}

enum ProblemResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  lessonID_ASC
  lessonID_DESC
  problemID_ASC
  problemID_DESC
}

type ProblemResultPreviousValues {
  id: ID!
  answer: String
  revealed: [String!]!
  lessonID: ID
  problemID: ID
}

input ProblemResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  problemID: ID
  problemID_not: ID
  problemID_in: [ID!]
  problemID_not_in: [ID!]
  problemID_lt: ID
  problemID_lte: ID
  problemID_gt: ID
  problemID_gte: ID
  problemID_contains: ID
  problemID_not_contains: ID
  problemID_starts_with: ID
  problemID_not_starts_with: ID
  problemID_ends_with: ID
  problemID_not_ends_with: ID
  AND: [ProblemResultScalarWhereInput!]
  OR: [ProblemResultScalarWhereInput!]
  NOT: [ProblemResultScalarWhereInput!]
}

type ProblemResultSubscriptionPayload {
  mutation: MutationType!
  node: ProblemResult
  updatedFields: [String!]
  previousValues: ProblemResultPreviousValues
}

input ProblemResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProblemResultWhereInput
  AND: [ProblemResultSubscriptionWhereInput!]
  OR: [ProblemResultSubscriptionWhereInput!]
  NOT: [ProblemResultSubscriptionWhereInput!]
}

input ProblemResultUpdateInput {
  student: UserUpdateOneRequiredWithoutProblemResultsInput
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lesson: LessonUpdateOneWithoutProblemResultsInput
  lessonID: ID
  problem: ProblemUpdateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultUpdateManyDataInput {
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lessonID: ID
  problemID: ID
}

input ProblemResultUpdateManyMutationInput {
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lessonID: ID
  problemID: ID
}

input ProblemResultUpdateManyWithoutLessonInput {
  create: [ProblemResultCreateWithoutLessonInput!]
  delete: [ProblemResultWhereUniqueInput!]
  connect: [ProblemResultWhereUniqueInput!]
  set: [ProblemResultWhereUniqueInput!]
  disconnect: [ProblemResultWhereUniqueInput!]
  update: [ProblemResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ProblemResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ProblemResultScalarWhereInput!]
  updateMany: [ProblemResultUpdateManyWithWhereNestedInput!]
}

input ProblemResultUpdateManyWithoutProblemInput {
  create: [ProblemResultCreateWithoutProblemInput!]
  delete: [ProblemResultWhereUniqueInput!]
  connect: [ProblemResultWhereUniqueInput!]
  set: [ProblemResultWhereUniqueInput!]
  disconnect: [ProblemResultWhereUniqueInput!]
  update: [ProblemResultUpdateWithWhereUniqueWithoutProblemInput!]
  upsert: [ProblemResultUpsertWithWhereUniqueWithoutProblemInput!]
  deleteMany: [ProblemResultScalarWhereInput!]
  updateMany: [ProblemResultUpdateManyWithWhereNestedInput!]
}

input ProblemResultUpdateManyWithoutStudentInput {
  create: [ProblemResultCreateWithoutStudentInput!]
  delete: [ProblemResultWhereUniqueInput!]
  connect: [ProblemResultWhereUniqueInput!]
  set: [ProblemResultWhereUniqueInput!]
  disconnect: [ProblemResultWhereUniqueInput!]
  update: [ProblemResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [ProblemResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [ProblemResultScalarWhereInput!]
  updateMany: [ProblemResultUpdateManyWithWhereNestedInput!]
}

input ProblemResultUpdateManyWithWhereNestedInput {
  where: ProblemResultScalarWhereInput!
  data: ProblemResultUpdateManyDataInput!
}

input ProblemResultUpdaterevealedInput {
  set: [String!]
}

input ProblemResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutProblemResultsInput
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lessonID: ID
  problem: ProblemUpdateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultUpdateWithoutProblemDataInput {
  student: UserUpdateOneRequiredWithoutProblemResultsInput
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lesson: LessonUpdateOneWithoutProblemResultsInput
  lessonID: ID
  problemID: ID
}

input ProblemResultUpdateWithoutStudentDataInput {
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lesson: LessonUpdateOneWithoutProblemResultsInput
  lessonID: ID
  problem: ProblemUpdateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultUpdateWithWhereUniqueWithoutLessonInput {
  where: ProblemResultWhereUniqueInput!
  data: ProblemResultUpdateWithoutLessonDataInput!
}

input ProblemResultUpdateWithWhereUniqueWithoutProblemInput {
  where: ProblemResultWhereUniqueInput!
  data: ProblemResultUpdateWithoutProblemDataInput!
}

input ProblemResultUpdateWithWhereUniqueWithoutStudentInput {
  where: ProblemResultWhereUniqueInput!
  data: ProblemResultUpdateWithoutStudentDataInput!
}

input ProblemResultUpsertWithWhereUniqueWithoutLessonInput {
  where: ProblemResultWhereUniqueInput!
  update: ProblemResultUpdateWithoutLessonDataInput!
  create: ProblemResultCreateWithoutLessonInput!
}

input ProblemResultUpsertWithWhereUniqueWithoutProblemInput {
  where: ProblemResultWhereUniqueInput!
  update: ProblemResultUpdateWithoutProblemDataInput!
  create: ProblemResultCreateWithoutProblemInput!
}

input ProblemResultUpsertWithWhereUniqueWithoutStudentInput {
  where: ProblemResultWhereUniqueInput!
  update: ProblemResultUpdateWithoutStudentDataInput!
  create: ProblemResultCreateWithoutStudentInput!
}

input ProblemResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  problem: ProblemWhereInput
  problemID: ID
  problemID_not: ID
  problemID_in: [ID!]
  problemID_not_in: [ID!]
  problemID_lt: ID
  problemID_lte: ID
  problemID_gt: ID
  problemID_gte: ID
  problemID_contains: ID
  problemID_not_contains: ID
  problemID_starts_with: ID
  problemID_not_starts_with: ID
  problemID_ends_with: ID
  problemID_not_ends_with: ID
  AND: [ProblemResultWhereInput!]
  OR: [ProblemResultWhereInput!]
  NOT: [ProblemResultWhereInput!]
}

input ProblemResultWhereUniqueInput {
  id: ID
}

input ProblemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  hints: String
  hints_not: String
  hints_in: [String!]
  hints_not_in: [String!]
  hints_lt: String
  hints_lte: String
  hints_gt: String
  hints_gte: String
  hints_contains: String
  hints_not_contains: String
  hints_starts_with: String
  hints_not_starts_with: String
  hints_ends_with: String
  hints_not_ends_with: String
  solution: String
  solution_not: String
  solution_in: [String!]
  solution_not_in: [String!]
  solution_lt: String
  solution_lte: String
  solution_gt: String
  solution_gte: String
  solution_contains: String
  solution_not_contains: String
  solution_starts_with: String
  solution_not_starts_with: String
  solution_ends_with: String
  solution_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProblemScalarWhereInput!]
  OR: [ProblemScalarWhereInput!]
  NOT: [ProblemScalarWhereInput!]
}

type ProblemSubscriptionPayload {
  mutation: MutationType!
  node: Problem
  updatedFields: [String!]
  previousValues: ProblemPreviousValues
}

input ProblemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProblemWhereInput
  AND: [ProblemSubscriptionWhereInput!]
  OR: [ProblemSubscriptionWhereInput!]
  NOT: [ProblemSubscriptionWhereInput!]
}

input ProblemUpdatehintsListInput {
  set: [String!]
}

input ProblemUpdateInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  user: UserUpdateOneRequiredWithoutProblemsInput
  lesson: LessonUpdateOneRequiredWithoutProblemsInput
  problemResults: ProblemResultUpdateManyWithoutProblemInput
  lessonID: ID
}

input ProblemUpdateManyDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  lessonID: ID
}

input ProblemUpdateManyMutationInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  lessonID: ID
}

input ProblemUpdateManyWithoutLessonInput {
  create: [ProblemCreateWithoutLessonInput!]
  delete: [ProblemWhereUniqueInput!]
  connect: [ProblemWhereUniqueInput!]
  set: [ProblemWhereUniqueInput!]
  disconnect: [ProblemWhereUniqueInput!]
  update: [ProblemUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ProblemUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ProblemScalarWhereInput!]
  updateMany: [ProblemUpdateManyWithWhereNestedInput!]
}

input ProblemUpdateManyWithoutUserInput {
  create: [ProblemCreateWithoutUserInput!]
  delete: [ProblemWhereUniqueInput!]
  connect: [ProblemWhereUniqueInput!]
  set: [ProblemWhereUniqueInput!]
  disconnect: [ProblemWhereUniqueInput!]
  update: [ProblemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProblemUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProblemScalarWhereInput!]
  updateMany: [ProblemUpdateManyWithWhereNestedInput!]
}

input ProblemUpdateManyWithWhereNestedInput {
  where: ProblemScalarWhereInput!
  data: ProblemUpdateManyDataInput!
}

input ProblemUpdateOneWithoutProblemResultsInput {
  create: ProblemCreateWithoutProblemResultsInput
  update: ProblemUpdateWithoutProblemResultsDataInput
  upsert: ProblemUpsertWithoutProblemResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProblemWhereUniqueInput
}

input ProblemUpdatesolutionListInput {
  set: [String!]
}

input ProblemUpdateWithoutLessonDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  user: UserUpdateOneRequiredWithoutProblemsInput
  problemResults: ProblemResultUpdateManyWithoutProblemInput
  lessonID: ID
}

input ProblemUpdateWithoutProblemResultsDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  user: UserUpdateOneRequiredWithoutProblemsInput
  lesson: LessonUpdateOneRequiredWithoutProblemsInput
  lessonID: ID
}

input ProblemUpdateWithoutUserDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  lesson: LessonUpdateOneRequiredWithoutProblemsInput
  problemResults: ProblemResultUpdateManyWithoutProblemInput
  lessonID: ID
}

input ProblemUpdateWithWhereUniqueWithoutLessonInput {
  where: ProblemWhereUniqueInput!
  data: ProblemUpdateWithoutLessonDataInput!
}

input ProblemUpdateWithWhereUniqueWithoutUserInput {
  where: ProblemWhereUniqueInput!
  data: ProblemUpdateWithoutUserDataInput!
}

input ProblemUpsertWithoutProblemResultsInput {
  update: ProblemUpdateWithoutProblemResultsDataInput!
  create: ProblemCreateWithoutProblemResultsInput!
}

input ProblemUpsertWithWhereUniqueWithoutLessonInput {
  where: ProblemWhereUniqueInput!
  update: ProblemUpdateWithoutLessonDataInput!
  create: ProblemCreateWithoutLessonInput!
}

input ProblemUpsertWithWhereUniqueWithoutUserInput {
  where: ProblemWhereUniqueInput!
  update: ProblemUpdateWithoutUserDataInput!
  create: ProblemCreateWithoutUserInput!
}

input ProblemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  hints: String
  hints_not: String
  hints_in: [String!]
  hints_not_in: [String!]
  hints_lt: String
  hints_lte: String
  hints_gt: String
  hints_gte: String
  hints_contains: String
  hints_not_contains: String
  hints_starts_with: String
  hints_not_starts_with: String
  hints_ends_with: String
  hints_not_ends_with: String
  solution: String
  solution_not: String
  solution_in: [String!]
  solution_not_in: [String!]
  solution_lt: String
  solution_lte: String
  solution_gt: String
  solution_gte: String
  solution_contains: String
  solution_not_contains: String
  solution_starts_with: String
  solution_not_starts_with: String
  solution_ends_with: String
  solution_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  user: UserWhereInput
  lesson: LessonWhereInput
  problemResults_every: ProblemResultWhereInput
  problemResults_some: ProblemResultWhereInput
  problemResults_none: ProblemResultWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProblemWhereInput!]
  OR: [ProblemWhereInput!]
  NOT: [ProblemWhereInput!]
}

input ProblemWhereUniqueInput {
  id: ID
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  careerTrack(where: CareerTrackWhereUniqueInput!): CareerTrack
  careerTracks(where: CareerTrackWhereInput, orderBy: CareerTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareerTrack]!
  careerTracksConnection(where: CareerTrackWhereInput, orderBy: CareerTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CareerTrackConnection!
  careerTrackUnit(where: CareerTrackUnitWhereUniqueInput!): CareerTrackUnit
  careerTrackUnits(where: CareerTrackUnitWhereInput, orderBy: CareerTrackUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareerTrackUnit]!
  careerTrackUnitsConnection(where: CareerTrackUnitWhereInput, orderBy: CareerTrackUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CareerTrackUnitConnection!
  construction(where: ConstructionWhereUniqueInput!): Construction
  constructions(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction]!
  constructionsConnection(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConstructionConnection!
  constructionResult(where: ConstructionResultWhereUniqueInput!): ConstructionResult
  constructionResults(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConstructionResult]!
  constructionResultsConnection(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConstructionResultConnection!
  coursePage(where: CoursePageWhereUniqueInput!): CoursePage
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage]!
  coursePagesConnection(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoursePageConnection!
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson]!
  lessonsConnection(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonConnection!
  lessonResult(where: LessonResultWhereUniqueInput!): LessonResult
  lessonResults(where: LessonResultWhereInput, orderBy: LessonResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LessonResult]!
  lessonResultsConnection(where: LessonResultWhereInput, orderBy: LessonResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonResultConnection!
  newTest(where: NewTestWhereUniqueInput!): NewTest
  newTests(where: NewTestWhereInput, orderBy: NewTestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NewTest]!
  newTestsConnection(where: NewTestWhereInput, orderBy: NewTestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NewTestConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  pointA(where: PointAWhereUniqueInput!): PointA
  pointAs(where: PointAWhereInput, orderBy: PointAOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PointA]!
  pointAsConnection(where: PointAWhereInput, orderBy: PointAOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PointAConnection!
  pointATest(where: PointATestWhereUniqueInput!): PointATest
  pointATests(where: PointATestWhereInput, orderBy: PointATestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PointATest]!
  pointATestsConnection(where: PointATestWhereInput, orderBy: PointATestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PointATestConnection!
  problem(where: ProblemWhereUniqueInput!): Problem
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem]!
  problemsConnection(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemConnection!
  problemResult(where: ProblemResultWhereUniqueInput!): ProblemResult
  problemResults(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemResult]!
  problemResultsConnection(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemResultConnection!
  quiz(where: QuizWhereUniqueInput!): Quiz
  quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz]!
  quizzesConnection(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizConnection!
  quizResult(where: QuizResultWhereUniqueInput!): QuizResult
  quizResults(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizResult]!
  quizResultsConnection(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizResultConnection!
  sandbox(where: SandboxWhereUniqueInput!): Sandbox
  sandboxes(where: SandboxWhereInput, orderBy: SandboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sandbox]!
  sandboxesConnection(where: SandboxWhereInput, orderBy: SandboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SandboxConnection!
  sandboxPage(where: SandboxPageWhereUniqueInput!): SandboxPage
  sandboxPages(where: SandboxPageWhereInput, orderBy: SandboxPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPage]!
  sandboxPagesConnection(where: SandboxPageWhereInput, orderBy: SandboxPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SandboxPageConnection!
  sandboxPageGoal(where: SandboxPageGoalWhereUniqueInput!): SandboxPageGoal
  sandboxPageGoals(where: SandboxPageGoalWhereInput, orderBy: SandboxPageGoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPageGoal]!
  sandboxPageGoalsConnection(where: SandboxPageGoalWhereInput, orderBy: SandboxPageGoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SandboxPageGoalConnection!
  test(where: TestWhereUniqueInput!): Test
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test]!
  testsConnection(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestConnection!
  testResult(where: TestResultWhereUniqueInput!): TestResult
  testResults(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestResult]!
  testResultsConnection(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestResultConnection!
  textEditor(where: TextEditorWhereUniqueInput!): TextEditor
  textEditors(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor]!
  textEditorsConnection(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextEditorConnection!
  textEditorResult(where: TextEditorResultWhereUniqueInput!): TextEditorResult
  textEditorResults(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditorResult]!
  textEditorResultsConnection(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextEditorResultConnection!
  uni(where: UniWhereUniqueInput!): Uni
  unis(where: UniWhereInput, orderBy: UniOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Uni]!
  unisConnection(where: UniWhereInput, orderBy: UniOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UniConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Quiz {
  id: ID!
  question: String!
  answer: String!
  user: User!
  lessonID: ID
  lesson: Lesson
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuizConnection {
  pageInfo: PageInfo!
  edges: [QuizEdge]!
  aggregate: AggregateQuiz!
}

input QuizCreateInput {
  question: String!
  answer: String!
  user: UserCreateOneWithoutQuizesInput!
  lessonID: ID
  lesson: LessonCreateOneWithoutQuizesInput
}

input QuizCreateManyWithoutLessonInput {
  create: [QuizCreateWithoutLessonInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateManyWithoutUserInput {
  create: [QuizCreateWithoutUserInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateWithoutLessonInput {
  question: String!
  answer: String!
  user: UserCreateOneWithoutQuizesInput!
  lessonID: ID
}

input QuizCreateWithoutUserInput {
  question: String!
  answer: String!
  lessonID: ID
  lesson: LessonCreateOneWithoutQuizesInput
}

type QuizEdge {
  node: Quiz!
  cursor: String!
}

enum QuizOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  answer_ASC
  answer_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuizPreviousValues {
  id: ID!
  question: String!
  answer: String!
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuizResult {
  id: ID!
  student: User!
  answer: String
  attempts: Int
  lesson: Lesson
  lessonID: ID
}

type QuizResultConnection {
  pageInfo: PageInfo!
  edges: [QuizResultEdge]!
  aggregate: AggregateQuizResult!
}

input QuizResultCreateInput {
  student: UserCreateOneWithoutQuizResultsInput!
  answer: String
  attempts: Int
  lesson: LessonCreateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultCreateManyWithoutLessonInput {
  create: [QuizResultCreateWithoutLessonInput!]
  connect: [QuizResultWhereUniqueInput!]
}

input QuizResultCreateManyWithoutStudentInput {
  create: [QuizResultCreateWithoutStudentInput!]
  connect: [QuizResultWhereUniqueInput!]
}

input QuizResultCreateWithoutLessonInput {
  student: UserCreateOneWithoutQuizResultsInput!
  answer: String
  attempts: Int
  lessonID: ID
}

input QuizResultCreateWithoutStudentInput {
  answer: String
  attempts: Int
  lesson: LessonCreateOneWithoutQuizResultsInput
  lessonID: ID
}

type QuizResultEdge {
  node: QuizResult!
  cursor: String!
}

enum QuizResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  attempts_ASC
  attempts_DESC
  lessonID_ASC
  lessonID_DESC
}

type QuizResultPreviousValues {
  id: ID!
  answer: String
  attempts: Int
  lessonID: ID
}

input QuizResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  AND: [QuizResultScalarWhereInput!]
  OR: [QuizResultScalarWhereInput!]
  NOT: [QuizResultScalarWhereInput!]
}

type QuizResultSubscriptionPayload {
  mutation: MutationType!
  node: QuizResult
  updatedFields: [String!]
  previousValues: QuizResultPreviousValues
}

input QuizResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuizResultWhereInput
  AND: [QuizResultSubscriptionWhereInput!]
  OR: [QuizResultSubscriptionWhereInput!]
  NOT: [QuizResultSubscriptionWhereInput!]
}

input QuizResultUpdateInput {
  student: UserUpdateOneRequiredWithoutQuizResultsInput
  answer: String
  attempts: Int
  lesson: LessonUpdateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultUpdateManyDataInput {
  answer: String
  attempts: Int
  lessonID: ID
}

input QuizResultUpdateManyMutationInput {
  answer: String
  attempts: Int
  lessonID: ID
}

input QuizResultUpdateManyWithoutLessonInput {
  create: [QuizResultCreateWithoutLessonInput!]
  delete: [QuizResultWhereUniqueInput!]
  connect: [QuizResultWhereUniqueInput!]
  set: [QuizResultWhereUniqueInput!]
  disconnect: [QuizResultWhereUniqueInput!]
  update: [QuizResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [QuizResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [QuizResultScalarWhereInput!]
  updateMany: [QuizResultUpdateManyWithWhereNestedInput!]
}

input QuizResultUpdateManyWithoutStudentInput {
  create: [QuizResultCreateWithoutStudentInput!]
  delete: [QuizResultWhereUniqueInput!]
  connect: [QuizResultWhereUniqueInput!]
  set: [QuizResultWhereUniqueInput!]
  disconnect: [QuizResultWhereUniqueInput!]
  update: [QuizResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [QuizResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [QuizResultScalarWhereInput!]
  updateMany: [QuizResultUpdateManyWithWhereNestedInput!]
}

input QuizResultUpdateManyWithWhereNestedInput {
  where: QuizResultScalarWhereInput!
  data: QuizResultUpdateManyDataInput!
}

input QuizResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutQuizResultsInput
  answer: String
  attempts: Int
  lessonID: ID
}

input QuizResultUpdateWithoutStudentDataInput {
  answer: String
  attempts: Int
  lesson: LessonUpdateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultUpdateWithWhereUniqueWithoutLessonInput {
  where: QuizResultWhereUniqueInput!
  data: QuizResultUpdateWithoutLessonDataInput!
}

input QuizResultUpdateWithWhereUniqueWithoutStudentInput {
  where: QuizResultWhereUniqueInput!
  data: QuizResultUpdateWithoutStudentDataInput!
}

input QuizResultUpsertWithWhereUniqueWithoutLessonInput {
  where: QuizResultWhereUniqueInput!
  update: QuizResultUpdateWithoutLessonDataInput!
  create: QuizResultCreateWithoutLessonInput!
}

input QuizResultUpsertWithWhereUniqueWithoutStudentInput {
  where: QuizResultWhereUniqueInput!
  update: QuizResultUpdateWithoutStudentDataInput!
  create: QuizResultCreateWithoutStudentInput!
}

input QuizResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  AND: [QuizResultWhereInput!]
  OR: [QuizResultWhereInput!]
  NOT: [QuizResultWhereInput!]
}

input QuizResultWhereUniqueInput {
  id: ID
}

input QuizScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [QuizScalarWhereInput!]
  OR: [QuizScalarWhereInput!]
  NOT: [QuizScalarWhereInput!]
}

type QuizSubscriptionPayload {
  mutation: MutationType!
  node: Quiz
  updatedFields: [String!]
  previousValues: QuizPreviousValues
}

input QuizSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuizWhereInput
  AND: [QuizSubscriptionWhereInput!]
  OR: [QuizSubscriptionWhereInput!]
  NOT: [QuizSubscriptionWhereInput!]
}

input QuizUpdateInput {
  question: String
  answer: String
  user: UserUpdateOneRequiredWithoutQuizesInput
  lessonID: ID
  lesson: LessonUpdateOneWithoutQuizesInput
}

input QuizUpdateManyDataInput {
  question: String
  answer: String
  lessonID: ID
}

input QuizUpdateManyMutationInput {
  question: String
  answer: String
  lessonID: ID
}

input QuizUpdateManyWithoutLessonInput {
  create: [QuizCreateWithoutLessonInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithoutUserInput {
  create: [QuizCreateWithoutUserInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithWhereNestedInput {
  where: QuizScalarWhereInput!
  data: QuizUpdateManyDataInput!
}

input QuizUpdateWithoutLessonDataInput {
  question: String
  answer: String
  user: UserUpdateOneRequiredWithoutQuizesInput
  lessonID: ID
}

input QuizUpdateWithoutUserDataInput {
  question: String
  answer: String
  lessonID: ID
  lesson: LessonUpdateOneWithoutQuizesInput
}

input QuizUpdateWithWhereUniqueWithoutLessonInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutLessonDataInput!
}

input QuizUpdateWithWhereUniqueWithoutUserInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutUserDataInput!
}

input QuizUpsertWithWhereUniqueWithoutLessonInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutLessonDataInput!
  create: QuizCreateWithoutLessonInput!
}

input QuizUpsertWithWhereUniqueWithoutUserInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutUserDataInput!
  create: QuizCreateWithoutUserInput!
}

input QuizWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  user: UserWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  lesson: LessonWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [QuizWhereInput!]
  OR: [QuizWhereInput!]
  NOT: [QuizWhereInput!]
}

input QuizWhereUniqueInput {
  id: ID
}

type Sandbox {
  id: ID!
  text: String!
  video: String
  user: User!
  sandboxPage: SandboxPage!
  sandboxPageID: ID!
  link: String
  createdAt: DateTime!
  updatedAt: DateTime!
  likes: Int
}

type SandboxConnection {
  pageInfo: PageInfo!
  edges: [SandboxEdge]!
  aggregate: AggregateSandbox!
}

input SandboxCreateInput {
  text: String!
  video: String
  user: UserCreateOneInput!
  sandboxPage: SandboxPageCreateOneWithoutSandboxesInput!
  sandboxPageID: ID!
  link: String
  likes: Int
}

input SandboxCreateManyWithoutSandboxPageInput {
  create: [SandboxCreateWithoutSandboxPageInput!]
  connect: [SandboxWhereUniqueInput!]
}

input SandboxCreateWithoutSandboxPageInput {
  text: String!
  video: String
  user: UserCreateOneInput!
  sandboxPageID: ID!
  link: String
  likes: Int
}

type SandboxEdge {
  node: Sandbox!
  cursor: String!
}

enum SandboxOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  video_ASC
  video_DESC
  sandboxPageID_ASC
  sandboxPageID_DESC
  link_ASC
  link_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  likes_ASC
  likes_DESC
}

type SandboxPage {
  id: ID!
  title: String!
  description: String!
  image: String!
  user: User!
  sandboxes(where: SandboxWhereInput, orderBy: SandboxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sandbox!]
  sandboxPageGoals(where: SandboxPageGoalWhereInput, orderBy: SandboxPageGoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPageGoal!]
  students: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SandboxPageConnection {
  pageInfo: PageInfo!
  edges: [SandboxPageEdge]!
  aggregate: AggregateSandboxPage!
}

input SandboxPageCreateInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutSandboxPagesInput!
  sandboxes: SandboxCreateManyWithoutSandboxPageInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutSandboxPageInput
  students: SandboxPageCreatestudentsInput
}

input SandboxPageCreateManyWithoutUserInput {
  create: [SandboxPageCreateWithoutUserInput!]
  connect: [SandboxPageWhereUniqueInput!]
}

input SandboxPageCreateOneWithoutSandboxesInput {
  create: SandboxPageCreateWithoutSandboxesInput
  connect: SandboxPageWhereUniqueInput
}

input SandboxPageCreateOneWithoutSandboxPageGoalsInput {
  create: SandboxPageCreateWithoutSandboxPageGoalsInput
  connect: SandboxPageWhereUniqueInput
}

input SandboxPageCreatestudentsInput {
  set: [ID!]
}

input SandboxPageCreateWithoutSandboxesInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutSandboxPagesInput!
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutSandboxPageInput
  students: SandboxPageCreatestudentsInput
}

input SandboxPageCreateWithoutSandboxPageGoalsInput {
  title: String!
  description: String!
  image: String!
  user: UserCreateOneWithoutSandboxPagesInput!
  sandboxes: SandboxCreateManyWithoutSandboxPageInput
  students: SandboxPageCreatestudentsInput
}

input SandboxPageCreateWithoutUserInput {
  title: String!
  description: String!
  image: String!
  sandboxes: SandboxCreateManyWithoutSandboxPageInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutSandboxPageInput
  students: SandboxPageCreatestudentsInput
}

type SandboxPageEdge {
  node: SandboxPage!
  cursor: String!
}

type SandboxPageGoal {
  id: ID!
  goal: String!
  user: User!
  completed: Boolean!
  sandboxPage: SandboxPage
  sandboxPageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SandboxPageGoalConnection {
  pageInfo: PageInfo!
  edges: [SandboxPageGoalEdge]!
  aggregate: AggregateSandboxPageGoal!
}

input SandboxPageGoalCreateInput {
  goal: String!
  user: UserCreateOneWithoutSandboxPageGoalsInput!
  completed: Boolean
  sandboxPage: SandboxPageCreateOneWithoutSandboxPageGoalsInput
  sandboxPageID: ID!
}

input SandboxPageGoalCreateManyWithoutSandboxPageInput {
  create: [SandboxPageGoalCreateWithoutSandboxPageInput!]
  connect: [SandboxPageGoalWhereUniqueInput!]
}

input SandboxPageGoalCreateManyWithoutUserInput {
  create: [SandboxPageGoalCreateWithoutUserInput!]
  connect: [SandboxPageGoalWhereUniqueInput!]
}

input SandboxPageGoalCreateWithoutSandboxPageInput {
  goal: String!
  user: UserCreateOneWithoutSandboxPageGoalsInput!
  completed: Boolean
  sandboxPageID: ID!
}

input SandboxPageGoalCreateWithoutUserInput {
  goal: String!
  completed: Boolean
  sandboxPage: SandboxPageCreateOneWithoutSandboxPageGoalsInput
  sandboxPageID: ID!
}

type SandboxPageGoalEdge {
  node: SandboxPageGoal!
  cursor: String!
}

enum SandboxPageGoalOrderByInput {
  id_ASC
  id_DESC
  goal_ASC
  goal_DESC
  completed_ASC
  completed_DESC
  sandboxPageID_ASC
  sandboxPageID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SandboxPageGoalPreviousValues {
  id: ID!
  goal: String!
  completed: Boolean!
  sandboxPageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SandboxPageGoalScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  goal: String
  goal_not: String
  goal_in: [String!]
  goal_not_in: [String!]
  goal_lt: String
  goal_lte: String
  goal_gt: String
  goal_gte: String
  goal_contains: String
  goal_not_contains: String
  goal_starts_with: String
  goal_not_starts_with: String
  goal_ends_with: String
  goal_not_ends_with: String
  completed: Boolean
  completed_not: Boolean
  sandboxPageID: ID
  sandboxPageID_not: ID
  sandboxPageID_in: [ID!]
  sandboxPageID_not_in: [ID!]
  sandboxPageID_lt: ID
  sandboxPageID_lte: ID
  sandboxPageID_gt: ID
  sandboxPageID_gte: ID
  sandboxPageID_contains: ID
  sandboxPageID_not_contains: ID
  sandboxPageID_starts_with: ID
  sandboxPageID_not_starts_with: ID
  sandboxPageID_ends_with: ID
  sandboxPageID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SandboxPageGoalScalarWhereInput!]
  OR: [SandboxPageGoalScalarWhereInput!]
  NOT: [SandboxPageGoalScalarWhereInput!]
}

type SandboxPageGoalSubscriptionPayload {
  mutation: MutationType!
  node: SandboxPageGoal
  updatedFields: [String!]
  previousValues: SandboxPageGoalPreviousValues
}

input SandboxPageGoalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SandboxPageGoalWhereInput
  AND: [SandboxPageGoalSubscriptionWhereInput!]
  OR: [SandboxPageGoalSubscriptionWhereInput!]
  NOT: [SandboxPageGoalSubscriptionWhereInput!]
}

input SandboxPageGoalUpdateInput {
  goal: String
  user: UserUpdateOneRequiredWithoutSandboxPageGoalsInput
  completed: Boolean
  sandboxPage: SandboxPageUpdateOneWithoutSandboxPageGoalsInput
  sandboxPageID: ID
}

input SandboxPageGoalUpdateManyDataInput {
  goal: String
  completed: Boolean
  sandboxPageID: ID
}

input SandboxPageGoalUpdateManyMutationInput {
  goal: String
  completed: Boolean
  sandboxPageID: ID
}

input SandboxPageGoalUpdateManyWithoutSandboxPageInput {
  create: [SandboxPageGoalCreateWithoutSandboxPageInput!]
  delete: [SandboxPageGoalWhereUniqueInput!]
  connect: [SandboxPageGoalWhereUniqueInput!]
  set: [SandboxPageGoalWhereUniqueInput!]
  disconnect: [SandboxPageGoalWhereUniqueInput!]
  update: [SandboxPageGoalUpdateWithWhereUniqueWithoutSandboxPageInput!]
  upsert: [SandboxPageGoalUpsertWithWhereUniqueWithoutSandboxPageInput!]
  deleteMany: [SandboxPageGoalScalarWhereInput!]
  updateMany: [SandboxPageGoalUpdateManyWithWhereNestedInput!]
}

input SandboxPageGoalUpdateManyWithoutUserInput {
  create: [SandboxPageGoalCreateWithoutUserInput!]
  delete: [SandboxPageGoalWhereUniqueInput!]
  connect: [SandboxPageGoalWhereUniqueInput!]
  set: [SandboxPageGoalWhereUniqueInput!]
  disconnect: [SandboxPageGoalWhereUniqueInput!]
  update: [SandboxPageGoalUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SandboxPageGoalUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SandboxPageGoalScalarWhereInput!]
  updateMany: [SandboxPageGoalUpdateManyWithWhereNestedInput!]
}

input SandboxPageGoalUpdateManyWithWhereNestedInput {
  where: SandboxPageGoalScalarWhereInput!
  data: SandboxPageGoalUpdateManyDataInput!
}

input SandboxPageGoalUpdateWithoutSandboxPageDataInput {
  goal: String
  user: UserUpdateOneRequiredWithoutSandboxPageGoalsInput
  completed: Boolean
  sandboxPageID: ID
}

input SandboxPageGoalUpdateWithoutUserDataInput {
  goal: String
  completed: Boolean
  sandboxPage: SandboxPageUpdateOneWithoutSandboxPageGoalsInput
  sandboxPageID: ID
}

input SandboxPageGoalUpdateWithWhereUniqueWithoutSandboxPageInput {
  where: SandboxPageGoalWhereUniqueInput!
  data: SandboxPageGoalUpdateWithoutSandboxPageDataInput!
}

input SandboxPageGoalUpdateWithWhereUniqueWithoutUserInput {
  where: SandboxPageGoalWhereUniqueInput!
  data: SandboxPageGoalUpdateWithoutUserDataInput!
}

input SandboxPageGoalUpsertWithWhereUniqueWithoutSandboxPageInput {
  where: SandboxPageGoalWhereUniqueInput!
  update: SandboxPageGoalUpdateWithoutSandboxPageDataInput!
  create: SandboxPageGoalCreateWithoutSandboxPageInput!
}

input SandboxPageGoalUpsertWithWhereUniqueWithoutUserInput {
  where: SandboxPageGoalWhereUniqueInput!
  update: SandboxPageGoalUpdateWithoutUserDataInput!
  create: SandboxPageGoalCreateWithoutUserInput!
}

input SandboxPageGoalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  goal: String
  goal_not: String
  goal_in: [String!]
  goal_not_in: [String!]
  goal_lt: String
  goal_lte: String
  goal_gt: String
  goal_gte: String
  goal_contains: String
  goal_not_contains: String
  goal_starts_with: String
  goal_not_starts_with: String
  goal_ends_with: String
  goal_not_ends_with: String
  user: UserWhereInput
  completed: Boolean
  completed_not: Boolean
  sandboxPage: SandboxPageWhereInput
  sandboxPageID: ID
  sandboxPageID_not: ID
  sandboxPageID_in: [ID!]
  sandboxPageID_not_in: [ID!]
  sandboxPageID_lt: ID
  sandboxPageID_lte: ID
  sandboxPageID_gt: ID
  sandboxPageID_gte: ID
  sandboxPageID_contains: ID
  sandboxPageID_not_contains: ID
  sandboxPageID_starts_with: ID
  sandboxPageID_not_starts_with: ID
  sandboxPageID_ends_with: ID
  sandboxPageID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SandboxPageGoalWhereInput!]
  OR: [SandboxPageGoalWhereInput!]
  NOT: [SandboxPageGoalWhereInput!]
}

input SandboxPageGoalWhereUniqueInput {
  id: ID
}

enum SandboxPageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SandboxPagePreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String!
  students: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SandboxPageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SandboxPageScalarWhereInput!]
  OR: [SandboxPageScalarWhereInput!]
  NOT: [SandboxPageScalarWhereInput!]
}

type SandboxPageSubscriptionPayload {
  mutation: MutationType!
  node: SandboxPage
  updatedFields: [String!]
  previousValues: SandboxPagePreviousValues
}

input SandboxPageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SandboxPageWhereInput
  AND: [SandboxPageSubscriptionWhereInput!]
  OR: [SandboxPageSubscriptionWhereInput!]
  NOT: [SandboxPageSubscriptionWhereInput!]
}

input SandboxPageUpdateInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutSandboxPagesInput
  sandboxes: SandboxUpdateManyWithoutSandboxPageInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutSandboxPageInput
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateManyDataInput {
  title: String
  description: String
  image: String
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateManyMutationInput {
  title: String
  description: String
  image: String
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateManyWithoutUserInput {
  create: [SandboxPageCreateWithoutUserInput!]
  delete: [SandboxPageWhereUniqueInput!]
  connect: [SandboxPageWhereUniqueInput!]
  set: [SandboxPageWhereUniqueInput!]
  disconnect: [SandboxPageWhereUniqueInput!]
  update: [SandboxPageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SandboxPageUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SandboxPageScalarWhereInput!]
  updateMany: [SandboxPageUpdateManyWithWhereNestedInput!]
}

input SandboxPageUpdateManyWithWhereNestedInput {
  where: SandboxPageScalarWhereInput!
  data: SandboxPageUpdateManyDataInput!
}

input SandboxPageUpdateOneRequiredWithoutSandboxesInput {
  create: SandboxPageCreateWithoutSandboxesInput
  update: SandboxPageUpdateWithoutSandboxesDataInput
  upsert: SandboxPageUpsertWithoutSandboxesInput
  connect: SandboxPageWhereUniqueInput
}

input SandboxPageUpdateOneWithoutSandboxPageGoalsInput {
  create: SandboxPageCreateWithoutSandboxPageGoalsInput
  update: SandboxPageUpdateWithoutSandboxPageGoalsDataInput
  upsert: SandboxPageUpsertWithoutSandboxPageGoalsInput
  delete: Boolean
  disconnect: Boolean
  connect: SandboxPageWhereUniqueInput
}

input SandboxPageUpdatestudentsInput {
  set: [ID!]
}

input SandboxPageUpdateWithoutSandboxesDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutSandboxPagesInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutSandboxPageInput
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateWithoutSandboxPageGoalsDataInput {
  title: String
  description: String
  image: String
  user: UserUpdateOneRequiredWithoutSandboxPagesInput
  sandboxes: SandboxUpdateManyWithoutSandboxPageInput
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateWithoutUserDataInput {
  title: String
  description: String
  image: String
  sandboxes: SandboxUpdateManyWithoutSandboxPageInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutSandboxPageInput
  students: SandboxPageUpdatestudentsInput
}

input SandboxPageUpdateWithWhereUniqueWithoutUserInput {
  where: SandboxPageWhereUniqueInput!
  data: SandboxPageUpdateWithoutUserDataInput!
}

input SandboxPageUpsertWithoutSandboxesInput {
  update: SandboxPageUpdateWithoutSandboxesDataInput!
  create: SandboxPageCreateWithoutSandboxesInput!
}

input SandboxPageUpsertWithoutSandboxPageGoalsInput {
  update: SandboxPageUpdateWithoutSandboxPageGoalsDataInput!
  create: SandboxPageCreateWithoutSandboxPageGoalsInput!
}

input SandboxPageUpsertWithWhereUniqueWithoutUserInput {
  where: SandboxPageWhereUniqueInput!
  update: SandboxPageUpdateWithoutUserDataInput!
  create: SandboxPageCreateWithoutUserInput!
}

input SandboxPageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  user: UserWhereInput
  sandboxes_every: SandboxWhereInput
  sandboxes_some: SandboxWhereInput
  sandboxes_none: SandboxWhereInput
  sandboxPageGoals_every: SandboxPageGoalWhereInput
  sandboxPageGoals_some: SandboxPageGoalWhereInput
  sandboxPageGoals_none: SandboxPageGoalWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SandboxPageWhereInput!]
  OR: [SandboxPageWhereInput!]
  NOT: [SandboxPageWhereInput!]
}

input SandboxPageWhereUniqueInput {
  id: ID
}

type SandboxPreviousValues {
  id: ID!
  text: String!
  video: String
  sandboxPageID: ID!
  link: String
  createdAt: DateTime!
  updatedAt: DateTime!
  likes: Int
}

input SandboxScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  video: String
  video_not: String
  video_in: [String!]
  video_not_in: [String!]
  video_lt: String
  video_lte: String
  video_gt: String
  video_gte: String
  video_contains: String
  video_not_contains: String
  video_starts_with: String
  video_not_starts_with: String
  video_ends_with: String
  video_not_ends_with: String
  sandboxPageID: ID
  sandboxPageID_not: ID
  sandboxPageID_in: [ID!]
  sandboxPageID_not_in: [ID!]
  sandboxPageID_lt: ID
  sandboxPageID_lte: ID
  sandboxPageID_gt: ID
  sandboxPageID_gte: ID
  sandboxPageID_contains: ID
  sandboxPageID_not_contains: ID
  sandboxPageID_starts_with: ID
  sandboxPageID_not_starts_with: ID
  sandboxPageID_ends_with: ID
  sandboxPageID_not_ends_with: ID
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  AND: [SandboxScalarWhereInput!]
  OR: [SandboxScalarWhereInput!]
  NOT: [SandboxScalarWhereInput!]
}

type SandboxSubscriptionPayload {
  mutation: MutationType!
  node: Sandbox
  updatedFields: [String!]
  previousValues: SandboxPreviousValues
}

input SandboxSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SandboxWhereInput
  AND: [SandboxSubscriptionWhereInput!]
  OR: [SandboxSubscriptionWhereInput!]
  NOT: [SandboxSubscriptionWhereInput!]
}

input SandboxUpdateInput {
  text: String
  video: String
  user: UserUpdateOneRequiredInput
  sandboxPage: SandboxPageUpdateOneRequiredWithoutSandboxesInput
  sandboxPageID: ID
  link: String
  likes: Int
}

input SandboxUpdateManyDataInput {
  text: String
  video: String
  sandboxPageID: ID
  link: String
  likes: Int
}

input SandboxUpdateManyMutationInput {
  text: String
  video: String
  sandboxPageID: ID
  link: String
  likes: Int
}

input SandboxUpdateManyWithoutSandboxPageInput {
  create: [SandboxCreateWithoutSandboxPageInput!]
  delete: [SandboxWhereUniqueInput!]
  connect: [SandboxWhereUniqueInput!]
  set: [SandboxWhereUniqueInput!]
  disconnect: [SandboxWhereUniqueInput!]
  update: [SandboxUpdateWithWhereUniqueWithoutSandboxPageInput!]
  upsert: [SandboxUpsertWithWhereUniqueWithoutSandboxPageInput!]
  deleteMany: [SandboxScalarWhereInput!]
  updateMany: [SandboxUpdateManyWithWhereNestedInput!]
}

input SandboxUpdateManyWithWhereNestedInput {
  where: SandboxScalarWhereInput!
  data: SandboxUpdateManyDataInput!
}

input SandboxUpdateWithoutSandboxPageDataInput {
  text: String
  video: String
  user: UserUpdateOneRequiredInput
  sandboxPageID: ID
  link: String
  likes: Int
}

input SandboxUpdateWithWhereUniqueWithoutSandboxPageInput {
  where: SandboxWhereUniqueInput!
  data: SandboxUpdateWithoutSandboxPageDataInput!
}

input SandboxUpsertWithWhereUniqueWithoutSandboxPageInput {
  where: SandboxWhereUniqueInput!
  update: SandboxUpdateWithoutSandboxPageDataInput!
  create: SandboxCreateWithoutSandboxPageInput!
}

input SandboxWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  video: String
  video_not: String
  video_in: [String!]
  video_not_in: [String!]
  video_lt: String
  video_lte: String
  video_gt: String
  video_gte: String
  video_contains: String
  video_not_contains: String
  video_starts_with: String
  video_not_starts_with: String
  video_ends_with: String
  video_not_ends_with: String
  user: UserWhereInput
  sandboxPage: SandboxPageWhereInput
  sandboxPageID: ID
  sandboxPageID_not: ID
  sandboxPageID_in: [ID!]
  sandboxPageID_not_in: [ID!]
  sandboxPageID_lt: ID
  sandboxPageID_lte: ID
  sandboxPageID_gt: ID
  sandboxPageID_gte: ID
  sandboxPageID_contains: ID
  sandboxPageID_not_contains: ID
  sandboxPageID_starts_with: ID
  sandboxPageID_not_starts_with: ID
  sandboxPageID_ends_with: ID
  sandboxPageID_not_ends_with: ID
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  AND: [SandboxWhereInput!]
  OR: [SandboxWhereInput!]
  NOT: [SandboxWhereInput!]
}

input SandboxWhereUniqueInput {
  id: ID
}

enum Status {
  STUDENT
  AUTHOR
  SAVVY_AUTHOR
  HR
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  careerTrack(where: CareerTrackSubscriptionWhereInput): CareerTrackSubscriptionPayload
  careerTrackUnit(where: CareerTrackUnitSubscriptionWhereInput): CareerTrackUnitSubscriptionPayload
  construction(where: ConstructionSubscriptionWhereInput): ConstructionSubscriptionPayload
  constructionResult(where: ConstructionResultSubscriptionWhereInput): ConstructionResultSubscriptionPayload
  coursePage(where: CoursePageSubscriptionWhereInput): CoursePageSubscriptionPayload
  lesson(where: LessonSubscriptionWhereInput): LessonSubscriptionPayload
  lessonResult(where: LessonResultSubscriptionWhereInput): LessonResultSubscriptionPayload
  newTest(where: NewTestSubscriptionWhereInput): NewTestSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  pointA(where: PointASubscriptionWhereInput): PointASubscriptionPayload
  pointATest(where: PointATestSubscriptionWhereInput): PointATestSubscriptionPayload
  problem(where: ProblemSubscriptionWhereInput): ProblemSubscriptionPayload
  problemResult(where: ProblemResultSubscriptionWhereInput): ProblemResultSubscriptionPayload
  quiz(where: QuizSubscriptionWhereInput): QuizSubscriptionPayload
  quizResult(where: QuizResultSubscriptionWhereInput): QuizResultSubscriptionPayload
  sandbox(where: SandboxSubscriptionWhereInput): SandboxSubscriptionPayload
  sandboxPage(where: SandboxPageSubscriptionWhereInput): SandboxPageSubscriptionPayload
  sandboxPageGoal(where: SandboxPageGoalSubscriptionWhereInput): SandboxPageGoalSubscriptionPayload
  test(where: TestSubscriptionWhereInput): TestSubscriptionPayload
  testResult(where: TestResultSubscriptionWhereInput): TestResultSubscriptionPayload
  textEditor(where: TextEditorSubscriptionWhereInput): TextEditorSubscriptionPayload
  textEditorResult(where: TextEditorResultSubscriptionWhereInput): TextEditorResultSubscriptionPayload
  uni(where: UniSubscriptionWhereInput): UniSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Test {
  id: ID!
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: User!
  lesson: Lesson
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TestConnection {
  pageInfo: PageInfo!
  edges: [TestEdge]!
  aggregate: AggregateTest!
}

input TestCreateInput {
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserCreateOneWithoutTestsInput!
  lesson: LessonCreateOneWithoutTestsInput
  lessonID: ID
}

input TestCreateManyWithoutLessonInput {
  create: [TestCreateWithoutLessonInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateManyWithoutUserInput {
  create: [TestCreateWithoutUserInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateWithoutLessonInput {
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserCreateOneWithoutTestsInput!
  lessonID: ID
}

input TestCreateWithoutUserInput {
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  lesson: LessonCreateOneWithoutTestsInput
  lessonID: ID
}

type TestEdge {
  node: Test!
  cursor: String!
}

enum TestOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  answer1_ASC
  answer1_DESC
  answer1Correct_ASC
  answer1Correct_DESC
  answer2_ASC
  answer2_DESC
  answer2Correct_ASC
  answer2Correct_DESC
  answer3_ASC
  answer3_DESC
  answer3Correct_ASC
  answer3Correct_DESC
  answer4_ASC
  answer4_DESC
  answer4Correct_ASC
  answer4Correct_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TestPreviousValues {
  id: ID!
  question: String!
  answer1: String!
  answer1Correct: String!
  answer2: String!
  answer2Correct: String!
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TestResult {
  id: ID!
  student: User!
  answer: String
  attempts: Int
  lesson: Lesson
  lessonID: ID
}

type TestResultConnection {
  pageInfo: PageInfo!
  edges: [TestResultEdge]!
  aggregate: AggregateTestResult!
}

input TestResultCreateInput {
  student: UserCreateOneWithoutTestResultsInput!
  answer: String
  attempts: Int
  lesson: LessonCreateOneWithoutTestResultsInput
  lessonID: ID
}

input TestResultCreateManyWithoutLessonInput {
  create: [TestResultCreateWithoutLessonInput!]
  connect: [TestResultWhereUniqueInput!]
}

input TestResultCreateManyWithoutStudentInput {
  create: [TestResultCreateWithoutStudentInput!]
  connect: [TestResultWhereUniqueInput!]
}

input TestResultCreateWithoutLessonInput {
  student: UserCreateOneWithoutTestResultsInput!
  answer: String
  attempts: Int
  lessonID: ID
}

input TestResultCreateWithoutStudentInput {
  answer: String
  attempts: Int
  lesson: LessonCreateOneWithoutTestResultsInput
  lessonID: ID
}

type TestResultEdge {
  node: TestResult!
  cursor: String!
}

enum TestResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  attempts_ASC
  attempts_DESC
  lessonID_ASC
  lessonID_DESC
}

type TestResultPreviousValues {
  id: ID!
  answer: String
  attempts: Int
  lessonID: ID
}

input TestResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  AND: [TestResultScalarWhereInput!]
  OR: [TestResultScalarWhereInput!]
  NOT: [TestResultScalarWhereInput!]
}

type TestResultSubscriptionPayload {
  mutation: MutationType!
  node: TestResult
  updatedFields: [String!]
  previousValues: TestResultPreviousValues
}

input TestResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestResultWhereInput
  AND: [TestResultSubscriptionWhereInput!]
  OR: [TestResultSubscriptionWhereInput!]
  NOT: [TestResultSubscriptionWhereInput!]
}

input TestResultUpdateInput {
  student: UserUpdateOneRequiredWithoutTestResultsInput
  answer: String
  attempts: Int
  lesson: LessonUpdateOneWithoutTestResultsInput
  lessonID: ID
}

input TestResultUpdateManyDataInput {
  answer: String
  attempts: Int
  lessonID: ID
}

input TestResultUpdateManyMutationInput {
  answer: String
  attempts: Int
  lessonID: ID
}

input TestResultUpdateManyWithoutLessonInput {
  create: [TestResultCreateWithoutLessonInput!]
  delete: [TestResultWhereUniqueInput!]
  connect: [TestResultWhereUniqueInput!]
  set: [TestResultWhereUniqueInput!]
  disconnect: [TestResultWhereUniqueInput!]
  update: [TestResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TestResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [TestResultScalarWhereInput!]
  updateMany: [TestResultUpdateManyWithWhereNestedInput!]
}

input TestResultUpdateManyWithoutStudentInput {
  create: [TestResultCreateWithoutStudentInput!]
  delete: [TestResultWhereUniqueInput!]
  connect: [TestResultWhereUniqueInput!]
  set: [TestResultWhereUniqueInput!]
  disconnect: [TestResultWhereUniqueInput!]
  update: [TestResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [TestResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [TestResultScalarWhereInput!]
  updateMany: [TestResultUpdateManyWithWhereNestedInput!]
}

input TestResultUpdateManyWithWhereNestedInput {
  where: TestResultScalarWhereInput!
  data: TestResultUpdateManyDataInput!
}

input TestResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutTestResultsInput
  answer: String
  attempts: Int
  lessonID: ID
}

input TestResultUpdateWithoutStudentDataInput {
  answer: String
  attempts: Int
  lesson: LessonUpdateOneWithoutTestResultsInput
  lessonID: ID
}

input TestResultUpdateWithWhereUniqueWithoutLessonInput {
  where: TestResultWhereUniqueInput!
  data: TestResultUpdateWithoutLessonDataInput!
}

input TestResultUpdateWithWhereUniqueWithoutStudentInput {
  where: TestResultWhereUniqueInput!
  data: TestResultUpdateWithoutStudentDataInput!
}

input TestResultUpsertWithWhereUniqueWithoutLessonInput {
  where: TestResultWhereUniqueInput!
  update: TestResultUpdateWithoutLessonDataInput!
  create: TestResultCreateWithoutLessonInput!
}

input TestResultUpsertWithWhereUniqueWithoutStudentInput {
  where: TestResultWhereUniqueInput!
  update: TestResultUpdateWithoutStudentDataInput!
  create: TestResultCreateWithoutStudentInput!
}

input TestResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  AND: [TestResultWhereInput!]
  OR: [TestResultWhereInput!]
  NOT: [TestResultWhereInput!]
}

input TestResultWhereUniqueInput {
  id: ID
}

input TestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer1: String
  answer1_not: String
  answer1_in: [String!]
  answer1_not_in: [String!]
  answer1_lt: String
  answer1_lte: String
  answer1_gt: String
  answer1_gte: String
  answer1_contains: String
  answer1_not_contains: String
  answer1_starts_with: String
  answer1_not_starts_with: String
  answer1_ends_with: String
  answer1_not_ends_with: String
  answer1Correct: String
  answer1Correct_not: String
  answer1Correct_in: [String!]
  answer1Correct_not_in: [String!]
  answer1Correct_lt: String
  answer1Correct_lte: String
  answer1Correct_gt: String
  answer1Correct_gte: String
  answer1Correct_contains: String
  answer1Correct_not_contains: String
  answer1Correct_starts_with: String
  answer1Correct_not_starts_with: String
  answer1Correct_ends_with: String
  answer1Correct_not_ends_with: String
  answer2: String
  answer2_not: String
  answer2_in: [String!]
  answer2_not_in: [String!]
  answer2_lt: String
  answer2_lte: String
  answer2_gt: String
  answer2_gte: String
  answer2_contains: String
  answer2_not_contains: String
  answer2_starts_with: String
  answer2_not_starts_with: String
  answer2_ends_with: String
  answer2_not_ends_with: String
  answer2Correct: String
  answer2Correct_not: String
  answer2Correct_in: [String!]
  answer2Correct_not_in: [String!]
  answer2Correct_lt: String
  answer2Correct_lte: String
  answer2Correct_gt: String
  answer2Correct_gte: String
  answer2Correct_contains: String
  answer2Correct_not_contains: String
  answer2Correct_starts_with: String
  answer2Correct_not_starts_with: String
  answer2Correct_ends_with: String
  answer2Correct_not_ends_with: String
  answer3: String
  answer3_not: String
  answer3_in: [String!]
  answer3_not_in: [String!]
  answer3_lt: String
  answer3_lte: String
  answer3_gt: String
  answer3_gte: String
  answer3_contains: String
  answer3_not_contains: String
  answer3_starts_with: String
  answer3_not_starts_with: String
  answer3_ends_with: String
  answer3_not_ends_with: String
  answer3Correct: String
  answer3Correct_not: String
  answer3Correct_in: [String!]
  answer3Correct_not_in: [String!]
  answer3Correct_lt: String
  answer3Correct_lte: String
  answer3Correct_gt: String
  answer3Correct_gte: String
  answer3Correct_contains: String
  answer3Correct_not_contains: String
  answer3Correct_starts_with: String
  answer3Correct_not_starts_with: String
  answer3Correct_ends_with: String
  answer3Correct_not_ends_with: String
  answer4: String
  answer4_not: String
  answer4_in: [String!]
  answer4_not_in: [String!]
  answer4_lt: String
  answer4_lte: String
  answer4_gt: String
  answer4_gte: String
  answer4_contains: String
  answer4_not_contains: String
  answer4_starts_with: String
  answer4_not_starts_with: String
  answer4_ends_with: String
  answer4_not_ends_with: String
  answer4Correct: String
  answer4Correct_not: String
  answer4Correct_in: [String!]
  answer4Correct_not_in: [String!]
  answer4Correct_lt: String
  answer4Correct_lte: String
  answer4Correct_gt: String
  answer4Correct_gte: String
  answer4Correct_contains: String
  answer4Correct_not_contains: String
  answer4Correct_starts_with: String
  answer4Correct_not_starts_with: String
  answer4Correct_ends_with: String
  answer4Correct_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TestScalarWhereInput!]
  OR: [TestScalarWhereInput!]
  NOT: [TestScalarWhereInput!]
}

type TestSubscriptionPayload {
  mutation: MutationType!
  node: Test
  updatedFields: [String!]
  previousValues: TestPreviousValues
}

input TestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestWhereInput
  AND: [TestSubscriptionWhereInput!]
  OR: [TestSubscriptionWhereInput!]
  NOT: [TestSubscriptionWhereInput!]
}

input TestUpdateInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserUpdateOneRequiredWithoutTestsInput
  lesson: LessonUpdateOneWithoutTestsInput
  lessonID: ID
}

input TestUpdateManyDataInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  lessonID: ID
}

input TestUpdateManyMutationInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  lessonID: ID
}

input TestUpdateManyWithoutLessonInput {
  create: [TestCreateWithoutLessonInput!]
  delete: [TestWhereUniqueInput!]
  connect: [TestWhereUniqueInput!]
  set: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [TestScalarWhereInput!]
  updateMany: [TestUpdateManyWithWhereNestedInput!]
}

input TestUpdateManyWithoutUserInput {
  create: [TestCreateWithoutUserInput!]
  delete: [TestWhereUniqueInput!]
  connect: [TestWhereUniqueInput!]
  set: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TestScalarWhereInput!]
  updateMany: [TestUpdateManyWithWhereNestedInput!]
}

input TestUpdateManyWithWhereNestedInput {
  where: TestScalarWhereInput!
  data: TestUpdateManyDataInput!
}

input TestUpdateWithoutLessonDataInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  user: UserUpdateOneRequiredWithoutTestsInput
  lessonID: ID
}

input TestUpdateWithoutUserDataInput {
  question: String
  answer1: String
  answer1Correct: String
  answer2: String
  answer2Correct: String
  answer3: String
  answer3Correct: String
  answer4: String
  answer4Correct: String
  lesson: LessonUpdateOneWithoutTestsInput
  lessonID: ID
}

input TestUpdateWithWhereUniqueWithoutLessonInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutLessonDataInput!
}

input TestUpdateWithWhereUniqueWithoutUserInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutUserDataInput!
}

input TestUpsertWithWhereUniqueWithoutLessonInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutLessonDataInput!
  create: TestCreateWithoutLessonInput!
}

input TestUpsertWithWhereUniqueWithoutUserInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutUserDataInput!
  create: TestCreateWithoutUserInput!
}

input TestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer1: String
  answer1_not: String
  answer1_in: [String!]
  answer1_not_in: [String!]
  answer1_lt: String
  answer1_lte: String
  answer1_gt: String
  answer1_gte: String
  answer1_contains: String
  answer1_not_contains: String
  answer1_starts_with: String
  answer1_not_starts_with: String
  answer1_ends_with: String
  answer1_not_ends_with: String
  answer1Correct: String
  answer1Correct_not: String
  answer1Correct_in: [String!]
  answer1Correct_not_in: [String!]
  answer1Correct_lt: String
  answer1Correct_lte: String
  answer1Correct_gt: String
  answer1Correct_gte: String
  answer1Correct_contains: String
  answer1Correct_not_contains: String
  answer1Correct_starts_with: String
  answer1Correct_not_starts_with: String
  answer1Correct_ends_with: String
  answer1Correct_not_ends_with: String
  answer2: String
  answer2_not: String
  answer2_in: [String!]
  answer2_not_in: [String!]
  answer2_lt: String
  answer2_lte: String
  answer2_gt: String
  answer2_gte: String
  answer2_contains: String
  answer2_not_contains: String
  answer2_starts_with: String
  answer2_not_starts_with: String
  answer2_ends_with: String
  answer2_not_ends_with: String
  answer2Correct: String
  answer2Correct_not: String
  answer2Correct_in: [String!]
  answer2Correct_not_in: [String!]
  answer2Correct_lt: String
  answer2Correct_lte: String
  answer2Correct_gt: String
  answer2Correct_gte: String
  answer2Correct_contains: String
  answer2Correct_not_contains: String
  answer2Correct_starts_with: String
  answer2Correct_not_starts_with: String
  answer2Correct_ends_with: String
  answer2Correct_not_ends_with: String
  answer3: String
  answer3_not: String
  answer3_in: [String!]
  answer3_not_in: [String!]
  answer3_lt: String
  answer3_lte: String
  answer3_gt: String
  answer3_gte: String
  answer3_contains: String
  answer3_not_contains: String
  answer3_starts_with: String
  answer3_not_starts_with: String
  answer3_ends_with: String
  answer3_not_ends_with: String
  answer3Correct: String
  answer3Correct_not: String
  answer3Correct_in: [String!]
  answer3Correct_not_in: [String!]
  answer3Correct_lt: String
  answer3Correct_lte: String
  answer3Correct_gt: String
  answer3Correct_gte: String
  answer3Correct_contains: String
  answer3Correct_not_contains: String
  answer3Correct_starts_with: String
  answer3Correct_not_starts_with: String
  answer3Correct_ends_with: String
  answer3Correct_not_ends_with: String
  answer4: String
  answer4_not: String
  answer4_in: [String!]
  answer4_not_in: [String!]
  answer4_lt: String
  answer4_lte: String
  answer4_gt: String
  answer4_gte: String
  answer4_contains: String
  answer4_not_contains: String
  answer4_starts_with: String
  answer4_not_starts_with: String
  answer4_ends_with: String
  answer4_not_ends_with: String
  answer4Correct: String
  answer4Correct_not: String
  answer4Correct_in: [String!]
  answer4Correct_not_in: [String!]
  answer4Correct_lt: String
  answer4Correct_lte: String
  answer4Correct_gt: String
  answer4Correct_gte: String
  answer4Correct_contains: String
  answer4Correct_not_contains: String
  answer4Correct_starts_with: String
  answer4Correct_not_starts_with: String
  answer4Correct_ends_with: String
  answer4Correct_not_ends_with: String
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TestWhereInput!]
  OR: [TestWhereInput!]
  NOT: [TestWhereInput!]
}

input TestWhereUniqueInput {
  id: ID
}

type TextEditor {
  id: ID!
  name: String!
  text: String!
  totalMistakes: Int
  user: User!
  lesson: Lesson!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextEditorConnection {
  pageInfo: PageInfo!
  edges: [TextEditorEdge]!
  aggregate: AggregateTextEditor!
}

input TextEditorCreateInput {
  name: String!
  text: String!
  totalMistakes: Int
  user: UserCreateOneWithoutTextEditorInput!
  lesson: LessonCreateOneWithoutTexteditorsInput!
  lessonID: ID!
}

input TextEditorCreateManyWithoutLessonInput {
  create: [TextEditorCreateWithoutLessonInput!]
  connect: [TextEditorWhereUniqueInput!]
}

input TextEditorCreateManyWithoutUserInput {
  create: [TextEditorCreateWithoutUserInput!]
  connect: [TextEditorWhereUniqueInput!]
}

input TextEditorCreateOneInput {
  create: TextEditorCreateInput
  connect: TextEditorWhereUniqueInput
}

input TextEditorCreateWithoutLessonInput {
  name: String!
  text: String!
  totalMistakes: Int
  user: UserCreateOneWithoutTextEditorInput!
  lessonID: ID!
}

input TextEditorCreateWithoutUserInput {
  name: String!
  text: String!
  totalMistakes: Int
  lesson: LessonCreateOneWithoutTexteditorsInput!
  lessonID: ID!
}

type TextEditorEdge {
  node: TextEditor!
  cursor: String!
}

enum TextEditorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  text_ASC
  text_DESC
  totalMistakes_ASC
  totalMistakes_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TextEditorPreviousValues {
  id: ID!
  name: String!
  text: String!
  totalMistakes: Int
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextEditorResult {
  id: ID!
  student: User!
  attempts: Int
  revealed: [String!]!
  lesson: Lesson
  lessonID: ID
  textEditor: TextEditor
  textEditorID: ID
}

type TextEditorResultConnection {
  pageInfo: PageInfo!
  edges: [TextEditorResultEdge]!
  aggregate: AggregateTextEditorResult!
}

input TextEditorResultCreateInput {
  student: UserCreateOneWithoutTextEditorResultsInput!
  attempts: Int
  revealed: TextEditorResultCreaterevealedInput
  lesson: LessonCreateOneWithoutTextEditorResultsInput
  lessonID: ID
  textEditor: TextEditorCreateOneInput
  textEditorID: ID
}

input TextEditorResultCreateManyWithoutLessonInput {
  create: [TextEditorResultCreateWithoutLessonInput!]
  connect: [TextEditorResultWhereUniqueInput!]
}

input TextEditorResultCreateManyWithoutStudentInput {
  create: [TextEditorResultCreateWithoutStudentInput!]
  connect: [TextEditorResultWhereUniqueInput!]
}

input TextEditorResultCreaterevealedInput {
  set: [String!]
}

input TextEditorResultCreateWithoutLessonInput {
  student: UserCreateOneWithoutTextEditorResultsInput!
  attempts: Int
  revealed: TextEditorResultCreaterevealedInput
  lessonID: ID
  textEditor: TextEditorCreateOneInput
  textEditorID: ID
}

input TextEditorResultCreateWithoutStudentInput {
  attempts: Int
  revealed: TextEditorResultCreaterevealedInput
  lesson: LessonCreateOneWithoutTextEditorResultsInput
  lessonID: ID
  textEditor: TextEditorCreateOneInput
  textEditorID: ID
}

type TextEditorResultEdge {
  node: TextEditorResult!
  cursor: String!
}

enum TextEditorResultOrderByInput {
  id_ASC
  id_DESC
  attempts_ASC
  attempts_DESC
  lessonID_ASC
  lessonID_DESC
  textEditorID_ASC
  textEditorID_DESC
}

type TextEditorResultPreviousValues {
  id: ID!
  attempts: Int
  revealed: [String!]!
  lessonID: ID
  textEditorID: ID
}

input TextEditorResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  textEditorID: ID
  textEditorID_not: ID
  textEditorID_in: [ID!]
  textEditorID_not_in: [ID!]
  textEditorID_lt: ID
  textEditorID_lte: ID
  textEditorID_gt: ID
  textEditorID_gte: ID
  textEditorID_contains: ID
  textEditorID_not_contains: ID
  textEditorID_starts_with: ID
  textEditorID_not_starts_with: ID
  textEditorID_ends_with: ID
  textEditorID_not_ends_with: ID
  AND: [TextEditorResultScalarWhereInput!]
  OR: [TextEditorResultScalarWhereInput!]
  NOT: [TextEditorResultScalarWhereInput!]
}

type TextEditorResultSubscriptionPayload {
  mutation: MutationType!
  node: TextEditorResult
  updatedFields: [String!]
  previousValues: TextEditorResultPreviousValues
}

input TextEditorResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TextEditorResultWhereInput
  AND: [TextEditorResultSubscriptionWhereInput!]
  OR: [TextEditorResultSubscriptionWhereInput!]
  NOT: [TextEditorResultSubscriptionWhereInput!]
}

input TextEditorResultUpdateInput {
  student: UserUpdateOneRequiredWithoutTextEditorResultsInput
  attempts: Int
  revealed: TextEditorResultUpdaterevealedInput
  lesson: LessonUpdateOneWithoutTextEditorResultsInput
  lessonID: ID
  textEditor: TextEditorUpdateOneInput
  textEditorID: ID
}

input TextEditorResultUpdateManyDataInput {
  attempts: Int
  revealed: TextEditorResultUpdaterevealedInput
  lessonID: ID
  textEditorID: ID
}

input TextEditorResultUpdateManyMutationInput {
  attempts: Int
  revealed: TextEditorResultUpdaterevealedInput
  lessonID: ID
  textEditorID: ID
}

input TextEditorResultUpdateManyWithoutLessonInput {
  create: [TextEditorResultCreateWithoutLessonInput!]
  delete: [TextEditorResultWhereUniqueInput!]
  connect: [TextEditorResultWhereUniqueInput!]
  set: [TextEditorResultWhereUniqueInput!]
  disconnect: [TextEditorResultWhereUniqueInput!]
  update: [TextEditorResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TextEditorResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [TextEditorResultScalarWhereInput!]
  updateMany: [TextEditorResultUpdateManyWithWhereNestedInput!]
}

input TextEditorResultUpdateManyWithoutStudentInput {
  create: [TextEditorResultCreateWithoutStudentInput!]
  delete: [TextEditorResultWhereUniqueInput!]
  connect: [TextEditorResultWhereUniqueInput!]
  set: [TextEditorResultWhereUniqueInput!]
  disconnect: [TextEditorResultWhereUniqueInput!]
  update: [TextEditorResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [TextEditorResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [TextEditorResultScalarWhereInput!]
  updateMany: [TextEditorResultUpdateManyWithWhereNestedInput!]
}

input TextEditorResultUpdateManyWithWhereNestedInput {
  where: TextEditorResultScalarWhereInput!
  data: TextEditorResultUpdateManyDataInput!
}

input TextEditorResultUpdaterevealedInput {
  set: [String!]
}

input TextEditorResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutTextEditorResultsInput
  attempts: Int
  revealed: TextEditorResultUpdaterevealedInput
  lessonID: ID
  textEditor: TextEditorUpdateOneInput
  textEditorID: ID
}

input TextEditorResultUpdateWithoutStudentDataInput {
  attempts: Int
  revealed: TextEditorResultUpdaterevealedInput
  lesson: LessonUpdateOneWithoutTextEditorResultsInput
  lessonID: ID
  textEditor: TextEditorUpdateOneInput
  textEditorID: ID
}

input TextEditorResultUpdateWithWhereUniqueWithoutLessonInput {
  where: TextEditorResultWhereUniqueInput!
  data: TextEditorResultUpdateWithoutLessonDataInput!
}

input TextEditorResultUpdateWithWhereUniqueWithoutStudentInput {
  where: TextEditorResultWhereUniqueInput!
  data: TextEditorResultUpdateWithoutStudentDataInput!
}

input TextEditorResultUpsertWithWhereUniqueWithoutLessonInput {
  where: TextEditorResultWhereUniqueInput!
  update: TextEditorResultUpdateWithoutLessonDataInput!
  create: TextEditorResultCreateWithoutLessonInput!
}

input TextEditorResultUpsertWithWhereUniqueWithoutStudentInput {
  where: TextEditorResultWhereUniqueInput!
  update: TextEditorResultUpdateWithoutStudentDataInput!
  create: TextEditorResultCreateWithoutStudentInput!
}

input TextEditorResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  textEditor: TextEditorWhereInput
  textEditorID: ID
  textEditorID_not: ID
  textEditorID_in: [ID!]
  textEditorID_not_in: [ID!]
  textEditorID_lt: ID
  textEditorID_lte: ID
  textEditorID_gt: ID
  textEditorID_gte: ID
  textEditorID_contains: ID
  textEditorID_not_contains: ID
  textEditorID_starts_with: ID
  textEditorID_not_starts_with: ID
  textEditorID_ends_with: ID
  textEditorID_not_ends_with: ID
  AND: [TextEditorResultWhereInput!]
  OR: [TextEditorResultWhereInput!]
  NOT: [TextEditorResultWhereInput!]
}

input TextEditorResultWhereUniqueInput {
  id: ID
}

input TextEditorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  totalMistakes: Int
  totalMistakes_not: Int
  totalMistakes_in: [Int!]
  totalMistakes_not_in: [Int!]
  totalMistakes_lt: Int
  totalMistakes_lte: Int
  totalMistakes_gt: Int
  totalMistakes_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextEditorScalarWhereInput!]
  OR: [TextEditorScalarWhereInput!]
  NOT: [TextEditorScalarWhereInput!]
}

type TextEditorSubscriptionPayload {
  mutation: MutationType!
  node: TextEditor
  updatedFields: [String!]
  previousValues: TextEditorPreviousValues
}

input TextEditorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TextEditorWhereInput
  AND: [TextEditorSubscriptionWhereInput!]
  OR: [TextEditorSubscriptionWhereInput!]
  NOT: [TextEditorSubscriptionWhereInput!]
}

input TextEditorUpdateDataInput {
  name: String
  text: String
  totalMistakes: Int
  user: UserUpdateOneRequiredWithoutTextEditorInput
  lesson: LessonUpdateOneRequiredWithoutTexteditorsInput
  lessonID: ID
}

input TextEditorUpdateInput {
  name: String
  text: String
  totalMistakes: Int
  user: UserUpdateOneRequiredWithoutTextEditorInput
  lesson: LessonUpdateOneRequiredWithoutTexteditorsInput
  lessonID: ID
}

input TextEditorUpdateManyDataInput {
  name: String
  text: String
  totalMistakes: Int
  lessonID: ID
}

input TextEditorUpdateManyMutationInput {
  name: String
  text: String
  totalMistakes: Int
  lessonID: ID
}

input TextEditorUpdateManyWithoutLessonInput {
  create: [TextEditorCreateWithoutLessonInput!]
  delete: [TextEditorWhereUniqueInput!]
  connect: [TextEditorWhereUniqueInput!]
  set: [TextEditorWhereUniqueInput!]
  disconnect: [TextEditorWhereUniqueInput!]
  update: [TextEditorUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TextEditorUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [TextEditorScalarWhereInput!]
  updateMany: [TextEditorUpdateManyWithWhereNestedInput!]
}

input TextEditorUpdateManyWithoutUserInput {
  create: [TextEditorCreateWithoutUserInput!]
  delete: [TextEditorWhereUniqueInput!]
  connect: [TextEditorWhereUniqueInput!]
  set: [TextEditorWhereUniqueInput!]
  disconnect: [TextEditorWhereUniqueInput!]
  update: [TextEditorUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TextEditorUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TextEditorScalarWhereInput!]
  updateMany: [TextEditorUpdateManyWithWhereNestedInput!]
}

input TextEditorUpdateManyWithWhereNestedInput {
  where: TextEditorScalarWhereInput!
  data: TextEditorUpdateManyDataInput!
}

input TextEditorUpdateOneInput {
  create: TextEditorCreateInput
  update: TextEditorUpdateDataInput
  upsert: TextEditorUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TextEditorWhereUniqueInput
}

input TextEditorUpdateWithoutLessonDataInput {
  name: String
  text: String
  totalMistakes: Int
  user: UserUpdateOneRequiredWithoutTextEditorInput
  lessonID: ID
}

input TextEditorUpdateWithoutUserDataInput {
  name: String
  text: String
  totalMistakes: Int
  lesson: LessonUpdateOneRequiredWithoutTexteditorsInput
  lessonID: ID
}

input TextEditorUpdateWithWhereUniqueWithoutLessonInput {
  where: TextEditorWhereUniqueInput!
  data: TextEditorUpdateWithoutLessonDataInput!
}

input TextEditorUpdateWithWhereUniqueWithoutUserInput {
  where: TextEditorWhereUniqueInput!
  data: TextEditorUpdateWithoutUserDataInput!
}

input TextEditorUpsertNestedInput {
  update: TextEditorUpdateDataInput!
  create: TextEditorCreateInput!
}

input TextEditorUpsertWithWhereUniqueWithoutLessonInput {
  where: TextEditorWhereUniqueInput!
  update: TextEditorUpdateWithoutLessonDataInput!
  create: TextEditorCreateWithoutLessonInput!
}

input TextEditorUpsertWithWhereUniqueWithoutUserInput {
  where: TextEditorWhereUniqueInput!
  update: TextEditorUpdateWithoutUserDataInput!
  create: TextEditorCreateWithoutUserInput!
}

input TextEditorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  totalMistakes: Int
  totalMistakes_not: Int
  totalMistakes_in: [Int!]
  totalMistakes_not_in: [Int!]
  totalMistakes_lt: Int
  totalMistakes_lte: Int
  totalMistakes_gt: Int
  totalMistakes_gte: Int
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextEditorWhereInput!]
  OR: [TextEditorWhereInput!]
  NOT: [TextEditorWhereInput!]
}

input TextEditorWhereUniqueInput {
  id: ID
}

type Uni {
  id: ID!
  title: String!
  teachers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  capacity: Int
  paidMonths: Int
  uniCoursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
}

type UniConnection {
  pageInfo: PageInfo!
  edges: [UniEdge]!
  aggregate: AggregateUni!
}

input UniCreateInput {
  title: String!
  teachers: UserCreateManyWithoutUniInput
  capacity: Int
  paidMonths: Int
  uniCoursePages: CoursePageCreateManyWithoutUniInput
}

input UniCreateOneWithoutTeachersInput {
  create: UniCreateWithoutTeachersInput
  connect: UniWhereUniqueInput
}

input UniCreateOneWithoutUniCoursePagesInput {
  create: UniCreateWithoutUniCoursePagesInput
  connect: UniWhereUniqueInput
}

input UniCreateWithoutTeachersInput {
  title: String!
  capacity: Int
  paidMonths: Int
  uniCoursePages: CoursePageCreateManyWithoutUniInput
}

input UniCreateWithoutUniCoursePagesInput {
  title: String!
  teachers: UserCreateManyWithoutUniInput
  capacity: Int
  paidMonths: Int
}

type UniEdge {
  node: Uni!
  cursor: String!
}

enum UniOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  capacity_ASC
  capacity_DESC
  paidMonths_ASC
  paidMonths_DESC
}

type UniPreviousValues {
  id: ID!
  title: String!
  capacity: Int
  paidMonths: Int
}

type UniSubscriptionPayload {
  mutation: MutationType!
  node: Uni
  updatedFields: [String!]
  previousValues: UniPreviousValues
}

input UniSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UniWhereInput
  AND: [UniSubscriptionWhereInput!]
  OR: [UniSubscriptionWhereInput!]
  NOT: [UniSubscriptionWhereInput!]
}

input UniUpdateInput {
  title: String
  teachers: UserUpdateManyWithoutUniInput
  capacity: Int
  paidMonths: Int
  uniCoursePages: CoursePageUpdateManyWithoutUniInput
}

input UniUpdateManyMutationInput {
  title: String
  capacity: Int
  paidMonths: Int
}

input UniUpdateOneWithoutTeachersInput {
  create: UniCreateWithoutTeachersInput
  update: UniUpdateWithoutTeachersDataInput
  upsert: UniUpsertWithoutTeachersInput
  delete: Boolean
  disconnect: Boolean
  connect: UniWhereUniqueInput
}

input UniUpdateOneWithoutUniCoursePagesInput {
  create: UniCreateWithoutUniCoursePagesInput
  update: UniUpdateWithoutUniCoursePagesDataInput
  upsert: UniUpsertWithoutUniCoursePagesInput
  delete: Boolean
  disconnect: Boolean
  connect: UniWhereUniqueInput
}

input UniUpdateWithoutTeachersDataInput {
  title: String
  capacity: Int
  paidMonths: Int
  uniCoursePages: CoursePageUpdateManyWithoutUniInput
}

input UniUpdateWithoutUniCoursePagesDataInput {
  title: String
  teachers: UserUpdateManyWithoutUniInput
  capacity: Int
  paidMonths: Int
}

input UniUpsertWithoutTeachersInput {
  update: UniUpdateWithoutTeachersDataInput!
  create: UniCreateWithoutTeachersInput!
}

input UniUpsertWithoutUniCoursePagesInput {
  update: UniUpdateWithoutUniCoursePagesDataInput!
  create: UniCreateWithoutUniCoursePagesInput!
}

input UniWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  teachers_every: UserWhereInput
  teachers_some: UserWhereInput
  teachers_none: UserWhereInput
  capacity: Int
  capacity_not: Int
  capacity_in: [Int!]
  capacity_not_in: [Int!]
  capacity_lt: Int
  capacity_lte: Int
  capacity_gt: Int
  capacity_gte: Int
  paidMonths: Int
  paidMonths_not: Int
  paidMonths_in: [Int!]
  paidMonths_not_in: [Int!]
  paidMonths_lt: Int
  paidMonths_lte: Int
  paidMonths_gt: Int
  paidMonths_gte: Int
  uniCoursePages_every: CoursePageWhereInput
  uniCoursePages_some: CoursePageWhereInput
  uniCoursePages_none: CoursePageWhereInput
  AND: [UniWhereInput!]
  OR: [UniWhereInput!]
  NOT: [UniWhereInput!]
}

input UniWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: Uni
  uniID: ID
  careerTrack: CareerTrack
  careerTrackID: ID
  favourites: [ID!]!
  subjects: [ID!]!
  new_subjects(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  sandboxes: [ID!]!
  permissions: [Permission!]!
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  sandboxPages(where: SandboxPageWhereInput, orderBy: SandboxPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPage!]
  sandboxPageGoals(where: SandboxPageGoalWhereInput, orderBy: SandboxPageGoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SandboxPageGoal!]
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  newTests(where: NewTestWhereInput, orderBy: NewTestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NewTest!]
  quizes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  lessonResults(where: LessonResultWhereInput, orderBy: LessonResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LessonResult!]
  testResults(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestResult!]
  quizResults(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizResult!]
  problemResults(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemResult!]
  textEditorResults(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditorResult!]
  constructionResults(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConstructionResult!]
  pointsA(where: PointAWhereInput, orderBy: PointAOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PointA!]
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem!]
  construction(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  textEditor(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor!]
  isFamiliar: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreatefavouritesInput {
  set: [ID!]
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateManyWithoutNew_subjectsInput {
  create: [UserCreateWithoutNew_subjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUniInput {
  create: [UserCreateWithoutUniInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCareerTrackInput {
  create: UserCreateWithoutCareerTrackInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConstructionInput {
  create: UserCreateWithoutConstructionInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConstructionResultsInput {
  create: UserCreateWithoutConstructionResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCoursePagesInput {
  create: UserCreateWithoutCoursePagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLessonResultsInput {
  create: UserCreateWithoutLessonResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLessonsInput {
  create: UserCreateWithoutLessonsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNewTestsInput {
  create: UserCreateWithoutNewTestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPointsAInput {
  create: UserCreateWithoutPointsAInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProblemResultsInput {
  create: UserCreateWithoutProblemResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProblemsInput {
  create: UserCreateWithoutProblemsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuizesInput {
  create: UserCreateWithoutQuizesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuizResultsInput {
  create: UserCreateWithoutQuizResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSandboxPageGoalsInput {
  create: UserCreateWithoutSandboxPageGoalsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSandboxPagesInput {
  create: UserCreateWithoutSandboxPagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTestResultsInput {
  create: UserCreateWithoutTestResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTestsInput {
  create: UserCreateWithoutTestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTextEditorInput {
  create: UserCreateWithoutTextEditorInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTextEditorResultsInput {
  create: UserCreateWithoutTextEditorResultsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreatesandboxesInput {
  set: [ID!]
}

input UserCreatesubjectsInput {
  set: [ID!]
}

input UserCreateWithoutCareerTrackInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutConstructionInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutConstructionResultsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutCoursePagesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutLessonResultsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutLessonsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutNew_subjectsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutNewTestsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutOrdersInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutPointsAInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutProblemResultsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutProblemsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutQuizesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutQuizResultsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutSandboxPageGoalsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutSandboxPagesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutTestResultsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutTestsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutTextEditorInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutTextEditorResultsInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserCreateWithoutUniInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uniID: ID
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  sandboxes: UserCreatesandboxesInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  sandboxPages: SandboxPageCreateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  tests: TestCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  pointsA: PointACreateManyWithoutUserInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  status_ASC
  status_DESC
  uniID_ASC
  uniID_DESC
  careerTrackID_ASC
  careerTrackID_DESC
  isFamiliar_ASC
  isFamiliar_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uniID: ID
  careerTrackID: ID
  favourites: [ID!]!
  subjects: [ID!]!
  sandboxes: [ID!]!
  permissions: [Permission!]!
  isFamiliar: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  uniID: ID
  uniID_not: ID
  uniID_in: [ID!]
  uniID_not_in: [ID!]
  uniID_lt: ID
  uniID_lte: ID
  uniID_gt: ID
  uniID_gte: ID
  uniID_contains: ID
  uniID_not_contains: ID
  uniID_starts_with: ID
  uniID_not_starts_with: ID
  uniID_ends_with: ID
  uniID_not_ends_with: ID
  careerTrackID: ID
  careerTrackID_not: ID
  careerTrackID_in: [ID!]
  careerTrackID_not_in: [ID!]
  careerTrackID_lt: ID
  careerTrackID_lte: ID
  careerTrackID_gt: ID
  careerTrackID_gte: ID
  careerTrackID_contains: ID
  careerTrackID_not_contains: ID
  careerTrackID_starts_with: ID
  careerTrackID_not_starts_with: ID
  careerTrackID_ends_with: ID
  careerTrackID_not_ends_with: ID
  isFamiliar: Boolean
  isFamiliar_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdatefavouritesInput {
  set: [ID!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uniID: ID
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  isFamiliar: Boolean
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uniID: ID
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  isFamiliar: Boolean
}

input UserUpdateManyWithoutNew_subjectsInput {
  create: [UserCreateWithoutNew_subjectsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutNew_subjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutNew_subjectsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutUniInput {
  create: [UserCreateWithoutUniInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUniInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUniInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutConstructionInput {
  create: UserCreateWithoutConstructionInput
  update: UserUpdateWithoutConstructionDataInput
  upsert: UserUpsertWithoutConstructionInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutConstructionResultsInput {
  create: UserCreateWithoutConstructionResultsInput
  update: UserUpdateWithoutConstructionResultsDataInput
  upsert: UserUpsertWithoutConstructionResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCoursePagesInput {
  create: UserCreateWithoutCoursePagesInput
  update: UserUpdateWithoutCoursePagesDataInput
  upsert: UserUpsertWithoutCoursePagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLessonResultsInput {
  create: UserCreateWithoutLessonResultsInput
  update: UserUpdateWithoutLessonResultsDataInput
  upsert: UserUpsertWithoutLessonResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLessonsInput {
  create: UserCreateWithoutLessonsInput
  update: UserUpdateWithoutLessonsDataInput
  upsert: UserUpsertWithoutLessonsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutNewTestsInput {
  create: UserCreateWithoutNewTestsInput
  update: UserUpdateWithoutNewTestsDataInput
  upsert: UserUpsertWithoutNewTestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPointsAInput {
  create: UserCreateWithoutPointsAInput
  update: UserUpdateWithoutPointsADataInput
  upsert: UserUpsertWithoutPointsAInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProblemResultsInput {
  create: UserCreateWithoutProblemResultsInput
  update: UserUpdateWithoutProblemResultsDataInput
  upsert: UserUpsertWithoutProblemResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProblemsInput {
  create: UserCreateWithoutProblemsInput
  update: UserUpdateWithoutProblemsDataInput
  upsert: UserUpsertWithoutProblemsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutQuizesInput {
  create: UserCreateWithoutQuizesInput
  update: UserUpdateWithoutQuizesDataInput
  upsert: UserUpsertWithoutQuizesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutQuizResultsInput {
  create: UserCreateWithoutQuizResultsInput
  update: UserUpdateWithoutQuizResultsDataInput
  upsert: UserUpsertWithoutQuizResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSandboxPageGoalsInput {
  create: UserCreateWithoutSandboxPageGoalsInput
  update: UserUpdateWithoutSandboxPageGoalsDataInput
  upsert: UserUpsertWithoutSandboxPageGoalsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSandboxPagesInput {
  create: UserCreateWithoutSandboxPagesInput
  update: UserUpdateWithoutSandboxPagesDataInput
  upsert: UserUpsertWithoutSandboxPagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTestResultsInput {
  create: UserCreateWithoutTestResultsInput
  update: UserUpdateWithoutTestResultsDataInput
  upsert: UserUpsertWithoutTestResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTestsInput {
  create: UserCreateWithoutTestsInput
  update: UserUpdateWithoutTestsDataInput
  upsert: UserUpsertWithoutTestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTextEditorInput {
  create: UserCreateWithoutTextEditorInput
  update: UserUpdateWithoutTextEditorDataInput
  upsert: UserUpsertWithoutTextEditorInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTextEditorResultsInput {
  create: UserCreateWithoutTextEditorResultsInput
  update: UserUpdateWithoutTextEditorResultsDataInput
  upsert: UserUpsertWithoutTextEditorResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCareerTrackInput {
  create: UserCreateWithoutCareerTrackInput
  update: UserUpdateWithoutCareerTrackDataInput
  upsert: UserUpsertWithoutCareerTrackInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdatesandboxesInput {
  set: [ID!]
}

input UserUpdatesubjectsInput {
  set: [ID!]
}

input UserUpdateWithoutCareerTrackDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutConstructionDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutConstructionResultsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutCoursePagesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutLessonResultsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutLessonsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutNew_subjectsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutNewTestsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutOrdersDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutPointsADataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutProblemResultsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutProblemsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutQuizesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutQuizResultsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutSandboxPageGoalsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutSandboxPagesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutTestResultsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutTestsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutTextEditorDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutTextEditorResultsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithoutUniDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  status: Status
  uniID: ID
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  sandboxes: UserUpdatesandboxesInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  sandboxPages: SandboxPageUpdateManyWithoutUserInput
  sandboxPageGoals: SandboxPageGoalUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  tests: TestUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  pointsA: PointAUpdateManyWithoutUserInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
}

input UserUpdateWithWhereUniqueWithoutNew_subjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutNew_subjectsDataInput!
}

input UserUpdateWithWhereUniqueWithoutUniInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUniDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCareerTrackInput {
  update: UserUpdateWithoutCareerTrackDataInput!
  create: UserCreateWithoutCareerTrackInput!
}

input UserUpsertWithoutConstructionInput {
  update: UserUpdateWithoutConstructionDataInput!
  create: UserCreateWithoutConstructionInput!
}

input UserUpsertWithoutConstructionResultsInput {
  update: UserUpdateWithoutConstructionResultsDataInput!
  create: UserCreateWithoutConstructionResultsInput!
}

input UserUpsertWithoutCoursePagesInput {
  update: UserUpdateWithoutCoursePagesDataInput!
  create: UserCreateWithoutCoursePagesInput!
}

input UserUpsertWithoutLessonResultsInput {
  update: UserUpdateWithoutLessonResultsDataInput!
  create: UserCreateWithoutLessonResultsInput!
}

input UserUpsertWithoutLessonsInput {
  update: UserUpdateWithoutLessonsDataInput!
  create: UserCreateWithoutLessonsInput!
}

input UserUpsertWithoutNewTestsInput {
  update: UserUpdateWithoutNewTestsDataInput!
  create: UserCreateWithoutNewTestsInput!
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput!
  create: UserCreateWithoutOrdersInput!
}

input UserUpsertWithoutPointsAInput {
  update: UserUpdateWithoutPointsADataInput!
  create: UserCreateWithoutPointsAInput!
}

input UserUpsertWithoutProblemResultsInput {
  update: UserUpdateWithoutProblemResultsDataInput!
  create: UserCreateWithoutProblemResultsInput!
}

input UserUpsertWithoutProblemsInput {
  update: UserUpdateWithoutProblemsDataInput!
  create: UserCreateWithoutProblemsInput!
}

input UserUpsertWithoutQuizesInput {
  update: UserUpdateWithoutQuizesDataInput!
  create: UserCreateWithoutQuizesInput!
}

input UserUpsertWithoutQuizResultsInput {
  update: UserUpdateWithoutQuizResultsDataInput!
  create: UserCreateWithoutQuizResultsInput!
}

input UserUpsertWithoutSandboxPageGoalsInput {
  update: UserUpdateWithoutSandboxPageGoalsDataInput!
  create: UserCreateWithoutSandboxPageGoalsInput!
}

input UserUpsertWithoutSandboxPagesInput {
  update: UserUpdateWithoutSandboxPagesDataInput!
  create: UserCreateWithoutSandboxPagesInput!
}

input UserUpsertWithoutTestResultsInput {
  update: UserUpdateWithoutTestResultsDataInput!
  create: UserCreateWithoutTestResultsInput!
}

input UserUpsertWithoutTestsInput {
  update: UserUpdateWithoutTestsDataInput!
  create: UserCreateWithoutTestsInput!
}

input UserUpsertWithoutTextEditorInput {
  update: UserUpdateWithoutTextEditorDataInput!
  create: UserCreateWithoutTextEditorInput!
}

input UserUpsertWithoutTextEditorResultsInput {
  update: UserUpdateWithoutTextEditorResultsDataInput!
  create: UserCreateWithoutTextEditorResultsInput!
}

input UserUpsertWithWhereUniqueWithoutNew_subjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutNew_subjectsDataInput!
  create: UserCreateWithoutNew_subjectsInput!
}

input UserUpsertWithWhereUniqueWithoutUniInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUniDataInput!
  create: UserCreateWithoutUniInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  uni: UniWhereInput
  uniID: ID
  uniID_not: ID
  uniID_in: [ID!]
  uniID_not_in: [ID!]
  uniID_lt: ID
  uniID_lte: ID
  uniID_gt: ID
  uniID_gte: ID
  uniID_contains: ID
  uniID_not_contains: ID
  uniID_starts_with: ID
  uniID_not_starts_with: ID
  uniID_ends_with: ID
  uniID_not_ends_with: ID
  careerTrack: CareerTrackWhereInput
  careerTrackID: ID
  careerTrackID_not: ID
  careerTrackID_in: [ID!]
  careerTrackID_not_in: [ID!]
  careerTrackID_lt: ID
  careerTrackID_lte: ID
  careerTrackID_gt: ID
  careerTrackID_gte: ID
  careerTrackID_contains: ID
  careerTrackID_not_contains: ID
  careerTrackID_starts_with: ID
  careerTrackID_not_starts_with: ID
  careerTrackID_ends_with: ID
  careerTrackID_not_ends_with: ID
  new_subjects_every: CoursePageWhereInput
  new_subjects_some: CoursePageWhereInput
  new_subjects_none: CoursePageWhereInput
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  sandboxPages_every: SandboxPageWhereInput
  sandboxPages_some: SandboxPageWhereInput
  sandboxPages_none: SandboxPageWhereInput
  sandboxPageGoals_every: SandboxPageGoalWhereInput
  sandboxPageGoals_some: SandboxPageGoalWhereInput
  sandboxPageGoals_none: SandboxPageGoalWhereInput
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  tests_every: TestWhereInput
  tests_some: TestWhereInput
  tests_none: TestWhereInput
  newTests_every: NewTestWhereInput
  newTests_some: NewTestWhereInput
  newTests_none: NewTestWhereInput
  quizes_every: QuizWhereInput
  quizes_some: QuizWhereInput
  quizes_none: QuizWhereInput
  lessonResults_every: LessonResultWhereInput
  lessonResults_some: LessonResultWhereInput
  lessonResults_none: LessonResultWhereInput
  testResults_every: TestResultWhereInput
  testResults_some: TestResultWhereInput
  testResults_none: TestResultWhereInput
  quizResults_every: QuizResultWhereInput
  quizResults_some: QuizResultWhereInput
  quizResults_none: QuizResultWhereInput
  problemResults_every: ProblemResultWhereInput
  problemResults_some: ProblemResultWhereInput
  problemResults_none: ProblemResultWhereInput
  textEditorResults_every: TextEditorResultWhereInput
  textEditorResults_some: TextEditorResultWhereInput
  textEditorResults_none: TextEditorResultWhereInput
  constructionResults_every: ConstructionResultWhereInput
  constructionResults_some: ConstructionResultWhereInput
  constructionResults_none: ConstructionResultWhereInput
  pointsA_every: PointAWhereInput
  pointsA_some: PointAWhereInput
  pointsA_none: PointAWhereInput
  problems_every: ProblemWhereInput
  problems_some: ProblemWhereInput
  problems_none: ProblemWhereInput
  construction_every: ConstructionWhereInput
  construction_some: ConstructionWhereInput
  construction_none: ConstructionWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  textEditor_every: TextEditorWhereInput
  textEditor_some: TextEditorWhereInput
  textEditor_none: TextEditorWhereInput
  isFamiliar: Boolean
  isFamiliar_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
