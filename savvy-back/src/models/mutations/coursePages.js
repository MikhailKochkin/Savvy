const {
  list,
  intArg,
  floatArg,
  booleanArg,
  mutationType,
  stringArg,
  nonNull,
  arg,
} = require("nexus");
const postmark = require("postmark");

const NextWeekEmail = require("../../emails/nextWeek");

const client = new postmark.ServerClient(process.env.MAIL_TOKEN);

function courseMutations(t) {
  t.field("createCoursePage", {
    type: "CoursePage",
    args: {
      title: stringArg(),
      description: stringArg(),
      image: stringArg(),
      audience: stringArg(),
      result: stringArg(),
      courseType: stringArg(),
      published: booleanArg(),
    },
    resolve: async (_, args, ctx) => {
      const coursePage = await ctx.prisma.coursePage.create({
        data: {
          user: {
            connect: {
              id: ctx.res.req.userId,
            },
          },
          ...args,
        },
      });
      return coursePage;
    },
  });
  t.field("updateCoursePage", {
    type: "CoursePage",
    args: {
      id: stringArg(),
      title: stringArg(),
      description: stringArg(),
      audience: stringArg(),
      result: stringArg(),
      promotionId: stringArg(),
      price: intArg(),
      prices: arg({
        type: "Prices",
      }),
      modules: arg({
        type: "Modules",
      }),
      discountPrice: intArg(),
      currency: stringArg(),
      news: stringArg(),
      authors: stringArg(),
      promocode: arg({
        type: "PromocodeList",
      }),
      tariffs: stringArg(),
      methods: stringArg(),
      image: stringArg(),
      video: stringArg(),
      header: list(stringArg()),
      subheader: list(stringArg()),
      nextStart: arg({
        type: "DateTime",
      }),
      uptodateAt: arg({
        type: "DateTime",
      }),
      reviews: arg({
        type: "ReviewsListInput",
      }),
      goals: list(stringArg()),
    },
    resolve: async (_, args, ctx) => {
      const updates = { ...args };
      delete updates.id;
      const header = args.header;
      const subheader = args.subheader;
      const goals = args.goals;
      delete updates.header;
      delete updates.subheader;
      delete updates.goals;

      const updatedCoursePage = await ctx.prisma.coursePage.update({
        data: {
          header: {
            set: [...header],
          },
          subheader: {
            set: [...subheader],
          },
          goals: {
            set: [...goals],
          },
          ...updates,
        },
        where: {
          id: args.id,
        },
      });
      return updatedCoursePage;
    },
  });
  t.field("deleteCoursePage", {
    type: "CoursePage",
    args: {
      id: stringArg(),
    },
    resolve: async (_, args, ctx) => {
      const where = { id: args.id };
      const lesson = await ctx.prisma.coursePage.findUnique(
        { where },
        `{ id }`
      );
      //3. Delete it
      return ctx.prisma.coursePage.delete({
        where: {
          id: args.id,
        },
      });
    },
  });
  t.field("createCourseVisit", {
    type: "CourseVisit",
    args: {
      visitsNumber: intArg(),
      coursePageId: stringArg(),
      studentId: stringArg(),
    },
    resolve: async (_, { visitsNumber, coursePageId, studentId }, ctx) => {
      const courseVisit = await ctx.prisma.courseVisit.create({
        data: {
          coursePage: {
            connect: {
              id: coursePageId,
            },
          },
          student: {
            connect: {
              id: studentId,
            },
          },
          visitsNumber,
        },
      });
      return courseVisit;
    },
  });
  t.field("updateCourseVisit", {
    type: "CourseVisit",
    args: {
      visitsNumber: intArg(),
      id: stringArg(),
    },
    resolve: async (_, { visitsNumber, id }, ctx) => {
      const courseVisit = await ctx.prisma.courseVisit.update({
        where: { id },
        data: { visitsNumber },
      });
      return courseVisit;
    },
  });
  t.field("publishCourse", {
    type: "CoursePage",
    args: {
      id: stringArg(),
      published: booleanArg(),
    },
    resolve: async (_, args, ctx) => {
      const published = await ctx.prisma.coursePage.update({
        data: { published: args.published },
        where: {
          id: args.id,
        },
      });
      return published;
    },
  });
  t.field("remind", {
    type: "CourseVisit",
    args: {
      id: stringArg(),
      reminders: list(
        arg({
          type: "DateTime",
        })
      ),
    },
    resolve: async (_, { id, reminders }, ctx) => {
      // const updateCourseVisit = await ctx.prisma.courseVisit.update({
      //   where: { id },
      //   data: { reminders: { set: reminders } },
      // });

      // const users = await ctx.prisma.user.findMany({
      //   where: { courseVisits: { some: { id: { equals: id } } } },
      // });

      const courseVisits = await ctx.prisma.courseVisit.findMany(
        {
          where: { id: id },
          include: { coursePage: true },
        },
        `{ id, coursePage {id, title} }`
      );

      // const Reminder = await client.sendEmail({
      //   From: "Mikhail@besavvy.app",
      //   To: users[0].email,
      //   Subject: "ü•á –¢–æ–ª—å–∫–æ 4% –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å. –ë—É–¥–µ—à—å —Å—Ä–µ–¥–∏ –Ω–∏—Ö?",
      //   HtmlBody: ReminderEmail.ReminderEmail(
      //     users[0].name,
      //     courseVisits[0].coursePage.title,
      //     courseVisits[0].coursePage.id
      //   ),
      // });

      return updateCourseVisit;
    },
  });
  t.field("sendEmailToStudent", {
    type: "CourseVisit",
    args: {
      id: stringArg(),
      comment: stringArg(),
      info: arg({
        type: "EmailInfo", // name should match the name you provided
      }),
      reminders: list(
        arg({
          type: "DateTime",
        })
      ),
    },
    resolve: async (_, { id, reminders, comment, info }, ctx) => {
      const getNoun = (number, one, two, five) => {
        let n = Math.abs(number);
        n %= 100;
        if (n >= 5 && n <= 20) {
          return five;
        }
        n %= 10;
        if (n === 1) {
          return one;
        }
        if (n >= 2 && n <= 4) {
          return two;
        }
        return five;
      };

      const left_lessons = info.lesResultsList.lesResults.filter(
        (l) => l.progress / l.lesson_size < 0.8
      );

      const updateCourseVisit = await ctx.prisma.courseVisit.update({
        where: { id },
        data: { reminders: { set: reminders } },
      });

      const users = await ctx.prisma.user.findMany({
        where: { courseVisits: { some: { id: { equals: id } } } },
      });

      const courseVisits = await ctx.prisma.courseVisit.findMany(
        {
          where: { id: id },
          include: { coursePage: true },
        },
        `{ id, coursePage {id, title, lessons {id, lessonResults {id, student {id}}}} }`
      );
      if (comment === "hello") {
        const NextWeek = await client.sendEmail({
          From: "Mikhail@besavvy.app",
          To: users[0].email,
          Subject: "–ü—Ä–∏–≤–µ—Ç –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ BeSavvy üòÅ",
          HtmlBody: NextWeekEmail.NextWeekEmail(
            users[0].name,
            `<p>–≠—Ç–æ –ú–∏—à–∞, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BeSavvy.</p>
              <p>–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞ "${courseVisits[0].coursePage.title}".</p>
              <p>–ì–ª–∞–≤–Ω–æ–µ, –∑–∞–ø–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –Ω–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É. –Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª—é–±—ã–º —É—á–µ–±–Ω—ã–º –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. </p>
              <p>–°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è, –Ω–∞–ø–∏—Å–∞–≤ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –¢–ì –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
              <p><a href="https://t.me/besavvylawyer" target="_blank">–í–æ—Ç —Å—Å—ã–ª–∫–∞</a> –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.</p>
              `,
            courseVisits[0].coursePage.title,
            courseVisits[0].coursePage.id
          ),
        });
      } else if (comment === "problem") {
        const NextWeek = await client.sendEmail({
          From: "Mikhail@besavvy.app",
          To: users[0].email,
          Subject:
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –Ω–∞ –∫—É—Ä—Å–µ, –ø–æ–º–æ—â—å –æ—Ç BeSavvy –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º üñêüèª",
          HtmlBody: NextWeekEmail.NextWeekEmail(
            users[0].name,
            `<p>–≠—Ç–æ –ú–∏—à–∞, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BeSavvy.</p>
              <p>–¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å –Ω–∞—à –∫—É—Ä—Å "${courseVisits[0].coursePage.title}". –Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ —É —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –¥–æ –∫–æ–Ω—Ü–∞. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —è –º–æ–≥—É —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å? </p>
              <p>–î–∞–∂–µ –µ—Å–ª–∏ —É —Ç–µ–±—è –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –Ω–µ –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, —ç—Ç–æ –Ω–µ –ø–æ–≤–æ–¥ –±—Ä–æ—Å–∞—Ç—å. –ú—ã –≤–∑—Ä–æ—Å–ª—ã–µ –ª—é–¥–∏, –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –±—ã–≤–∞—é—Ç –∑–∞–≤–∞–ª—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –≤ —Å–µ–º–µ–π–Ω–æ–π –∂–∏–∑–Ω–∏. –ì–ª–∞–≤–Ω–æ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è. –ò —è –±—É–¥—É —Ä–∞–¥–∞ –≤–Ω–æ–≤—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–±—è –≤ –∫—É—Ä—Å –¥–µ–ª–∞ –∏ –Ω–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–Ω—É—é —Ç–æ—á–∫—É. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ)</p>
              `,
            courseVisits[0].coursePage.title,
            courseVisits[0].coursePage.id
          ),
        });
      } else if (comment === "motivation") {
        const NextWeek = await client.sendEmail({
          From: "Mikhail@besavvy.app",
          To: users[0].email,
          Subject: "–ï—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å –∫—É—Ä—Å –Ω–∞ BeSavvy ‚úÖ",
          HtmlBody: NextWeekEmail.NextWeekEmail(
            users[0].name,
            `<p>–≠—Ç–æ –ú–∏—à–∞, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BeSavvy.</p>
  
      <p>–ü–∏—à—É, —á—Ç–æ–±—ã –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ –∫—É—Ä—Å—É ‚Äú${
        info.course_name
      }‚Äù</p>
  
      <p>–ú—ã —Å —Ç–æ–±–æ–π –ø—Ä–æ—à–ª–∏ —É–∂–µ <b>${info.completed_lessons_number}</b> –∏–∑ <b>${
              info.lessons_number
            } ${getNoun(info.lessons_number, "—É—Ä–æ–∫", "—É—Ä–æ–∫–∞", "—É—Ä–æ–∫–æ–≤")}</b>.
  
                    ${
                      [...left_lessons].length == 0
                        ? "<p></p>"
                        : `
                    <p>–ü—Ä–∞–≤–¥–∞, –µ—â–µ –Ω–µ ${
                      [...left_lessons].length <= 1
                        ? "–∑–∞–∫–æ–Ω—á–µ–Ω —É—Ä–æ–∫:"
                        : "–∑–∞–∫–æ–Ω—á–µ–Ω—ã —É—Ä–æ–∫–∏: "
                    }</p><br> ${[...left_lessons].map(
                            (l) =>
                              `<li>
                          ${l.lesson_number}.
                          ${" "}
                          ${l.lesson_name}
                        </li>`
                          )}<p>–ü–æ—Å–º–æ—Ç—Ä–∏—à—å ${
                            [...left_lessons].length <= 1 ? "–µ–≥–æ" : "–∏—Ö"
                          }?</p>
                    </div>`
                    }
  
      <p>–ù–∞–º –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ </b>${
        info.lessons_number - info.completed_lessons_number
      }  ${getNoun(
              info.lessons_number - info.completed_lessons_number,
              "—É—Ä–æ–∫",
              "—É—Ä–æ–∫–∞",
              "—É—Ä–æ–∫–æ–≤"
            )}</b>. –î—É–º–∞—é, —á—Ç–æ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ <b>${
              parseInt(
                (info.lessons_number - info.completed_lessons_number) / 3
              ) > 0
                ? parseInt(
                    (info.lessons_number - info.completed_lessons_number) / 3
                  )
                : 1
            } ${getNoun(
              parseInt(
                (info.lessons_number - info.completed_lessons_number) / 3
              ) > 0
                ? parseInt(
                    (info.lessons_number - info.completed_lessons_number) / 3
                  )
                : 1,
              "–Ω–µ–¥–µ–ª—è",
              "–Ω–µ–¥–µ–ª–∏",
              "–Ω–µ–¥–µ–ª—å"
            )}</b>, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫—É—Ä—Å.</p>
  
      <p>–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –≤ –Ω–∞—à –î–∏—Å–∫–æ—Ä–¥. –£ —Ç–µ–±—è –∂–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞?</p>`,
            courseVisits[0].coursePage.title,
            courseVisits[0].coursePage.id
          ),
        });
      }
      return updateCourseVisit;
    },
  });
  t.field("changeCourseAccessControl", {
    type: "CourseAccessControl",
    args: {
      email: stringArg(),
      coursePageId: stringArg(),
      role: arg({ type: "CourseRole" }),
      changeScope: arg({ type: "ChangeScope" }),
      areAllLessonsAccessible: booleanArg(),
      accessibleLessons: list(stringArg()),
    },
    resolve: async (_, args, ctx) => {
      const coursePageId = args.coursePageId;
      delete args.coursePageId;
      const NewAuthor = await ctx.prisma.user.findUnique({
        where: {
          email: args.email,
        },
        select: {
          id: true,
        },
      });
      const findExistingControl =
        await ctx.prisma.courseAccessControl.findFirst({
          where: {
            user: {
              id: NewAuthor.id, //NewAuthor.id,
            },
            coursePage: {
              id: coursePageId,
            },
          },
        });
      if (!findExistingControl) {
        let new_control = await ctx.prisma.courseAccessControl.create({
          data: {
            user: {
              connect: { id: NewAuthor.id },
            },
            coursePage: {
              connect: { id: coursePageId },
            },
            role: args.role,
            changeScope: args.changeScope,
            areAllLessonsAccessible: args.areAllLessonsAccessible,
            accessibleLessons: { set: args.accessibleLessons },
          },
          select: {
            id: true,
            accessibleLessons: true,
            areAllLessonsAccessible: true,
            changeScope: true,
            role: true,
            user: {
              select: {
                id: true,
                name: true,
                surname: true,
                email: true,
              },
            },
          },
        });
        return new_control;
      } else {
        let updated_control = await ctx.prisma.courseAccessControl.update({
          where: {
            id: findExistingControl.id,
          },
          select: {
            id: true,
            accessibleLessons: true,
            areAllLessonsAccessible: true,
            changeScope: true,
            role: true,
            user: {
              select: {
                id: true,
                name: true,
                surname: true,
                email: true,
              },
            },
          },
          data: {
            role: args.role,
            changeScope: args.changeScope,
            areAllLessonsAccessible: args.areAllLessonsAccessible,
            accessibleLessons: { set: args.accessibleLessons },
          },
        });
        return updated_control;
      }
    },
  });
  t.field("deleteCourseAccessControl", {
    type: "CourseAccessControl",
    args: {
      id: stringArg(),
    },
    resolve: async (_, args, ctx) => {
      return await ctx.prisma.courseAccessControl.delete({
        where: { id: args.id },
      });
    },
  });
  t.field("createCharacter", {
    type: "Character",
    args: {
      name: stringArg({ description: "Name of the character" }),
      image: stringArg({ description: "Image URL of the character" }),
      description: stringArg({
        description: "Short description of the character",
      }),
      coursePageId: stringArg({
        description: "Unique identifier of the associated course page",
      }),
    },
    resolve: async (_, args, ctx) => {
      return await ctx.prisma.character.create({
        data: {
          name: args.name,
          image: args.image,
          description: args.description,
          coursePageId: args.coursePageId,
        },
      });
    },
  });

  t.field("updateCharacter", {
    type: "Character",
    args: {
      id: stringArg({ description: "Unique identifier of the character" }),
      name: stringArg({ description: "Name of the character" }),
      image: stringArg({ description: "Image URL of the character" }),
      description: stringArg({
        description: "Short description of the character",
      }),
    },
    resolve: async (_, { id, ...updates }, ctx) => {
      return await ctx.prisma.character.update({
        where: { id },
        data: updates,
      });
    },
  });

  t.field("deleteCharacter", {
    type: "Character",
    args: {
      id: stringArg({ description: "Unique identifier of the character" }),
    },
    resolve: async (_, args, ctx) => {
      return await ctx.prisma.character.delete({
        where: { id: args.id },
      });
    },
  });
}

module.exports = { courseMutations };
