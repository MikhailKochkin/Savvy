generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Application {
  id            String     @id @default(cuid())
  applicantId   String     @db.VarChar(25)
  applicantName String
  message       String?
  coursePageID  String     @db.VarChar(25)
  updatedAt     DateTime   @updatedAt
  createdAt     DateTime   @default(now())
  coursePageId  String     @db.VarChar(30)
  promocode     String?
  coursePage    CoursePage @relation(fields: [coursePageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model BotDialogue {
  id            String   @id @default(cuid())
  journey       String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime   @updatedAt
  rating        Int?
  source        String?
}

model BusinessClient {
  id                    String      @id @default(cuid())
  email                 String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime   @updatedAt
  name                  String?
  number                String?
  communication_medium  String?
  type                  String?
  comment               String?
  tags                  String[]
  coursePageId          String?
  surname               String?
  country               String?
  source                String?
  communication_history Json?
  sales_cycle           Json?
  coursePage            CoursePage? @relation(fields: [coursePageId], references: [id])
}

model CareerTrack {
  id              String            @id @default(cuid())
  name            String
  updatedAt     DateTime   @updatedAt
  createdAt       DateTime          @default(now())
  img             String?
  careerTrackUnit CareerTrackUnit[]
  user            User?
  coursePage      CoursePage[]      @relation("CoursePageForCareer")
}

model CareerTrackUnit {
  id            String       @id @default(cuid())
  title         String
  number        Int?
  updatedAt     DateTime   @updatedAt
  createdAt     DateTime     @default(now())
  img           String?
  topics        String[]
  articles      String[]
  careerTrackId String       @db.VarChar(30)
  careerTrack   CareerTrack  @relation(fields: [careerTrackId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coursePage    CoursePage[] @relation("CareerTrackUnitToCoursePage")
}


model Certificate {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  studentId    String
  coursePageId String
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id], onDelete: Cascade)
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model ChallengeResult {
  id        String   @id @default(cuid()) @db.VarChar(30)
  correct   Int?
  wrong     Int?
  time      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String   @db.VarChar(30)
  lessonId  String   @db.VarChar(30)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Chat {
  id          String   @id @default(cuid())
  name        String?
  messages    Json?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  userId      String
  lessonId    String
  complexity  Int?     @default(1)
  link_clicks Int?     @default(0)
  isSecret    Boolean? @default(false)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Clause {
  id         String   @id @default(cuid()) @db.VarChar(30)
  number     Int
  commentary String
  sample     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  keywords   String[]
  userId     String   @db.VarChar(30)
  documentId String   @db.VarChar(30)
  document   Document @relation(fields: [documentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CommunityMember {
  id           String   @id @default(cuid())
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  surname      String?
  number       String?
  subscription String?
  source       String?
}

model Company {
  id         String       @id @default(cuid()) @db.VarChar(30)
  name       String
  paidMonths Int?         @default(0)
  updatedAt  DateTime     @updatedAt
  createdAt  DateTime     @default(now())
  coursePage CoursePage[]
  user       User[]
}

model ConfUser {
  id          String   @id @default(cuid())
  email       String
  name        String?
  surname     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  conf_number Int?
}

model Construction {
  id                  String               @id @default(cuid()) @db.VarChar(30)
  name                String
  goal                String?
  lessonID            String               @db.VarChar(30)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  hint                String?
  type                String
  variants            String[]
  answer              String[]
  userId              String               @db.VarChar(30)
  lessonId            String               @db.VarChar(30)
  complexity          Int?                 @default(1)
  text                String?
  hasText             Boolean              @default(false)
  columnsNum          Int?
  elements            Json?
  lesson              Lesson               @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  constructionResults ConstructionResult[]
}

model ConstructionResult {
  id             String        @id @default(cuid()) @db.VarChar(30)
  answer         String?
  attempts       Int?
  constructionID String?       @db.VarChar(30)
  lessonID       String?       @db.VarChar(30)
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  inputs         String[]
  elements       Json?
  answers        Json?
  studentId      String        @db.VarChar(30)
  lessonId       String?       @db.VarChar(30)
  constructionId String?       @db.VarChar(30)
  construction   Construction? @relation(fields: [constructionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lesson         Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student        User          @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model CoursePage {
  id                String           @id @default(cuid()) @db.VarChar(30)
  title             String
  description       String
  image             String
  courseType        CourseType?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  price             Int?
  discountPrice     Int?
  numInCareerTrack  Int?
  published         Boolean?         @default(false)
  uniID             String?          @db.VarChar(30)
  news              String?          @default("Добро пожаловать на курс! Проходите уроки, выполняйте задания и выполняйте финальное задание!")
  audience          String?
  result            String?
  tariffs           String?
  methods           String?
  openLesson        String?          @db.VarChar(25)
  video             String?
  companyId         String?          @db.VarChar(30)
  banner            String?
  batch             String?
  reviews           Json?
  weeks             Int?
  subscriptionPrice Int?
  subscription      Boolean?         @default(false)
  tags              String[]
  students          String[]
  new_students      User[]           @relation("UserSubjects")
  userId            String           @db.VarChar(30)
  uniId             String?          @db.VarChar(30)
  examQuestionId    String?          @unique(map: "CoursePage.examQuestionId_unique") @db.VarChar(30)
  promocode         Json?
  header            String[]
  subheader         String[]
  nextStart         DateTime?
  uptodateAt        DateTime?
  goals             String[]
  currency          String?          @default("ruble")
  installments      Int?
  view              PageView         @default(COURSE)
  countries         String[]
  prices            Json?
  modules           Json?
  promotionId       String?
  applications      Application[]
  businessClients   BusinessClient[]
  certificates      Certificate[]
  company           Company?         @relation(fields: [companyId], references: [id], onUpdate: NoAction, map: "CoursePage_company_fkey")
  examQuestion      ExamQuestion?    @relation(fields: [examQuestionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uni               Uni?             @relation(fields: [uniId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User             @relation("CoursePage_userIdToUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseVisits      CourseVisit[]
  emailReminder     EmailReminder[]
  lawrdles          Lawrdle[]
  lessons           Lesson[]
  orders            Order[]
  pointA            PointA[]
  pointATest        PointATest[]
  posts             Post[]
  programs          Program[]         @relation("CoursePageToProgram")
  authors           User[]            @relation("AuthorsCoursePage")
  careerTrackUnit   CareerTrackUnit[] @relation("CareerTrackUnitToCoursePage")
  careerTrack       CareerTrack[]     @relation("CoursePageForCareer")
}

model CourseVisit {
  id           String     @id @default(cuid()) @db.VarChar(30)
  visitsNumber Int?       @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  finish       DateTime?
  reminders    DateTime[] @db.Timestamp
  studentId    String     @db.VarChar(30)
  coursePageId String     @db.VarChar(30)
  comment      String?
  info         Json?
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student      User       @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Document {
  id              String           @id @default(cuid()) @db.VarChar(30)
  title           String
  name            String?
  goal            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String           @db.VarChar(30)
  lessonId        String           @db.VarChar(30)
  complexity      Int?             @default(1)
  clauses         Clause[]
  lesson          Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  documentResults DocumentResult[]
}

model DocumentResult {
  id         String    @id @default(cuid()) @db.VarChar(30)
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @updatedAt
  answers    String[]
  drafts     String[]
  userId     String?   @db.VarChar(30)
  lessonId   String?   @db.VarChar(30)
  documentId String?   @db.VarChar(30)
  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lesson     Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model EmailCampaign {
  id             String          @id @default(cuid())
  content        String
  emails         Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String?
  emailReminders EmailReminder[]
  lawrdle        Lawrdle[]
  post           Post[]
}

model EmailReminder {
  id              String         @id @default(cuid())
  userId          String?
  coursePageId    String?
  sendAt          DateTime?
  link            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  emailsSent      String[]
  status          Int?
  emailCampaignId String?
  gap             Int?           @default(1)
  coursePage      CoursePage?    @relation(fields: [coursePageId], references: [id])
  emailCampaign   EmailCampaign? @relation(fields: [emailCampaignId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])
}

model Exam {
  id         String       @id @default(cuid()) @db.VarChar(30)
  nodeType   String?
  nodeID     String?      @db.VarChar(25)
  question   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String?
  userId     String       @db.VarChar(30)
  lessonId   String       @db.VarChar(30)
  lesson     Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  examResult ExamResult[]
}

model ExamAnswer {
  id             String           @id @default(cuid())
  answer         String
  examQuestionID String           @db.VarChar(25)
  updatedAt      DateTime    @updatedAt
  createdAt      DateTime         @default(now())
  studentId      String           @db.VarChar(30)
  examQuestionId String           @db.VarChar(30)
  examQuestion   ExamQuestion     @relation(fields: [examQuestionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           User             @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  legalPortfolio LegalPortfolio[] @relation("ExamAnswerToLegalPortfolio")
}

model ExamQuestion {
  id           String       @id @default(cuid()) @db.VarChar(30)
  coursePageID String       @db.VarChar(25)
  question     String
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())
  coursePage   CoursePage?
  examAnswer   ExamAnswer[]
}

model ExamResult {
  id        String   @id @default(cuid()) @db.VarChar(30)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  answers   String[]
  userId    String?  @db.VarChar(30)
  lessonId  String?  @db.VarChar(30)
  examId    String?  @db.VarChar(30)
  exam      Exam?    @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lesson    Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Feedback {
  id        String   @id @default(cuid()) @db.VarChar(30)
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacherId String   @db.VarChar(30)
  studentId String   @db.VarChar(30)
  lessonId  String?  @db.VarChar(30)
  lesson    Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student   User     @relation("StudentFeedback", fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teacher   User     @relation("TeacherFeedback", fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Forum {
  id         String      @id @default(cuid()) @db.VarChar(30)
  text       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String?     @db.VarChar(30)
  user       User?       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lesson     Lesson?
  rating     Rating[]
  statements Statement[]
}

model GrowthArea {
  id                    String                  @id @default(cuid())
  name                  String
  maxProgress           Int?
  marks                 Json?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userLevels  UserLevel[] @relation("GrowthAreaToUserLevel")

}

model Lawrdle {
  id              String         @id @default(cuid())
  word            String
  story           String
  authorId        String
  active          Boolean
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  pros            String[]
  tags            String[]
  coursePageId    String?
  buttonText      String?
  link            String?
  emailCampaignId String?
  leadin          String?
  lessonId        String?
  author          User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  coursePage      CoursePage?    @relation(fields: [coursePageId], references: [id])
  emailCampaign   EmailCampaign? @relation(fields: [emailCampaignId], references: [id])
}

model LegalPortfolio {
  id           String       @id @default(cuid())
  cv           String?
  resume       String?
  open         Boolean      @default(false)
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())
  portfolioIDs String[]
  user         User?
  examAnswer   ExamAnswer[] @relation("ExamAnswerToLegalPortfolio")
}

model Lesson {
  id                  String               @id @default(cuid()) @db.VarChar(30)
  text                String
  goal                String?
  openSize            Int?                 @default(2)
  coursePageID        String               @db.VarChar(30)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  name                String
  number              Int?
  tags                String[]
  published           Boolean?             @default(false)
  open                Boolean?             @default(false)
  type                String?              @default("REGULAR")
  description         String?
  structure           Json?
  challenge_num       Int?                 @default(10)
  change              String?
  map                 Json[]               @db.Json
  userId              String               @db.VarChar(30)
  coursePageId        String               @db.VarChar(30)
  forumId             String?              @unique(map: "Lesson.forumId_unique") @db.VarChar(30)
  image               String?
  short_structure     Json?
  assignment          Boolean?
  totalPoints         Int?                 @default(0)
  hasSecret           Boolean?             @default(false)
  challengeResults    ChallengeResult[]    
  chats               Chat[]
  constructions       Construction[]
  constructionResults ConstructionResult[]
  documents           Document[]
  documentResults     DocumentResult[]
  exams               Exam[]
  examResults         ExamResult[]
  feedback            Feedback[]
  coursePage          CoursePage           @relation(fields: [coursePageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  forum               Forum?               @relation(fields: [forumId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lessonResults       LessonResult[]
  miniforums          MiniForum[]
  newTests            NewTest[]
  notes               Note[]               
  offers              Offer[]
  problems            Problem[]
  problemResults      ProblemResult[]
  quizes              Quiz[]
  quizResults         QuizResult[]
  shots               Shot[]
  shotResults         ShotResult[]
  teamQuests          TeamQuest[]
  teamQuestResults    TeamQuestResult[]
  test                Test[]
  testPractices       TestPractice[]
  testPracticeResults TestPracticeResult[]
  testResults         TestResult[]
  texteditors         TextEditor[]
  textEditorResults   TextEditorResult[]
}

model LessonResult {
  id           String   @id @default(cuid()) @db.VarChar(30)
  visitsNumber Int?     @default(1)
  lessonID     String?  @db.VarChar(30)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  progress     Int?     @default(0)
  studentId    String   @db.VarChar(30)
  lessonId     String   @db.VarChar(30)
  checked      Boolean? @default(false)
  lesson       Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student      User     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Message {
  id           String   @id @default(cuid())
  text         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?
  subject      String?
  comment      String?
  coursePageId String?
  link         String?
  user         User?    @relation(fields: [userId], references: [id])
}

model MiniForum {
  id         String      @id @default(cuid())
  text       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  lessonId   String?
  userId     String?
  type       String?
  value      String?
  lesson     Lesson?     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  statements Statement[]
}

model NewTest {
  id          String       @id @default(cuid()) @db.VarChar(30)
  lessonID    String?      @db.VarChar(30)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  type        String?      @default("TEST")
  next        Json?
  goalType    String?      @default("EDUCATE")
  goal        String?
  name        String?
  instructorName  String?
  image       String?
  ifRight     String?
  ifWrong     String?
  question    String[]
  answers     String[]
  correct     Boolean[]
  userId      String       @db.VarChar(30)
  lessonId    String?      @db.VarChar(30)
  complexity  Int?         @default(1)
  comments    String[]
  lesson      Lesson?      @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  testResults TestResult[]
}

model Note {
  id          String   @id @default(cuid()) @db.VarChar(30)
  text        String
  name        String?
  lessonID    String?  @db.VarChar(30)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  next        Json?
  userId      String?  @db.VarChar(30)
  lessonId    String?  @db.VarChar(30)
  chat        Boolean?
  complexity  Int?     @default(1)
  link_clicks Int?     @default(0)
  isSecret    Boolean? @default(false)
  type        String?  @default("longread")
  lesson      Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Offer {
  id            String   @id @default(cuid())
  header        String
  text          String
  type          String?
  courseId      String?
  price         Int?
  discountPrice Int?
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())
  userId        String?
  lessonId      String?
  programId     String?
  lesson        Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  program       Program? @relation(fields: [programId], references: [id])
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id           String     @id @default(cuid()) @db.VarChar(30)
  price        Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  paymentID    String?
  promocode    String?
  isPaid       Boolean?
  level        Level?
  comment      String?
  userId       String     @db.VarChar(30)
  coursePageId String     @db.VarChar(30)
  programId    String?
  teamId       String?
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  program      Program?   @relation(fields: [programId], references: [id])
  team         Team?      @relation(fields: [teamId], references: [id])
  user         User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PointA {
  id           String     @id @default(cuid()) @db.VarChar(30)
  description  String?
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  coursePageID String?    @db.VarChar(25)
  userId       String     @db.VarChar(30)
  coursePageId String     @db.VarChar(30)
  text         String?
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pointATest   PointATest[] @relation("PointATests")

}

model PointATest {
  id             String      @id @default(cuid()) @db.VarChar(30)
  question       String
  answer1        String
  answer1Correct String
  answer2        String
  answer2Correct String
  answer3        String?
  answer3Correct String?
  answer4        String?
  answer4Correct String?
  coursePageID   String?     @db.VarChar(25)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userId         String      @db.VarChar(30)
  coursePageId   String?     @db.VarChar(30)
  coursePage     CoursePage? @relation(fields: [coursePageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pointA         PointA[]    @relation("PointATests")
}

model Post {
  id              String         @id @default(cuid()) @db.VarChar(30)
  title           String?
  text            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  likes           Int?           @default(1)
  tags            String[]
  userId          String         @db.VarChar(30)
  summary         String?
  image           String?
  language        String?        @default("ru")
  coursePageId    String?
  lessonId        String?
  leadin          String?
  emailCampaignId String?
  coursePage      CoursePage?    @relation(fields: [coursePageId], references: [id])
  emailCampaign   EmailCampaign? @relation(fields: [emailCampaignId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Problem {
  id             String          @id @default(cuid()) @db.VarChar(30)
  name           String?
  text           String
  hints          String?
  solution       String?
  answer         String?
  goal           String?
  type           String?         @default("BRANCHING_SCENARIO")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lessonID       String          @db.VarChar(30)
  nodeType       String?
  nodeID         String?         @db.VarChar(30)
  hintsList      String[]
  solutionList   String[]
  userId         String          @db.VarChar(30)
  lessonId       String          @db.VarChar(30)
  complexity     Int?            @default(1)
  isSecret       Boolean?        @default(false)
  steps          Json?
  lesson         Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  problemResults ProblemResult[]
}

model ProblemResult {
  id        String   @id @default(cuid()) @db.VarChar(30)
  answer    String?
  lessonID  String?  @db.VarChar(30)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  problemID String?  @db.VarChar(30)
  revealed  String[]
  studentId String   @db.VarChar(30)
  lessonId  String?  @db.VarChar(30)
  problemId String?  @db.VarChar(30)
  depth     Int      @default(0)
  lesson    Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  problem   Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Program {
  id                  String                @id @default(cuid())
  title               String
  description         String
  image               String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  price               Int?
  currency            String?               @default("ruble")
  discountPrice       Int?
  published           Boolean?              @default(false)
  news                String?
  audience            String?
  result              String?
  tariffs             String?
  methods             String?
  video               String?
  batch               String?
  header              String[]
  subheader           String[]
  nextStart           DateTime?
  uptodateAt          DateTime?
  goals               String[]
  reviews             Json?
  installments        Int?
  tags                String[]
  promocode           Json?
  promotionId         String?
  syllabus            Json?
  months              Int?
  offers              Offer[]
  orders              Order[]
  coursePages   CoursePage[] @relation("CoursePageToProgram")

}

model Quiz {
  id          String       @id @default(cuid()) @db.VarChar(30)
  question    String
  answer      String
  answers     Json?
  goal        String?
  lessonID    String?      @db.VarChar(30)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  type        String?      @default("TEST")
  goalType    String?      @default("EDUCATE")
  next        Json?
  ifRight     String?
  ifWrong     String?
  name        String?
  instructorName  String?
  image       String?
  check       String?      @default("IDEA")
  userId      String       @db.VarChar(30)
  lessonId    String?      @db.VarChar(30)
  complexity  Int?         @default(1)
  lesson      Lesson?      @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  quizResults QuizResult[]
}

model QuizResult {
  id          String   @id @default(cuid()) @db.VarChar(30)
  answer      String?
  attempts    Int?
  ideasList   Json?
  ideas       String[]
  hint        String?
  explanation String?
  comment     String?
  type        String?
  result      String?
  improvement String?
  lessonID    String?  @db.VarChar(30)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  correct     Boolean?
  studentId   String   @db.VarChar(30)
  lessonId    String?  @db.VarChar(30)
  quizId      String?  @db.VarChar(30)
  lesson      Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  quiz        Quiz?    @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Rating {
  id        String   @id @default(cuid()) @db.VarChar(30)
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @db.VarChar(30)
  forumId   String?  @db.VarChar(30)
  forum     Forum?   @relation(fields: [forumId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Sandbox {
  id            String      @id @default(cuid()) @db.VarChar(30)
  text          String
  video         String?
  sandboxPageID String      @db.VarChar(25)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  likes         Int?        @default(0)
  link          String?
  sandboxPageId String      @db.VarChar(30)
  sandboxPage   SandboxPage @relation(fields: [sandboxPageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SandboxPage {
  id              String            @id @default(cuid()) @db.VarChar(30)
  title           String
  description     String
  image           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  students        String[]
  userId          String            @db.VarChar(30)
  sandbox         Sandbox[]
  user            User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sandboxPageGoal SandboxPageGoal[]
}

model SandboxPageGoal {
  id            String       @id @default(cuid()) @db.VarChar(30)
  goal          String
  completed     Boolean      @default(false)
  sandboxPageID String       @db.VarChar(25)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String       @db.VarChar(30)
  sandboxPageId String?      @db.VarChar(30)
  sandboxPage   SandboxPage? @relation(fields: [sandboxPageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Shot {
  id          String       @id @default(cuid()) @db.VarChar(30)
  title       String
  name        String?
  lessonID    String?      @db.VarChar(30)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parts       String[]
  comments    String[]
  userId      String       @db.VarChar(30)
  lessonId    String?      @db.VarChar(30)
  lesson      Lesson?      @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shotResults ShotResult[]
}

model ShotResult {
  id        String   @id @default(cuid()) @db.VarChar(30)
  answer    String
  lessonID  String?  @db.VarChar(30)
  shotID    String?  @db.VarChar(30)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String   @db.VarChar(30)
  lessonId  String?  @db.VarChar(30)
  shotId    String?  @db.VarChar(30)
  depth     Int      @default(1)
  lesson    Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shot      Shot?    @relation(fields: [shotId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Statement {
  id          String     @id @default(cuid()) @db.VarChar(30)
  text        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String?    @db.VarChar(30)
  forumId     String?    @db.VarChar(30)
  comments    String[]
  answered    Boolean?   @default(false)
  miniforumId String?
  forum       Forum?     @relation(fields: [forumId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  miniForum   MiniForum? @relation(fields: [miniforumId], references: [id])
  user        User?      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Team {
  id          String        @id @default(cuid())
  name        String
  image       String?
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  founderId   String
  orders      Order[]
  founder     User          @relation("Team_founderIdToUser", fields: [founderId], references: [id], onDelete: Cascade)
  users     User[]          @relation("joinedTeams")
}

model TeamQuest {
  id               String            @id @default(cuid())
  introduction     String
  solution         String?
  tasks            Json
  userId           String
  lessonId         String
  updatedAt        DateTime          @updatedAt
  createdAt        DateTime          @default(now())
  lesson           Lesson            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamQuestResults TeamQuestResult[]
}

model TeamQuestResult {
  id          String     @id @default(cuid())
  answer      String?
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  studentId   String
  lessonId    String?
  teamQuestId String?
  lesson      Lesson?    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student     User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teamQuest   TeamQuest? @relation(fields: [teamQuestId], references: [id], onDelete: Cascade)
}

model Test {
  id             String   @id @default(cuid()) @db.VarChar(30)
  question       String
  answer1        String
  answer1Correct String
  answer2        String
  answer2Correct String
  answer3        String?
  answer3Correct String?
  answer4        String?
  answer4Correct String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lessonID       String?  @db.VarChar(25)
  userId         String   @db.VarChar(30)
  lessonId       String?  @db.VarChar(30)
  lesson         Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model TestPractice {
  id                 String               @id @default(cuid())
  text               String?
  tasksNum           Int
  goal               String?
  tasks              String[]
  userId             String?
  lessonId           String?
  updatedAt          DateTime             @updatedAt
  createdAt          DateTime             @default(now())
  intro              String?
  successText        String?
  failureText        String?
  lesson             Lesson?              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user               User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  testPracticeResult TestPracticeResult[]
}

model TestPracticeResult {
  id             String        @id @default(cuid())
  tasks          String[]
  correct        Int
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  studentId      String
  lessonId       String?
  testPracticeId String?
  lesson         Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student        User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  testPractice   TestPractice? @relation(fields: [testPracticeId], references: [id], onDelete: Cascade)
}

model TestResult {
  id         String   @id @default(cuid()) @db.VarChar(30)
  answer     String?
  attempts   Int?
  result     String?
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  lessonID   String?  @db.VarChar(30)
  testID     String?  @db.VarChar(30)
  studentId  String   @db.VarChar(30)
  lessonId   String?  @db.VarChar(30)
  testId     String?  @db.VarChar(30)
  answerArray String[]
  lesson     Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  test       NewTest? @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model TextEditor {
  id                String             @id @default(cuid()) @db.VarChar(30)
  name              String
  text              String
  goal              String?
  lessonID          String             @db.VarChar(30)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  totalMistakes     Int?
  userId            String             @db.VarChar(30)
  lessonId          String             @db.VarChar(30)
  complexity        Int?               @default(1)
  lesson            Lesson             @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  textEditorResults TextEditorResult[]
}

model TextEditorResult {
  id           String      @id @default(cuid()) @db.VarChar(30)
  attempts     Int?
  wrong        String?
  correct      String?
  guess        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  result       Boolean?
  studentId    String      @db.VarChar(30)
  lessonId     String?     @db.VarChar(30)
  textEditorId String?     @db.VarChar(30)
  type         String?
  lesson       Lesson?     @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student      User        @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  textEditor   TextEditor? @relation(fields: [textEditorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Uni {
  id         String       @id @default(cuid()) @db.VarChar(30)
  title      String
  capacity   Int?         @default(2)
  updatedAt  DateTime
  createdAt  DateTime     @default(now())
  paidMonths Int?         @default(0)
  coursePage CoursePage[]
  teachers   User[]
}

model Useful {
  id         String   @id @default(cuid())
  header     String
  buttonText String
  link       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tags       String[]
  image      String
  name       String?
}

model User {
  id                 String               @id @default(cuid()) @db.VarChar(30)
  name               String
  email              String               @unique(map: "User.email_unique")
  password           String
  resetToken         String?
  resetTokenExpiry   Decimal?
  authType           String?              @default("email")
  isFamiliar         Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  careerTrackID      String?              @db.VarChar(30)
  status             String?              @default("STUDENT")
  uniID              String?              @db.VarChar(30)
  description        String?
  resume             String?
  coverLetter        String?
  surname            String?
  image              String?
  favourites         String[]
  subjects           String[]
  permissions        Permission[]
  uniId              String?              @db.VarChar(30)
  companyId          String?              @db.VarChar(30)
  legalPortfolioId   String?              @unique(map: "User.legalPortfolioId_unique") @db.VarChar(30)
  careerTrackId      String?              @unique(map: "User.careerTrackId_unique") @db.VarChar(30)
  levelId            String?              @unique(map: "User.levelId_unique") @db.VarChar(30)
  number             String?
  tags               String[]
  comment            String?
  work               String?
  country            String?
  traffic_sources    Json?
  active             Boolean?             @default(false)
  score              Int?                 @default(0)
  referal            String?
  certificates       Certificate[]
  challengeResults   ChallengeResult[]
  chat               Chat[]
  clause             Clause[]
  construction       Construction[]
  constructionResult ConstructionResult[]
  coursePages        CoursePage[]         @relation("CoursePage_userIdToUser")
  courseVisits       CourseVisit[]
  document           Document[]
  documentResult     DocumentResult[]
  emailReminders     EmailReminder[]
  exam               Exam[]
  examAnswer         ExamAnswer[]
  examResult         ExamResult[]
  studentFeedback    Feedback[]           @relation("StudentFeedback")
  teacherFeedback    Feedback[]           @relation("TeacherFeedback")
  forum              Forum[]
  lawrdles           Lawrdle[]
  lessons            Lesson[]
  lessonResults      LessonResult[]
  messages           Message[]
  miniforums         MiniForum[]
  new_subjects       CoursePage[]         @relation("UserSubjects")
  newTests           NewTest[]
  notes              Note[]
  offers             Offer[]
  orders             Order[]
  pointAs            PointA[]
  pointATests        PointATest[]
  posts              Post[]
  problems           Problem[]
  problemResults     ProblemResult[]
  quizes             Quiz[]
  quizResults        QuizResult[]
  ratings            Rating[]
  sandboxPage        SandboxPage[]
  sandboxPageGoal    SandboxPageGoal[]
  shot               Shot[]
  shotResult         ShotResult[]
  statement          Statement[]
  teams              Team[]               @relation("Team_founderIdToUser")
  myTeams            Team[]               @relation("joinedTeams")
  teamQuests         TeamQuest[]
  teamQuestResults   TeamQuestResult[]
  test               Test[]
  testPractices      TestPractice[]
  testPracticeResult TestPracticeResult[]
  testResults        TestResult[]
  textEditors        TextEditor[]
  textEditorResults  TextEditorResult[]
  careerTrack        CareerTrack?         @relation(fields: [careerTrackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company            Company?             @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  legalPortfolio     LegalPortfolio?      @relation(fields: [legalPortfolioId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  level              UserLevel?           @relation(fields: [levelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uni                Uni?                 @relation(fields: [uniId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  co_coursePages     CoursePage[]         @relation("AuthorsCoursePage")
}

model UserLevel {
  id               String     @id @default(cuid()) @db.VarChar(30)
  level            Decimal?   @default(1)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  consumedContent  Json?
  myProgress       Json?
  isProgressPublic Boolean?   @default(false)
  learningStreak   DateTime[]
  user             User?
  growthAreas      GrowthArea[] @relation("GrowthAreaToUserLevel")
}

enum CheckType {
  WORD
  IDEA
}

enum CourseType {
  PUBLIC
  PRIVATE
  FORMONEY
  UNI
  CHALLENGE
}

enum Level {
  STANDARD
  ADVANCED
}

enum PageView {
  COURSE
  CONF
}

enum Permission {
  ADMIN
  USER
}

enum Status {
  STUDENT
  LAWYER
  AUTHOR
  SAVVY_AUTHOR
  HR
}

enum TaskType {
  TEST
  FORM
}

enum Type {
  STORY
  REGULAR
  CHALLENGE
  HIDDEN
}
