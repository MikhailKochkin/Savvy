generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id            String     @id @default(cuid())
  applicantId   String     @default(cuid())
  applicantName String
  message       String?
  coursePageID  String     @default(cuid())
  updatedAt     DateTime   @updatedAt
  createdAt     DateTime   @default(now())
  coursePageId  String
  coursePage    CoursePage @relation(fields: [coursePageId], references: [id])
}

model BusinessClient {
  id                   String   @id @default(cuid())
  email                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  name                 String?
  number               String?
  communication_medium String?
  type                 String?
}

model ConfUser {
  id          String   @id @default(cuid())
  email       String
  name        String?
  surname     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  conf_number Int?
}

model CareerTrack {
  id               String            @id @default(cuid())
  name             String
  updatedAt        DateTime          @updatedAt
  createdAt        DateTime          @default(now())
  img              String?
  careerTrackUnits CareerTrackUnit[]
  members          User?
  coursePages      CoursePage[]      @relation("CoursePageForCareer")
}

model CareerTrackUnit {
  id            String       @id @default(cuid())
  title         String
  number        Int?
  updatedAt     DateTime     @updatedAt
  createdAt     DateTime     @default(now())
  img           String?
  topics        String[]
  articles      String[]
  careerTrackId String
  careerTrack   CareerTrack  @relation(fields: [careerTrackId], references: [id])
  coursePages   CoursePage[]
}

model ChallengeResult {
  id        String   @id @default(cuid())
  correct   Int?
  wrong     Int?
  time      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Clause {
  id         String   @id @default(cuid())
  number     Int
  commentary String
  sample     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  keywords   String[]
  userId     String
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Company {
  id         String       @id @default(cuid())
  name       String
  paidMonths Int?         @default(0)
  updatedAt  DateTime     @updatedAt
  createdAt  DateTime     @default(now())
  coursePage CoursePage[]
  hrs        User[]
}

model Construction {
  id                  String               @id @default(cuid())
  name                String
  lessonID            String               @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  hint                String?
  type                String
  variants            String[]
  answer              String[]
  userId              String
  lessonId            String
  complexity          Int?                 @default(1)
  text                String?
  hasText             Boolean              @default(false)
  lesson              Lesson               @relation(fields: [lessonId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])
  constructionResults ConstructionResult[]
}

model ConstructionResult {
  id             String        @id @default(cuid())
  answer         String?
  attempts       Int?
  constructionID String?       @default(cuid())
  lessonID       String?       @default(cuid())
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  inputs         String[]
  studentId      String
  lessonId       String?
  constructionId String?
  construction   Construction? @relation(fields: [constructionId], references: [id])
  lesson         Lesson?       @relation(fields: [lessonId], references: [id])
  student        User          @relation(fields: [studentId], references: [id])
}

model CoursePage {
  id                String            @id @default(cuid())
  title             String
  description       String
  image             String
  courseType        CourseType?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  price             Int?
  discountPrice     Int?
  numInCareerTrack  Int?
  published         Boolean?          @default(false)
  uniID             String?           @default(cuid())
  news              String?           @default("Добро пожаловать на курс! Проходите уроки, выполняйте задания и выполняйте финальное задание!")
  audience          String?
  result            String?
  tariffs           String?
  methods           String?
  openLesson        String?
  video             String?
  companyId         String?
  banner            String?
  batch             String?
  reviews           Json?
  weeks             Int?
  subscriptionPrice Int?
  subscription      Boolean?          @default(false)
  tags              String[]
  students          String[]
  userId            String
  uniId             String?
  examQuestionId    String?           @unique
  promocode         Json?
  company           Company?          @relation(fields: [companyId], references: [id])
  examQuestion      ExamQuestion?     @relation(fields: [examQuestionId], references: [id])
  uni               Uni?              @relation(fields: [uniId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  applications      Application[]
  visits            CourseVisit[]
  lessons           Lesson[]
  orders            Order[]
  PointA            PointA[]
  PointATest        PointATest[]
  authors           User[]            @relation("AuthorsCoursePage")
  careerTrackUnit   CareerTrackUnit[]
  careerTrack       CareerTrack[]     @relation("CoursePageForCareer")
  posts             Post[]            @relation("PostCoursePages")
  new_students      User[]            @relation("UserSubjects")
}

model CourseVisit {
  id           String     @id @default(cuid())
  visitsNumber Int?       @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  finish       DateTime?
  reminders    DateTime[]
  studentId    String
  coursePageId String
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id])
  student      User       @relation(fields: [studentId], references: [id])
}

model Document {
  id              String           @id @default(cuid())
  title           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  lessonId        String
  complexity      Int?             @default(1)
  lesson          Lesson           @relation(fields: [lessonId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  clauses         Clause[]
  documentResults DocumentResult[]
}

model DocumentResult {
  id         String    @id @default(cuid())
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())
  answers    String[]
  drafts     String[]
  userId     String?
  lessonId   String?
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])
  lesson     Lesson?   @relation(fields: [lessonId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacherId String
  studentId String
  lessonId  String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  student   User     @relation("StudentFeedback", fields: [studentId], references: [id])
  teacher   User     @relation("TeacherFeedback", fields: [teacherId], references: [id])
}

model Forum {
  id         String      @id @default(cuid())
  text       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String?
  user       User?       @relation(fields: [userId], references: [id])
  lesson     Lesson?
  rating     Rating[]
  statements Statement[]
}

model LegalPortfolio {
  id           String       @id @default(cuid())
  cv           String?
  resume       String?
  open         Boolean      @default(false)
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())
  portfolioIDs String[]
  user         User?
  examAnswer   ExamAnswer[]
}

model Lesson {
  id                  String               @id @default(cuid())
  text                String
  coursePageID        String               @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  name                String
  number              Int?
  published           Boolean?             @default(false)
  open                Boolean?             @default(false)
  type                String?              @default("REGULAR")
  description         String?
  structure           Json?
  challenge_num       Int?                 @default(10)
  change              String?
  map                 Json[]
  userId              String
  coursePageId        String
  forumId             String?              @unique
  image               String?
  coursePage          CoursePage           @relation(fields: [coursePageId], references: [id])
  forum               Forum?               @relation(fields: [forumId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])
  challengeResults    ChallengeResult[]
  chats               Chat[]
  constructions       Construction[]
  constructionResults ConstructionResult[]
  documents           Document[]
  documentResult      DocumentResult[]
  exam                Exam[]
  examResult          ExamResult[]
  lessonFeedback      Feedback[]
  lessonResults       LessonResult[]
  newTests            NewTest[]
  notes               Note[]
  problems            Problem[]
  problemResults      ProblemResult[]
  quizes              Quiz[]
  quizResults         QuizResult[]
  shots               Shot[]
  shotResults         ShotResult[]
  test                Test[]
  testResults         TestResult[]
  texteditors         TextEditor[]
  textEditorResults   TextEditorResult[]
}

model LessonResult {
  id           String   @id @default(cuid())
  visitsNumber Int?     @default(1)
  lessonID     String?  @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  progress     Int?     @default(0)
  studentId    String
  lessonId     String
  lesson       Lesson   @relation(fields: [lessonId], references: [id])
  student      User     @relation(fields: [studentId], references: [id])
}

model NewTest {
  id          String       @id @default(cuid())
  lessonID    String?      @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  type        String?      @default("TEST")
  next        Json?
  ifRight     String?
  ifWrong     String?
  question    String[]
  answers     String[]
  correct     Boolean[]
  userId      String
  lessonId    String?
  complexity  Int?         @default(1)
  lesson      Lesson?      @relation(fields: [lessonId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  testResults TestResult[]
}

model Note {
  id         String   @id @default(cuid())
  text       String
  lessonID   String?  @default(cuid())
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  next       Json?
  userId     String?
  lessonId   String?
  chat       Boolean?
  complexity Int?     @default(1)
  lesson     Lesson?  @relation(fields: [lessonId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}

model Order {
  id           String     @id @default(cuid())
  price        Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  paymentID    String?
  promocode    String?
  isPaid       Boolean?
  level        Level?
  comment      String?
  userId       String
  coursePageId String
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Post {
  id          String       @id @default(cuid())
  title       String?
  text        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  likes       Int?         @default(1)
  tags        String[]
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  coursePages CoursePage[] @relation("PostCoursePages")
}

model Problem {
  id             String          @id @default(cuid())
  text           String
  hints          String?
  solution       String?
  answer         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lessonID       String          @default(cuid())
  nodeType       String?
  nodeID         String?         @default(cuid())
  hintsList      String[]
  solutionList   String[]
  userId         String
  lessonId       String
  complexity     Int?            @default(1)
  lesson         Lesson          @relation(fields: [lessonId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  problemResults ProblemResult[]
}

model ProblemResult {
  id        String   @id @default(cuid())
  answer    String?
  lessonID  String?  @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  problemID String?  @default(cuid())
  revealed  String[]
  studentId String
  lessonId  String?
  problemId String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  problem   Problem? @relation(fields: [problemId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Quiz {
  id          String       @id @default(cuid())
  question    String
  answer      String
  lessonID    String?      @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  type        String?      @default("TEST")
  next        Json?
  ifRight     String?
  ifWrong     String?
  check       String?      @default("IDEA")
  userId      String
  lessonId    String?
  complexity  Int?         @default(1)
  lesson      Lesson?      @relation(fields: [lessonId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  quizResults QuizResult[]
}

model QuizResult {
  id        String   @id @default(cuid())
  answer    String?
  attempts  Int?
  lessonID  String?  @default(cuid())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  correct   Boolean?
  studentId String
  lessonId  String?
  quizId    String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  quiz      Quiz?    @relation(fields: [quizId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  forumId   String?
  forum     Forum?   @relation(fields: [forumId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Shot {
  id          String       @id @default(cuid())
  title       String
  lessonID    String?      @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parts       String[]
  comments    String[]
  userId      String
  lessonId    String?
  lesson      Lesson?      @relation(fields: [lessonId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  shotResults ShotResult[]
}

model ShotResult {
  id        String   @id @default(cuid())
  answer    String
  lessonID  String?  @default(cuid())
  shotID    String?  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  lessonId  String?
  shotId    String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  shot      Shot?    @relation(fields: [shotId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Statement {
  id        String   @id @default(cuid())
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  forumId   String?
  comments  String[]
  forum     Forum?   @relation(fields: [forumId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model TestResult {
  id        String   @id @default(cuid())
  answer    String?
  attempts  Int?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  lessonID  String?  @default(cuid())
  testID    String?  @default(cuid())
  studentId String
  lessonId  String?
  testId    String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
  test      NewTest? @relation(fields: [testId], references: [id])
}

model TextEditor {
  id                String             @id @default(cuid())
  name              String
  text              String
  lessonID          String             @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  totalMistakes     Int?
  userId            String
  lessonId          String
  complexity        Int?               @default(1)
  lesson            Lesson             @relation(fields: [lessonId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  textEditorResults TextEditorResult[]
}

model TextEditorResult {
  id           String      @id @default(cuid())
  attempts     Int?
  wrong        String
  correct      String
  guess        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  result       Boolean?
  studentId    String
  lessonId     String?
  textEditorId String?
  lesson       Lesson?     @relation(fields: [lessonId], references: [id])
  student      User        @relation(fields: [studentId], references: [id])
  textEditor   TextEditor? @relation(fields: [textEditorId], references: [id])
}

model Uni {
  id         String       @id @default(cuid())
  title      String
  capacity   Int?         @default(2)
  updatedAt  DateTime     @updatedAt
  createdAt  DateTime     @default(now())
  paidMonths Int?         @default(0)
  coursePage CoursePage[]
  teachers   User[]
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  resetToken          String?
  resetTokenExpiry    Float?
  isFamiliar          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  careerTrackID       String?              @default(cuid())
  status              String?              @default("STUDENT")
  uniID               String?              @default(cuid())
  description         String?
  resume              String?
  coverLetter         String?
  surname             String?
  image               String?
  favourites          String[]
  subjects            String[]
  interests           String[]
  permissions         Permission[]
  uniId               String?
  companyId           String?
  legalPortfolioId    String?              @unique
  careerTrackId       String?              @unique
  levelId             String?              @unique
  careerTrack         CareerTrack?         @relation(fields: [careerTrackId], references: [id])
  company             Company?             @relation(fields: [companyId], references: [id])
  legalPortfolio      LegalPortfolio?      @relation(fields: [legalPortfolioId], references: [id])
  level               UserLevel?           @relation(fields: [levelId], references: [id])
  uni                 Uni?                 @relation(fields: [uniId], references: [id])
  challengeResults    ChallengeResult[]
  chats               Chat[]
  clauses             Clause[]
  constructions       Construction[]
  constructionResults ConstructionResult[]
  coursePages         CoursePage[]
  courseVisits        CourseVisit[]
  documents           Document[]
  documentResults     DocumentResult[]
  exams               Exam[]
  examAnswers         ExamAnswer[]
  examResults         ExamResult[]
  studentFeedback     Feedback[]           @relation("StudentFeedback")
  teacherFeedback     Feedback[]           @relation("TeacherFeedback")
  forums              Forum[]
  lessons             Lesson[]
  lessonResults       LessonResult[]
  newTests            NewTest[]
  notes               Note[]
  orders              Order[]
  pointAs             PointA[]
  pointATests         PointATest[]
  posts               Post[]
  problems            Problem[]
  problemResults      ProblemResult[]
  quizes              Quiz[]
  quizResults         QuizResult[]
  ratings             Rating[]
  sandboxPages        SandboxPage[]
  sandboxPageGoals    SandboxPageGoal[]
  shots               Shot[]
  shotResults         ShotResult[]
  statements          Statement[]
  tests               Test[]
  testResults         TestResult[]
  textEditors         TextEditor[]
  textEditorResults   TextEditorResult[]
  co_coursePages      CoursePage[]         @relation("AuthorsCoursePage")
  new_subjects        CoursePage[]         @relation("UserSubjects")
}

model UserLevel {
  id        String   @id @default(cuid())
  level     Float?   @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

model Exam {
  id         String       @id
  nodeType   String?
  nodeID     String?
  question   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  name       String?
  userId     String
  lessonId   String
  lesson     Lesson       @relation(fields: [lessonId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
  examResult ExamResult[]
}

model ExamAnswer {
  id             String           @id
  answer         String
  examQuestionID String
  updatedAt      DateTime
  createdAt      DateTime         @default(now())
  studentId      String
  examQuestionId String
  examQuestion   ExamQuestion     @relation(fields: [examQuestionId], references: [id])
  user           User             @relation(fields: [studentId], references: [id])
  legalPortfolio LegalPortfolio[]
}

model ExamQuestion {
  id           String       @id
  coursePageID String
  question     String
  updatedAt    DateTime
  createdAt    DateTime     @default(now())
  coursePage   CoursePage?
  examAnswer   ExamAnswer[]
}

model ExamResult {
  id        String   @id
  updatedAt DateTime
  createdAt DateTime @default(now())
  answers   String[]
  userId    String?
  lessonId  String?
  examId    String?
  exam      Exam?    @relation(fields: [examId], references: [id])
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Chat {
  id         String   @id @default(cuid())
  name       String?
  messages   Json?
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  userId     String
  lessonId   String
  complexity Int?     @default(1)
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model PointA {
  id           String       @id
  description  String?
  updatedAt    DateTime
  createdAt    DateTime     @default(now())
  coursePageID String?
  userId       String
  coursePageId String
  coursePage   CoursePage   @relation(fields: [coursePageId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  pointATest   PointATest[] @relation("PointATests")
}

model PointATest {
  id             String      @id
  question       String
  answer1        String
  answer1Correct String
  answer2        String
  answer2Correct String
  answer3        String?
  answer3Correct String?
  answer4        String?
  answer4Correct String?
  coursePageID   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime
  userId         String
  coursePageId   String?
  coursePage     CoursePage? @relation(fields: [coursePageId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  pointA         PointA[]    @relation("PointATests")
}

model Sandbox {
  id            String      @id
  text          String
  video         String?
  sandboxPageID String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  likes         Int?        @default(0)
  link          String?
  sandboxPageId String
  sandboxPage   SandboxPage @relation(fields: [sandboxPageId], references: [id])
}

model SandboxPage {
  id              String            @id
  title           String
  description     String
  image           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  students        String[]
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  sandbox         Sandbox[]
  sandboxPageGoal SandboxPageGoal[]
}

model SandboxPageGoal {
  id            String       @id
  goal          String
  completed     Boolean      @default(false)
  sandboxPageID String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  userId        String
  sandboxPageId String?
  sandboxPage   SandboxPage? @relation(fields: [sandboxPageId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
}

model Test {
  id             String   @id
  question       String
  answer1        String
  answer1Correct String
  answer2        String
  answer2Correct String
  answer3        String?
  answer3Correct String?
  answer4        String?
  answer4Correct String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  lessonID       String?
  userId         String
  lessonId       String?
  lesson         Lesson?  @relation(fields: [lessonId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

enum CheckType {
  WORD
  IDEA
}

enum CourseType {
  PUBLIC
  PRIVATE
  FORMONEY
  UNI
  CHALLENGE
}

enum Level {
  STANDARD
  ADVANCED
}

enum Permission {
  ADMIN
  USER
}

enum Status {
  STUDENT
  LAWYER
  AUTHOR
  SAVVY_AUTHOR
  HR
}

enum TaskType {
  TEST
  FORM
}

enum Type {
  STORY
  REGULAR
  CHALLENGE
}
